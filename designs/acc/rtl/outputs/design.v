//-------------------------------------------------------------------------
// Acc_noparam.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL yosys-SystemVerilog translation pass.

// PyMTL Component Mux Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py
module Mux__Type_Bits64__ninputs_2
(
  input  logic [0:0]    clk,
  input  logic [63:0]   in___0,
  input  logic [63:0]   in___1,
  output logic [63:0]   out,
  input  logic [0:0]    reset,
  input  logic [0:0]    sel
);
  // Struct/Array ports in the form of wires
  logic [63:0]   in_ [0:1];

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py:13
  // @update
  // def up_mux():
  //   s.out @= s.in_[ s.sel ]
  
  always_comb begin : up_mux
    out = in_[sel];
  end

  // Connections
  assign in_[0] = in___0;
  assign in_[1] = in___1;

endmodule


// PyMTL Component Mux Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py
module Mux__Type_Bits1__ninputs_2
(
  input  logic [0:0]    clk,
  input  logic [0:0]    in___0,
  input  logic [0:0]    in___1,
  output logic [0:0]    out,
  input  logic [0:0]    reset,
  input  logic [0:0]    sel
);
  // Struct/Array ports in the form of wires
  logic [0:0]    in_ [0:1];

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py:13
  // @update
  // def up_mux():
  //   s.out @= s.in_[ s.sel ]
  
  always_comb begin : up_mux
    out = in_[sel];
  end

  // Connections
  assign in_[0] = in___0;
  assign in_[1] = in___1;

endmodule


// PyMTL Component RegEnRst Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/registers.py
module RegEnRst__Type_Bits64__reset_value_0
(
  input  logic [0:0]    clk,
  input  logic [0:0]    en,
  input  logic [63:0]   in_,
  output logic [63:0]   out,
  input  logic [0:0]    reset
);

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/registers.py:55
  // @update_ff
  // def up_regenrst():
  //   if s.reset: s.out <<= reset_value
  //   elif s.en:  s.out <<= s.in_
  
  always_ff @(posedge clk) begin : up_regenrst
    if ( reset ) begin
      out <= 64'd0;
    end
    else if ( en ) begin
      out <= in_;
    end
  end

endmodule


// PyMTL Component Reg Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/registers.py
module Reg__Type_Bits1
(
  input  logic [0:0]    clk,
  input  logic [0:0]    in_,
  output logic [0:0]    out,
  input  logic [0:0]    reset
);

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/registers.py:10
  // @update_ff
  // def up_reg():
  //   s.out <<= s.in_
  
  always_ff @(posedge clk) begin : up_reg
    out <= in_;
  end

endmodule


// PyMTL Component PipeQueueCtrlRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module PipeQueueCtrlRTL__num_entries_8
(
  input  logic [0:0]    clk,
  output logic [3:0]    count,
  input  logic [0:0]    deq_en,
  output logic [0:0]    deq_rdy,
  input  logic [0:0]    enq_en,
  output logic [0:0]    enq_rdy,
  output logic [2:0]    raddr,
  input  logic [0:0]    reset,
  output logic [2:0]    waddr,
  output logic [0:0]    wen
);
  // Wire declarations
  logic [0:0]    deq_xfer;
  logic [0:0]    enq_xfer;
  logic [2:0]    head;
  logic [2:0]    tail;

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:202
  // s.deq_rdy //= lambda: ~s.reset & ( s.count > CountType(0) )
  
  always_comb begin : _lambda__s_clauses_0__clause_fetcher_recv_queue_ctrl_deq_rdy
    deq_rdy = ( ~reset ) & ( count > 4'd0 );
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:206
  // s.deq_xfer //= lambda: s.deq_en & s.deq_rdy
  
  always_comb begin : _lambda__s_clauses_0__clause_fetcher_recv_queue_ctrl_deq_xfer
    deq_xfer = deq_en & deq_rdy;
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:203
  // s.enq_rdy //= lambda: ~s.reset & ( ( s.count < s.num_entries ) | s.deq_en )
  
  always_comb begin : _lambda__s_clauses_0__clause_fetcher_recv_queue_ctrl_enq_rdy
    enq_rdy = ( ~reset ) & ( ( count < 4'd8 ) | deq_en );
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:205
  // s.enq_xfer //= lambda: s.enq_en & s.enq_rdy
  
  always_comb begin : _lambda__s_clauses_0__clause_fetcher_recv_queue_ctrl_enq_xfer
    enq_xfer = enq_en & enq_rdy;
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:208
  // @update_ff
  // def up_reg():
  // 
  //   if s.reset:
  //     s.head  <<= PtrType(0)
  //     s.tail  <<= PtrType(0)
  //     s.count <<= CountType(0)
  // 
  //   else:
  //     if s.deq_xfer:
  //       s.head <<= s.head + PtrType(1) if s.head < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer:
  //       s.tail <<= s.tail + PtrType(1) if s.tail < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer & ~s.deq_xfer:
  //       s.count <<= s.count + CountType(1)
  //     if ~s.enq_xfer & s.deq_xfer:
  //       s.count <<= s.count - CountType(1)
  
  always_ff @(posedge clk) begin : up_reg
    if ( reset ) begin
      head <= 3'd0;
      tail <= 3'd0;
      count <= 4'd0;
    end
    else begin
      if ( deq_xfer ) begin
        head <= ( head < 3'd7 ) ? head + 3'd1 : 3'd0;
      end
      if ( enq_xfer ) begin
        tail <= ( tail < 3'd7 ) ? tail + 3'd1 : 3'd0;
      end
      if ( enq_xfer & ( ~deq_xfer ) ) begin
        count <= count + 4'd1;
      end
      if ( ( ~enq_xfer ) & deq_xfer ) begin
        count <= count - 4'd1;
      end
    end
  end

  // Connections
  assign wen = enq_xfer;
  assign waddr = tail;
  assign raddr = head;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_Bits32__nregs_8__rd_ports_1__wr_ports_1__const_zero_False
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py
module RegisterFile__3bcda93589bbef3f
(
  input  logic [0:0]    clk,
  input  logic [2:0]    raddr__0,
  output logic [31:0]   rdata__0,
  input  logic [0:0]    reset,
  input  logic [2:0]    waddr__0,
  input  logic [31:0]   wdata__0,
  input  logic [0:0]    wen__0
);
  // Struct/Array ports in the form of wires
  logic [2:0]    raddr [0:0];
  logic [31:0]   rdata [0:0];
  logic [2:0]    waddr [0:0];
  logic [31:0]   wdata [0:0];
  logic [0:0]    wen [0:0];

  // Wire declarations
  logic [31:0]   regs [0:7];

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  integer __loopvar__up_rf_read_i;
  
  always_comb begin : up_rf_read
    for ( __loopvar__up_rf_read_i = 1'd0; __loopvar__up_rf_read_i < 1'd1; __loopvar__up_rf_read_i = __loopvar__up_rf_read_i + 1'd1 )
      rdata[__loopvar__up_rf_read_i] = regs[raddr[__loopvar__up_rf_read_i]];
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  integer __loopvar__up_rf_write_i;
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( __loopvar__up_rf_write_i = 1'd0; __loopvar__up_rf_write_i < 1'd1; __loopvar__up_rf_write_i = __loopvar__up_rf_write_i + 1'd1 )
      if ( wen[__loopvar__up_rf_write_i] ) begin
        regs[waddr[__loopvar__up_rf_write_i]] <= wdata[__loopvar__up_rf_write_i];
      end
  end

  // Connections
  assign raddr[0] = raddr__0;
  assign rdata__0 = rdata[0];
  assign waddr[0] = waddr__0;
  assign wdata[0] = wdata__0;
  assign wen[0] = wen__0;

endmodule


// PyMTL Component NormalQueueDpathRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module NormalQueueDpathRTL__EntryType_Bits32__num_entries_8
(
  input  logic [0:0]    clk,
  output logic [31:0]   deq_ret,
  input  logic [31:0]   enq_msg,
  input  logic [2:0]    raddr,
  input  logic [0:0]    reset,
  input  logic [2:0]    waddr,
  input  logic [0:0]    wen
);
  // Struct/Array ports of sub-components in the form of wires
  logic [2:0]    queue__raddr [0:0];
  logic [31:0]   queue__rdata [0:0];
  logic [2:0]    queue__waddr [0:0];
  logic [31:0]   queue__wdata [0:0];
  logic [0:0]    queue__wen [0:0];

  // Sub-component declarations
  logic [0:0]    queue__clk;
  logic [2:0]    queue__raddr__0;
  logic [31:0]   queue__rdata__0;
  logic [0:0]    queue__reset;
  logic [2:0]    queue__waddr__0;
  logic [31:0]   queue__wdata__0;
  logic [0:0]    queue__wen__0;

  RegisterFile__3bcda93589bbef3f queue
  (
    .clk            (         queue__clk        ),
    .raddr__0       (      queue__raddr__0      ),
    .rdata__0       (      queue__rdata__0      ),
    .reset          (        queue__reset       ),
    .waddr__0       (      queue__waddr__0      ),
    .wdata__0       (      queue__wdata__0      ),
    .wen__0         (       queue__wen__0       )
  );

  // Connect struct/array ports and their wire forms
  assign queue__raddr__0 = queue__raddr[0];
  assign queue__rdata[0] = queue__rdata__0;
  assign queue__waddr__0 = queue__waddr[0];
  assign queue__wdata__0 = queue__wdata[0];
  assign queue__wen__0 = queue__wen[0];

  // Connections
  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_ret = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component PipeQueueRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module PipeQueueRTL__EntryType_Bits32__num_entries_8
(
  input  logic [0:0]    clk,
  output logic [3:0]    count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [31:0]   deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [31:0]   enq__msg,
  output logic [0:0]    enq__rdy
);
  // Sub-component declarations
  logic [0:0]    ctrl__clk;
  logic [3:0]    ctrl__count;
  logic [0:0]    ctrl__deq_en;
  logic [0:0]    ctrl__deq_rdy;
  logic [0:0]    ctrl__enq_en;
  logic [0:0]    ctrl__enq_rdy;
  logic [2:0]    ctrl__raddr;
  logic [0:0]    ctrl__reset;
  logic [2:0]    ctrl__waddr;
  logic [0:0]    ctrl__wen;

  PipeQueueCtrlRTL__num_entries_8 ctrl
  (
    .clk            (         ctrl__clk         ),
    .count          (        ctrl__count        ),
    .deq_en         (        ctrl__deq_en       ),
    .deq_rdy        (       ctrl__deq_rdy       ),
    .enq_en         (        ctrl__enq_en       ),
    .enq_rdy        (       ctrl__enq_rdy       ),
    .raddr          (        ctrl__raddr        ),
    .reset          (        ctrl__reset        ),
    .waddr          (        ctrl__waddr        ),
    .wen            (         ctrl__wen         )
  );

  logic [0:0]    dpath__clk;
  logic [31:0]   dpath__deq_ret;
  logic [31:0]   dpath__enq_msg;
  logic [2:0]    dpath__raddr;
  logic [0:0]    dpath__reset;
  logic [2:0]    dpath__waddr;
  logic [0:0]    dpath__wen;

  NormalQueueDpathRTL__EntryType_Bits32__num_entries_8 dpath
  (
    .clk            (         dpath__clk        ),
    .deq_ret        (       dpath__deq_ret      ),
    .enq_msg        (       dpath__enq_msg      ),
    .raddr          (        dpath__raddr       ),
    .reset          (        dpath__reset       ),
    .waddr          (        dpath__waddr       ),
    .wen            (         dpath__wen        )
  );

  // Connections
  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_en = enq__en;
  assign enq__rdy = ctrl__enq_rdy;
  assign ctrl__deq_en = deq__en;
  assign deq__rdy = ctrl__deq_rdy;
  assign count = ctrl__count;
  assign dpath__enq_msg = enq__msg;
  assign deq__ret = dpath__deq_ret;

endmodule


// PyMTL Component Mux Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py
module Mux__Type_Bits32__ninputs_2
(
  input  logic [0:0]    clk,
  input  logic [31:0]   in___0,
  input  logic [31:0]   in___1,
  output logic [31:0]   out,
  input  logic [0:0]    reset,
  input  logic [0:0]    sel
);
  // Struct/Array ports in the form of wires
  logic [31:0]   in_ [0:1];

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py:13
  // @update
  // def up_mux():
  //   s.out @= s.in_[ s.sel ]
  
  always_comb begin : up_mux
    out = in_[sel];
  end

  // Connections
  assign in_[0] = in___0;
  assign in_[1] = in___1;

endmodule


// PyMTL Component Reg Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/registers.py
module Reg__Type_Bits32
(
  input  logic [0:0]    clk,
  input  logic [31:0]   in_,
  output logic [31:0]   out,
  input  logic [0:0]    reset
);

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/registers.py:10
  // @update_ff
  // def up_reg():
  //   s.out <<= s.in_
  
  always_ff @(posedge clk) begin : up_reg
    out <= in_;
  end

endmodule


// PyMTL Component RegEnRst Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/registers.py
module RegEnRst__Type_Bits32__reset_value_0
(
  input  logic [0:0]    clk,
  input  logic [0:0]    en,
  input  logic [31:0]   in_,
  output logic [31:0]   out,
  input  logic [0:0]    reset
);

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/registers.py:55
  // @update_ff
  // def up_regenrst():
  //   if s.reset: s.out <<= reset_value
  //   elif s.en:  s.out <<= s.in_
  
  always_ff @(posedge clk) begin : up_regenrst
    if ( reset ) begin
      out <= 32'd0;
    end
    else if ( en ) begin
      out <= in_;
    end
  end

endmodule


// PyMTL Component Sized_memory_sender_in_order Definition
// Full name: Sized_memory_sender_in_order__size_type_Bits32__addr_type_Bits64__item_size_32__mem_request_dest_1__recv_queue_size_8
// At /home/sjq/git/pymtl_project/satacc/utils/mem_oparator.py
module Sized_memory_sender_in_order__f102ad27562d9009
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  input  logic [0:0]    addr_recv__en,
  input  logic [63:0]   addr_recv__msg,
  output logic [0:0]    addr_recv__rdy,
  output logic [0:0]    data_out__en,
  output logic [31:0]   data_out__msg,
  input  logic [0:0]    data_out__rdy,
  input  logic [0:0]    mem_in__en,
  input  logic [80:0]   mem_in__msg,
  output logic [0:0]    mem_in__rdy,
  output logic [0:0]    mem_out__en,
  output logic [152:0]  mem_out__msg,
  input  logic [0:0]    mem_out__rdy,
  input  logic [0:0]    size_recv__en,
  input  logic [31:0]   size_recv__msg,
  output logic [0:0]    size_recv__rdy
);
  // Struct/Array ports of sub-components in the form of wires
  logic [63:0]   addr_data_mux__in_ [0:1];
  logic [0:0]    addr_en_mux__in_ [0:1];
  logic [31:0]   remaining_mux__in_ [0:1];
  logic [31:0]   size_data_mux__in_ [0:1];
  logic [0:0]    size_en_mux__in_ [0:1];

  // Sub-component declarations
  logic [0:0]    addr_data_mux__clk;
  logic [63:0]   addr_data_mux__in___0;
  logic [63:0]   addr_data_mux__in___1;
  logic [63:0]   addr_data_mux__out;
  logic [0:0]    addr_data_mux__reset;
  logic [0:0]    addr_data_mux__sel;

  Mux__Type_Bits64__ninputs_2 addr_data_mux
  (
    .clk            (     addr_data_mux__clk    ),
    .in___0         (   addr_data_mux__in___0   ),
    .in___1         (   addr_data_mux__in___1   ),
    .out            (     addr_data_mux__out    ),
    .reset          (    addr_data_mux__reset   ),
    .sel            (     addr_data_mux__sel    )
  );

  logic [0:0]    addr_en_mux__clk;
  logic [0:0]    addr_en_mux__in___0;
  logic [0:0]    addr_en_mux__in___1;
  logic [0:0]    addr_en_mux__out;
  logic [0:0]    addr_en_mux__reset;
  logic [0:0]    addr_en_mux__sel;

  Mux__Type_Bits1__ninputs_2 addr_en_mux
  (
    .clk            (      addr_en_mux__clk     ),
    .in___0         (    addr_en_mux__in___0    ),
    .in___1         (    addr_en_mux__in___1    ),
    .out            (      addr_en_mux__out     ),
    .reset          (     addr_en_mux__reset    ),
    .sel            (      addr_en_mux__sel     )
  );

  logic [0:0]    addr_reg__clk;
  logic [0:0]    addr_reg__en;
  logic [63:0]   addr_reg__in_;
  logic [63:0]   addr_reg__out;
  logic [0:0]    addr_reg__reset;

  RegEnRst__Type_Bits64__reset_value_0 addr_reg
  (
    .clk            (       addr_reg__clk       ),
    .en             (        addr_reg__en       ),
    .in_            (       addr_reg__in_       ),
    .out            (       addr_reg__out       ),
    .reset          (      addr_reg__reset      )
  );

  logic [0:0]    need_to_push_zero__clk;
  logic [0:0]    need_to_push_zero__in_;
  logic [0:0]    need_to_push_zero__out;
  logic [0:0]    need_to_push_zero__reset;

  Reg__Type_Bits1 need_to_push_zero
  (
    .clk            (   need_to_push_zero__clk  ),
    .in_            (   need_to_push_zero__in_  ),
    .out            (   need_to_push_zero__out  ),
    .reset          (  need_to_push_zero__reset )
  );

  logic [0:0]    recv_queue__clk;
  logic [3:0]    recv_queue__count;
  logic [0:0]    recv_queue__reset;
  logic [0:0]    recv_queue__deq__en;
  logic [0:0]    recv_queue__deq__rdy;
  logic [31:0]   recv_queue__deq__ret;
  logic [0:0]    recv_queue__enq__en;
  logic [31:0]   recv_queue__enq__msg;
  logic [0:0]    recv_queue__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_8 recv_queue
  (
    .clk            (      recv_queue__clk      ),
    .count          (     recv_queue__count     ),
    .reset          (     recv_queue__reset     ),
    .deq__en        (    recv_queue__deq__en    ),
    .deq__rdy       (    recv_queue__deq__rdy   ),
    .deq__ret       (    recv_queue__deq__ret   ),
    .enq__en        (    recv_queue__enq__en    ),
    .enq__msg       (    recv_queue__enq__msg   ),
    .enq__rdy       (    recv_queue__enq__rdy   )
  );

  logic [0:0]    remaining_mux__clk;
  logic [31:0]   remaining_mux__in___0;
  logic [31:0]   remaining_mux__in___1;
  logic [31:0]   remaining_mux__out;
  logic [0:0]    remaining_mux__reset;
  logic [0:0]    remaining_mux__sel;

  Mux__Type_Bits32__ninputs_2 remaining_mux
  (
    .clk            (     remaining_mux__clk    ),
    .in___0         (   remaining_mux__in___0   ),
    .in___1         (   remaining_mux__in___1   ),
    .out            (     remaining_mux__out    ),
    .reset          (    remaining_mux__reset   ),
    .sel            (     remaining_mux__sel    )
  );

  logic [0:0]    remaining_recv_reg__clk;
  logic [31:0]   remaining_recv_reg__in_;
  logic [31:0]   remaining_recv_reg__out;
  logic [0:0]    remaining_recv_reg__reset;

  Reg__Type_Bits32 remaining_recv_reg
  (
    .clk            (  remaining_recv_reg__clk  ),
    .in_            (  remaining_recv_reg__in_  ),
    .out            (  remaining_recv_reg__out  ),
    .reset          ( remaining_recv_reg__reset )
  );

  logic [0:0]    size_data_mux__clk;
  logic [31:0]   size_data_mux__in___0;
  logic [31:0]   size_data_mux__in___1;
  logic [31:0]   size_data_mux__out;
  logic [0:0]    size_data_mux__reset;
  logic [0:0]    size_data_mux__sel;

  Mux__Type_Bits32__ninputs_2 size_data_mux
  (
    .clk            (     size_data_mux__clk    ),
    .in___0         (   size_data_mux__in___0   ),
    .in___1         (   size_data_mux__in___1   ),
    .out            (     size_data_mux__out    ),
    .reset          (    size_data_mux__reset   ),
    .sel            (     size_data_mux__sel    )
  );

  logic [0:0]    size_en_mux__clk;
  logic [0:0]    size_en_mux__in___0;
  logic [0:0]    size_en_mux__in___1;
  logic [0:0]    size_en_mux__out;
  logic [0:0]    size_en_mux__reset;
  logic [0:0]    size_en_mux__sel;

  Mux__Type_Bits1__ninputs_2 size_en_mux
  (
    .clk            (      size_en_mux__clk     ),
    .in___0         (    size_en_mux__in___0    ),
    .in___1         (    size_en_mux__in___1    ),
    .out            (      size_en_mux__out     ),
    .reset          (     size_en_mux__reset    ),
    .sel            (      size_en_mux__sel     )
  );

  logic [0:0]    size_reg__clk;
  logic [0:0]    size_reg__en;
  logic [31:0]   size_reg__in_;
  logic [31:0]   size_reg__out;
  logic [0:0]    size_reg__reset;

  RegEnRst__Type_Bits32__reset_value_0 size_reg
  (
    .clk            (       size_reg__clk       ),
    .en             (        size_reg__en       ),
    .in_            (       size_reg__in_       ),
    .out            (       size_reg__out       ),
    .reset          (      size_reg__reset      )
  );

  // Connect struct/array ports and their wire forms
  assign addr_data_mux__in___0 = addr_data_mux__in_[0];
  assign addr_data_mux__in___1 = addr_data_mux__in_[1];
  assign addr_en_mux__in___0 = addr_en_mux__in_[0];
  assign addr_en_mux__in___1 = addr_en_mux__in_[1];
  assign remaining_mux__in___0 = remaining_mux__in_[0];
  assign remaining_mux__in___1 = remaining_mux__in_[1];
  assign size_data_mux__in___0 = size_data_mux__in_[0];
  assign size_data_mux__in___1 = size_data_mux__in_[1];
  assign size_en_mux__in___0 = size_en_mux__in_[0];
  assign size_en_mux__in___1 = size_en_mux__in_[1];

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/utils/mem_oparator.py:119
  // @update
  // def comb():
  //     if s.need_to_push_zero.out == 0:
  //         s.recv_queue.enq.msg @= s.mem_in.msg[17:49]
  //     else:
  //         s.recv_queue.enq.msg @= 0
  //     if s.need_to_push_zero.out & s.recv_queue.enq.rdy:  # current need, and push it
  //         s.need_to_push_zero.in_ @=0
  //     elif s.remaining_recv_reg.out != 0:  # not need yet
  //         s.need_to_push_zero.in_ @=0
  //     else:  # it's zero, push zero is needed
  //         s.need_to_push_zero.in_@=1
  //     s.recv_queue.deq.en @= s.recv_queue.deq.rdy & s.data_out.rdy
  //     s.data_out.en @= s.recv_queue.deq.rdy & s.data_out.rdy
  // 
  //     s.size_recv.rdy @=(s.size_reg.out != 
  //         0) & (s.remaining_recv_reg.out == 0) & (s.need_to_push_zero.out == 0)
  //     s.addr_recv.rdy @= (s.size_reg.out != 
  //         0) & (s.remaining_recv_reg.out == 0) & (s.need_to_push_zero.out == 0)
  // 
  //     # if the size is zero, listen to outsize sigal, else listen to my self
  //     s.size_en_mux.sel @= 0 if s.size_reg.out == 0 else 1
  //     s.size_data_mux.sel @=0 if s.size_reg.out == 0 else 1
  //     s.remaining_mux.sel @=0 if s.size_reg.out == 0 else 1
  //     # build the request.
  // 
  //     s.mem_out.msg @= concat(Bits4(0),
  //                             Bits8(mem_request_dest), s.addr_reg.out, Bits77(0))
  //     s.size_data_mux.in_[1] @= s.size_data_mux.out - 1
  //     # addr will change every round
  //     s.addr_data_mux.in_[
  //         1]@=s.addr_reg.out + item_size  # addr offset
  // 
  //     s.size_en_mux.in_[
  //         1] @= s.mem_out.rdy & (s.size_reg.out != 0)
  //     s.mem_out.en @=s.mem_out.rdy & (s.size_reg.out != 0)
  //     s.addr_en_mux.in_[1]@=s.mem_out.rdy & (s.size_reg.out != 0)
  //     s.remaining_mux.in_[1]@=s.remaining_mux.out-1 if s.mem_out.rdy & (
  //         s.size_reg.out != 0) else s.remaining_mux.out
  
  always_comb begin : comb
    if ( need_to_push_zero__out == 1'd0 ) begin
      recv_queue__enq__msg = mem_in__msg[7'd48:7'd17];
    end
    else
      recv_queue__enq__msg = 32'd0;
    if ( need_to_push_zero__out & recv_queue__enq__rdy ) begin
      need_to_push_zero__in_ = 1'd0;
    end
    else if ( remaining_recv_reg__out != 32'd0 ) begin
      need_to_push_zero__in_ = 1'd0;
    end
    else
      need_to_push_zero__in_ = 1'd1;
    recv_queue__deq__en = recv_queue__deq__rdy & data_out__rdy;
    data_out__en = recv_queue__deq__rdy & data_out__rdy;
    size_recv__rdy = ( ( size_reg__out != 32'd0 ) & ( remaining_recv_reg__out == 32'd0 ) ) & ( need_to_push_zero__out == 1'd0 );
    addr_recv__rdy = ( ( size_reg__out != 32'd0 ) & ( remaining_recv_reg__out == 32'd0 ) ) & ( need_to_push_zero__out == 1'd0 );
    size_en_mux__sel = ( size_reg__out == 32'd0 ) ? 1'd0 : 1'd1;
    size_data_mux__sel = ( size_reg__out == 32'd0 ) ? 1'd0 : 1'd1;
    remaining_mux__sel = ( size_reg__out == 32'd0 ) ? 1'd0 : 1'd1;
    mem_out__msg = { 4'd0, 8'd1, addr_reg__out, 77'd0 };
    size_data_mux__in_[1'd1] = size_data_mux__out - 32'd1;
    addr_data_mux__in_[1'd1] = addr_reg__out + 64'd32;
    size_en_mux__in_[1'd1] = mem_out__rdy & ( size_reg__out != 32'd0 );
    mem_out__en = mem_out__rdy & ( size_reg__out != 32'd0 );
    addr_en_mux__in_[1'd1] = mem_out__rdy & ( size_reg__out != 32'd0 );
    remaining_mux__in_[1'd1] = ( mem_out__rdy & ( size_reg__out != 32'd0 ) ) ? remaining_mux__out - 32'd1 : remaining_mux__out;
  end

  // Connections
  assign size_reg__clk = clk;
  assign size_reg__reset = reset;
  assign addr_reg__clk = clk;
  assign addr_reg__reset = reset;
  assign remaining_recv_reg__clk = clk;
  assign remaining_recv_reg__reset = reset;
  assign need_to_push_zero__clk = clk;
  assign need_to_push_zero__reset = reset;
  assign recv_queue__clk = clk;
  assign recv_queue__reset = reset;
  assign size_en_mux__clk = clk;
  assign size_en_mux__reset = reset;
  assign size_data_mux__clk = clk;
  assign size_data_mux__reset = reset;
  assign addr_en_mux__clk = clk;
  assign addr_en_mux__reset = reset;
  assign addr_data_mux__clk = clk;
  assign addr_data_mux__reset = reset;
  assign remaining_mux__clk = clk;
  assign remaining_mux__reset = reset;
  assign remaining_recv_reg__in_ = remaining_mux__out;
  assign size_reg__en = size_en_mux__out;
  assign size_reg__in_ = size_data_mux__out;
  assign addr_reg__en = addr_en_mux__out;
  assign addr_reg__in_ = addr_data_mux__out;
  assign data_out__msg = recv_queue__deq__ret;
  assign addr_en_mux__in_[0] = addr_recv__en;
  assign addr_data_mux__in_[0] = addr_recv__msg;
  assign size_en_mux__in_[0] = size_recv__en;
  assign size_data_mux__in_[0] = size_recv__msg;
  assign remaining_mux__in_[0] = size_recv__msg;
  assign mem_in__rdy = recv_queue__enq__rdy;
  assign recv_queue__enq__en = mem_in__en;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_Bits34__nregs_8__rd_ports_1__wr_ports_1__const_zero_False
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py
module RegisterFile__c0eb6c320b7970cc
(
  input  logic [0:0]    clk,
  input  logic [2:0]    raddr__0,
  output logic [33:0]   rdata__0,
  input  logic [0:0]    reset,
  input  logic [2:0]    waddr__0,
  input  logic [33:0]   wdata__0,
  input  logic [0:0]    wen__0
);
  // Struct/Array ports in the form of wires
  logic [2:0]    raddr [0:0];
  logic [33:0]   rdata [0:0];
  logic [2:0]    waddr [0:0];
  logic [33:0]   wdata [0:0];
  logic [0:0]    wen [0:0];

  // Wire declarations
  logic [33:0]   regs [0:7];

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  integer __loopvar__up_rf_read_i;
  
  always_comb begin : up_rf_read
    for ( __loopvar__up_rf_read_i = 1'd0; __loopvar__up_rf_read_i < 1'd1; __loopvar__up_rf_read_i = __loopvar__up_rf_read_i + 1'd1 )
      rdata[__loopvar__up_rf_read_i] = regs[raddr[__loopvar__up_rf_read_i]];
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  integer __loopvar__up_rf_write_i;
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( __loopvar__up_rf_write_i = 1'd0; __loopvar__up_rf_write_i < 1'd1; __loopvar__up_rf_write_i = __loopvar__up_rf_write_i + 1'd1 )
      if ( wen[__loopvar__up_rf_write_i] ) begin
        regs[waddr[__loopvar__up_rf_write_i]] <= wdata[__loopvar__up_rf_write_i];
      end
  end

  // Connections
  assign raddr[0] = raddr__0;
  assign rdata__0 = rdata[0];
  assign waddr[0] = waddr__0;
  assign wdata[0] = wdata__0;
  assign wen[0] = wen__0;

endmodule


// PyMTL Component NormalQueueDpathRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module NormalQueueDpathRTL__EntryType_Bits34__num_entries_8
(
  input  logic [0:0]    clk,
  output logic [33:0]   deq_ret,
  input  logic [33:0]   enq_msg,
  input  logic [2:0]    raddr,
  input  logic [0:0]    reset,
  input  logic [2:0]    waddr,
  input  logic [0:0]    wen
);
  // Struct/Array ports of sub-components in the form of wires
  logic [2:0]    queue__raddr [0:0];
  logic [33:0]   queue__rdata [0:0];
  logic [2:0]    queue__waddr [0:0];
  logic [33:0]   queue__wdata [0:0];
  logic [0:0]    queue__wen [0:0];

  // Sub-component declarations
  logic [0:0]    queue__clk;
  logic [2:0]    queue__raddr__0;
  logic [33:0]   queue__rdata__0;
  logic [0:0]    queue__reset;
  logic [2:0]    queue__waddr__0;
  logic [33:0]   queue__wdata__0;
  logic [0:0]    queue__wen__0;

  RegisterFile__c0eb6c320b7970cc queue
  (
    .clk            (         queue__clk        ),
    .raddr__0       (      queue__raddr__0      ),
    .rdata__0       (      queue__rdata__0      ),
    .reset          (        queue__reset       ),
    .waddr__0       (      queue__waddr__0      ),
    .wdata__0       (      queue__wdata__0      ),
    .wen__0         (       queue__wen__0       )
  );

  // Connect struct/array ports and their wire forms
  assign queue__raddr__0 = queue__raddr[0];
  assign queue__rdata[0] = queue__rdata__0;
  assign queue__waddr__0 = queue__waddr[0];
  assign queue__wdata__0 = queue__wdata[0];
  assign queue__wen__0 = queue__wen[0];

  // Connections
  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_ret = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component PipeQueueRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module PipeQueueRTL__EntryType_Bits34__num_entries_8
(
  input  logic [0:0]    clk,
  output logic [3:0]    count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [33:0]   deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [33:0]   enq__msg,
  output logic [0:0]    enq__rdy
);
  // Sub-component declarations
  logic [0:0]    ctrl__clk;
  logic [3:0]    ctrl__count;
  logic [0:0]    ctrl__deq_en;
  logic [0:0]    ctrl__deq_rdy;
  logic [0:0]    ctrl__enq_en;
  logic [0:0]    ctrl__enq_rdy;
  logic [2:0]    ctrl__raddr;
  logic [0:0]    ctrl__reset;
  logic [2:0]    ctrl__waddr;
  logic [0:0]    ctrl__wen;

  PipeQueueCtrlRTL__num_entries_8 ctrl
  (
    .clk            (         ctrl__clk         ),
    .count          (        ctrl__count        ),
    .deq_en         (        ctrl__deq_en       ),
    .deq_rdy        (       ctrl__deq_rdy       ),
    .enq_en         (        ctrl__enq_en       ),
    .enq_rdy        (       ctrl__enq_rdy       ),
    .raddr          (        ctrl__raddr        ),
    .reset          (        ctrl__reset        ),
    .waddr          (        ctrl__waddr        ),
    .wen            (         ctrl__wen         )
  );

  logic [0:0]    dpath__clk;
  logic [33:0]   dpath__deq_ret;
  logic [33:0]   dpath__enq_msg;
  logic [2:0]    dpath__raddr;
  logic [0:0]    dpath__reset;
  logic [2:0]    dpath__waddr;
  logic [0:0]    dpath__wen;

  NormalQueueDpathRTL__EntryType_Bits34__num_entries_8 dpath
  (
    .clk            (         dpath__clk        ),
    .deq_ret        (       dpath__deq_ret      ),
    .enq_msg        (       dpath__enq_msg      ),
    .raddr          (        dpath__raddr       ),
    .reset          (        dpath__reset       ),
    .waddr          (        dpath__waddr       ),
    .wen            (         dpath__wen        )
  );

  // Connections
  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_en = enq__en;
  assign enq__rdy = ctrl__enq_rdy;
  assign ctrl__deq_en = deq__en;
  assign deq__rdy = ctrl__deq_rdy;
  assign count = ctrl__count;
  assign dpath__enq_msg = enq__msg;
  assign deq__ret = dpath__deq_ret;

endmodule


// PyMTL Component Give_to_send Definition
// At /home/sjq/git/pymtl_project/satacc/utils/give_to_send.py
module Give_to_send__data_type_Bits32
(
  input  logic [0:0]    clk,
  output logic [0:0]    give_en,
  input  logic [0:0]    give_rdy,
  input  logic [31:0]   give_ret,
  input  logic [0:0]    reset,
  output logic [0:0]    send__en,
  output logic [31:0]   send__msg,
  input  logic [0:0]    send__rdy
);

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/utils/give_to_send.py:16
  // @update
  // def comb():
  //     s.send.en@=s.send.rdy & s.give_rdy
  //     s.give_en@=s.send.rdy & s.give_rdy
  //     s.send.msg@=s.give_ret
  
  always_comb begin : comb
    send__en = send__rdy & give_rdy;
    give_en = send__rdy & give_rdy;
    send__msg = give_ret;
  end

endmodule


// PyMTL Component PipeQueueCtrlRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module PipeQueueCtrlRTL__num_entries_2
(
  input  logic [0:0]    clk,
  output logic [1:0]    count,
  input  logic [0:0]    deq_en,
  output logic [0:0]    deq_rdy,
  input  logic [0:0]    enq_en,
  output logic [0:0]    enq_rdy,
  output logic [0:0]    raddr,
  input  logic [0:0]    reset,
  output logic [0:0]    waddr,
  output logic [0:0]    wen
);
  // Wire declarations
  logic [0:0]    deq_xfer;
  logic [0:0]    enq_xfer;
  logic [0:0]    head;
  logic [0:0]    tail;

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:202
  // s.deq_rdy //= lambda: ~s.reset & ( s.count > CountType(0) )
  
  always_comb begin : _lambda__s_clauses_0__clause_process_fsm_generated_queue_ctrl_deq_rdy
    deq_rdy = ( ~reset ) & ( count > 2'd0 );
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:206
  // s.deq_xfer //= lambda: s.deq_en & s.deq_rdy
  
  always_comb begin : _lambda__s_clauses_0__clause_process_fsm_generated_queue_ctrl_deq_xfer
    deq_xfer = deq_en & deq_rdy;
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:203
  // s.enq_rdy //= lambda: ~s.reset & ( ( s.count < s.num_entries ) | s.deq_en )
  
  always_comb begin : _lambda__s_clauses_0__clause_process_fsm_generated_queue_ctrl_enq_rdy
    enq_rdy = ( ~reset ) & ( ( count < 2'd2 ) | deq_en );
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:205
  // s.enq_xfer //= lambda: s.enq_en & s.enq_rdy
  
  always_comb begin : _lambda__s_clauses_0__clause_process_fsm_generated_queue_ctrl_enq_xfer
    enq_xfer = enq_en & enq_rdy;
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:208
  // @update_ff
  // def up_reg():
  // 
  //   if s.reset:
  //     s.head  <<= PtrType(0)
  //     s.tail  <<= PtrType(0)
  //     s.count <<= CountType(0)
  // 
  //   else:
  //     if s.deq_xfer:
  //       s.head <<= s.head + PtrType(1) if s.head < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer:
  //       s.tail <<= s.tail + PtrType(1) if s.tail < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer & ~s.deq_xfer:
  //       s.count <<= s.count + CountType(1)
  //     if ~s.enq_xfer & s.deq_xfer:
  //       s.count <<= s.count - CountType(1)
  
  always_ff @(posedge clk) begin : up_reg
    if ( reset ) begin
      head <= 1'd0;
      tail <= 1'd0;
      count <= 2'd0;
    end
    else begin
      if ( deq_xfer ) begin
        head <= ( head < 1'd1 ) ? head + 1'd1 : 1'd0;
      end
      if ( enq_xfer ) begin
        tail <= ( tail < 1'd1 ) ? tail + 1'd1 : 1'd0;
      end
      if ( enq_xfer & ( ~deq_xfer ) ) begin
        count <= count + 2'd1;
      end
      if ( ( ~enq_xfer ) & deq_xfer ) begin
        count <= count - 2'd1;
      end
    end
  end

  // Connections
  assign wen = enq_xfer;
  assign waddr = tail;
  assign raddr = head;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_Bits32__nregs_2__rd_ports_1__wr_ports_1__const_zero_False
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py
module RegisterFile__3a42a011005ae1af
(
  input  logic [0:0]    clk,
  input  logic [0:0]    raddr__0,
  output logic [31:0]   rdata__0,
  input  logic [0:0]    reset,
  input  logic [0:0]    waddr__0,
  input  logic [31:0]   wdata__0,
  input  logic [0:0]    wen__0
);
  // Struct/Array ports in the form of wires
  logic [0:0]    raddr [0:0];
  logic [31:0]   rdata [0:0];
  logic [0:0]    waddr [0:0];
  logic [31:0]   wdata [0:0];
  logic [0:0]    wen [0:0];

  // Wire declarations
  logic [31:0]   regs [0:1];

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  integer __loopvar__up_rf_read_i;
  
  always_comb begin : up_rf_read
    for ( __loopvar__up_rf_read_i = 1'd0; __loopvar__up_rf_read_i < 1'd1; __loopvar__up_rf_read_i = __loopvar__up_rf_read_i + 1'd1 )
      rdata[__loopvar__up_rf_read_i] = regs[raddr[__loopvar__up_rf_read_i]];
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  integer __loopvar__up_rf_write_i;
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( __loopvar__up_rf_write_i = 1'd0; __loopvar__up_rf_write_i < 1'd1; __loopvar__up_rf_write_i = __loopvar__up_rf_write_i + 1'd1 )
      if ( wen[__loopvar__up_rf_write_i] ) begin
        regs[waddr[__loopvar__up_rf_write_i]] <= wdata[__loopvar__up_rf_write_i];
      end
  end

  // Connections
  assign raddr[0] = raddr__0;
  assign rdata__0 = rdata[0];
  assign waddr[0] = waddr__0;
  assign wdata[0] = wdata__0;
  assign wen[0] = wen__0;

endmodule


// PyMTL Component NormalQueueDpathRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module NormalQueueDpathRTL__EntryType_Bits32__num_entries_2
(
  input  logic [0:0]    clk,
  output logic [31:0]   deq_ret,
  input  logic [31:0]   enq_msg,
  input  logic [0:0]    raddr,
  input  logic [0:0]    reset,
  input  logic [0:0]    waddr,
  input  logic [0:0]    wen
);
  // Struct/Array ports of sub-components in the form of wires
  logic [0:0]    queue__raddr [0:0];
  logic [31:0]   queue__rdata [0:0];
  logic [0:0]    queue__waddr [0:0];
  logic [31:0]   queue__wdata [0:0];
  logic [0:0]    queue__wen [0:0];

  // Sub-component declarations
  logic [0:0]    queue__clk;
  logic [0:0]    queue__raddr__0;
  logic [31:0]   queue__rdata__0;
  logic [0:0]    queue__reset;
  logic [0:0]    queue__waddr__0;
  logic [31:0]   queue__wdata__0;
  logic [0:0]    queue__wen__0;

  RegisterFile__3a42a011005ae1af queue
  (
    .clk            (         queue__clk        ),
    .raddr__0       (      queue__raddr__0      ),
    .rdata__0       (      queue__rdata__0      ),
    .reset          (        queue__reset       ),
    .waddr__0       (      queue__waddr__0      ),
    .wdata__0       (      queue__wdata__0      ),
    .wen__0         (       queue__wen__0       )
  );

  // Connect struct/array ports and their wire forms
  assign queue__raddr__0 = queue__raddr[0];
  assign queue__rdata[0] = queue__rdata__0;
  assign queue__waddr__0 = queue__waddr[0];
  assign queue__wdata__0 = queue__wdata[0];
  assign queue__wen__0 = queue__wen[0];

  // Connections
  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_ret = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component PipeQueueRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module PipeQueueRTL__EntryType_Bits32__num_entries_2
(
  input  logic [0:0]    clk,
  output logic [1:0]    count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [31:0]   deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [31:0]   enq__msg,
  output logic [0:0]    enq__rdy
);
  // Sub-component declarations
  logic [0:0]    ctrl__clk;
  logic [1:0]    ctrl__count;
  logic [0:0]    ctrl__deq_en;
  logic [0:0]    ctrl__deq_rdy;
  logic [0:0]    ctrl__enq_en;
  logic [0:0]    ctrl__enq_rdy;
  logic [0:0]    ctrl__raddr;
  logic [0:0]    ctrl__reset;
  logic [0:0]    ctrl__waddr;
  logic [0:0]    ctrl__wen;

  PipeQueueCtrlRTL__num_entries_2 ctrl
  (
    .clk            (         ctrl__clk         ),
    .count          (        ctrl__count        ),
    .deq_en         (        ctrl__deq_en       ),
    .deq_rdy        (       ctrl__deq_rdy       ),
    .enq_en         (        ctrl__enq_en       ),
    .enq_rdy        (       ctrl__enq_rdy       ),
    .raddr          (        ctrl__raddr        ),
    .reset          (        ctrl__reset        ),
    .waddr          (        ctrl__waddr        ),
    .wen            (         ctrl__wen         )
  );

  logic [0:0]    dpath__clk;
  logic [31:0]   dpath__deq_ret;
  logic [31:0]   dpath__enq_msg;
  logic [0:0]    dpath__raddr;
  logic [0:0]    dpath__reset;
  logic [0:0]    dpath__waddr;
  logic [0:0]    dpath__wen;

  NormalQueueDpathRTL__EntryType_Bits32__num_entries_2 dpath
  (
    .clk            (         dpath__clk        ),
    .deq_ret        (       dpath__deq_ret      ),
    .enq_msg        (       dpath__enq_msg      ),
    .raddr          (        dpath__raddr       ),
    .reset          (        dpath__reset       ),
    .waddr          (        dpath__waddr       ),
    .wen            (         dpath__wen        )
  );

  // Connections
  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_en = enq__en;
  assign enq__rdy = ctrl__enq_rdy;
  assign ctrl__deq_en = deq__en;
  assign deq__rdy = ctrl__deq_rdy;
  assign count = ctrl__count;
  assign dpath__enq_msg = enq__msg;
  assign deq__ret = dpath__deq_ret;

endmodule


// PyMTL Component RegEnRst Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/registers.py
module RegEnRst__Type_Bits2__reset_value_0
(
  input  logic [0:0]    clk,
  input  logic [0:0]    en,
  input  logic [1:0]    in_,
  output logic [1:0]    out,
  input  logic [0:0]    reset
);

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/registers.py:55
  // @update_ff
  // def up_regenrst():
  //   if s.reset: s.out <<= reset_value
  //   elif s.en:  s.out <<= s.in_
  
  always_ff @(posedge clk) begin : up_regenrst
    if ( reset ) begin
      out <= 2'd0;
    end
    else if ( en ) begin
      out <= in_;
    end
  end

endmodule


// PyMTL Component Clause_fsm Definition
// At /home/sjq/git/pymtl_project/satacc/clause/clause_controller.py
module Clause_fsm_noparam
(
  input  logic [0:0]    clk,
  output logic [0:0]    conflict,
  input  logic [0:0]    reset,
  output logic [0:0]    generated_send__en,
  output logic [31:0]   generated_send__msg,
  input  logic [0:0]    generated_send__rdy,
  input  logic [0:0]    value_recv__en,
  input  logic [33:0]   value_recv__msg,
  output logic [0:0]    value_recv__rdy
);
  // Sub-component declarations
  logic [0:0]    generate_adpter__clk;
  logic [0:0]    generate_adpter__give_en;
  logic [0:0]    generate_adpter__give_rdy;
  logic [31:0]   generate_adpter__give_ret;
  logic [0:0]    generate_adpter__reset;
  logic [0:0]    generate_adpter__send__en;
  logic [31:0]   generate_adpter__send__msg;
  logic [0:0]    generate_adpter__send__rdy;

  Give_to_send__data_type_Bits32 generate_adpter
  (
    .clk            (    generate_adpter__clk   ),
    .give_en        (  generate_adpter__give_en ),
    .give_rdy       ( generate_adpter__give_rdy ),
    .give_ret       ( generate_adpter__give_ret ),
    .reset          (   generate_adpter__reset  ),
    .send__en       ( generate_adpter__send__en ),
    .send__msg      ( generate_adpter__send__msg ),
    .send__rdy      ( generate_adpter__send__rdy )
  );

  logic [0:0]    generated_queue__clk;
  logic [1:0]    generated_queue__count;
  logic [0:0]    generated_queue__reset;
  logic [0:0]    generated_queue__deq__en;
  logic [0:0]    generated_queue__deq__rdy;
  logic [31:0]   generated_queue__deq__ret;
  logic [0:0]    generated_queue__enq__en;
  logic [31:0]   generated_queue__enq__msg;
  logic [0:0]    generated_queue__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_2 generated_queue
  (
    .clk            (    generated_queue__clk   ),
    .count          (   generated_queue__count  ),
    .reset          (   generated_queue__reset  ),
    .deq__en        (  generated_queue__deq__en ),
    .deq__rdy       ( generated_queue__deq__rdy ),
    .deq__ret       ( generated_queue__deq__ret ),
    .enq__en        (  generated_queue__enq__en ),
    .enq__msg       ( generated_queue__enq__msg ),
    .enq__rdy       ( generated_queue__enq__rdy )
  );

  logic [0:0]    status__clk;
  logic [0:0]    status__en;
  logic [1:0]    status__in_;
  logic [1:0]    status__out;
  logic [0:0]    status__reset;

  RegEnRst__Type_Bits2__reset_value_0 status
  (
    .clk            (        status__clk        ),
    .en             (         status__en        ),
    .in_            (        status__in_        ),
    .out            (        status__out        ),
    .reset          (       status__reset       )
  );

  logic [0:0]    unit_lit__clk;
  logic [0:0]    unit_lit__en;
  logic [31:0]   unit_lit__in_;
  logic [31:0]   unit_lit__out;
  logic [0:0]    unit_lit__reset;

  RegEnRst__Type_Bits32__reset_value_0 unit_lit
  (
    .clk            (       unit_lit__clk       ),
    .en             (        unit_lit__en       ),
    .in_            (       unit_lit__in_       ),
    .out            (       unit_lit__out       ),
    .reset          (      unit_lit__reset      )
  );

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/clause/clause_controller.py:30
  // @update
  // def comb():
  //     s.generated_queue.enq.msg @= s.unit_lit.out
  //     # the control logic
  //     s.status.en@=s.generated_queue.enq.rdy | s.value_recv.en
  //     s.unit_lit.en@=s.generated_queue.enq.rdy | s.value_recv.en
  //     s.value_recv.rdy@= s.generated_queue.enq.rdy
  //     s.conflict@=(s.value_recv.msg[0:32] == 0) & (s.status.out == 0) & (
  //         s.generated_queue.enq.rdy == 1) & (s.value_recv.en == 1)
  // 
  //     # the status change logic
  //     # s.unit_lit.in_@=s.unit_lit.out
  // 
  //     s.generated_queue.enq.en @= (s.generated_queue.enq.rdy == 1) & (
  //         s.value_recv.en == 1) & (s.status.out == 1) & (s.value_recv.msg[0:32] == 0)
  //     # the end of a string , no need to read the value
  // 
  //     if s.value_recv.msg[0:32] != 0:
  //         if s.status.out == 0:  # start all flase
  //             if s.value_recv.msg[32:34] == 0:  # undefined
  //                 s.status.in_@=1
  //                 s.unit_lit.in_@=s.value_recv.msg[0:32]
  //             elif s.value_recv.msg[32:34] == 1:  # true
  //                 s.status.in_@=3
  //                 s.unit_lit.in_@=s.unit_lit.out
  //             else:  # false
  //                 s.unit_lit.in_@=s.unit_lit.out
  //                 s.status.in_@=0
  //         elif s.status.out == 1:  # have one undefined and no true
  //             if s.value_recv.msg[32:34] == 0:  # undefined
  //                 s.unit_lit.in_@=s.unit_lit.out
  //                 s.status.in_@=2
  //             elif s.value_recv.msg[32:34] == 1:  # true
  //                 s.unit_lit.in_@=s.unit_lit.out
  //                 s.status.in_@=3
  //             else:  # false
  //                 s.unit_lit.in_@=s.unit_lit.out
  //                 s.status.in_@=1
  //         elif s.status.out == 2:  # have two or more undefined and no true
  //             if s.value_recv.msg[32:34] == 0:  # undefined
  //                 s.unit_lit.in_@=s.unit_lit.out
  //                 s.status.in_@=2
  //             elif s.value_recv.msg[32:34] == 1:  # true
  //                 s.unit_lit.in_@=s.unit_lit.out
  //                 s.status.in_@=3
  //             else:  # false
  //                 s.unit_lit.in_@=s.unit_lit.out
  //                 s.status.in_@=2
  //         else:  # have one true
  //             if s.value_recv.msg[32:34] == 0:  # undefined
  //                 s.unit_lit.in_@=s.unit_lit.out
  //                 s.status.in_@=3
  //             elif s.value_recv.msg[32:34] == 1:  # true
  //                 s.unit_lit.in_@=s.unit_lit.out
  //                 s.status.in_@=3
  //             else:  # false
  //                 s.unit_lit.in_@=s.unit_lit.out
  //                 s.status.in_@=3
  //     else:
  //         s.status.in_@=0
  //         s.unit_lit.in_@=s.unit_lit.out
  
  always_comb begin : comb
    generated_queue__enq__msg = unit_lit__out;
    status__en = generated_queue__enq__rdy | value_recv__en;
    unit_lit__en = generated_queue__enq__rdy | value_recv__en;
    value_recv__rdy = generated_queue__enq__rdy;
    conflict = ( ( ( value_recv__msg[6'd31:6'd0] == 32'd0 ) & ( status__out == 2'd0 ) ) & ( generated_queue__enq__rdy == 1'd1 ) ) & ( value_recv__en == 1'd1 );
    generated_queue__enq__en = ( ( ( generated_queue__enq__rdy == 1'd1 ) & ( value_recv__en == 1'd1 ) ) & ( status__out == 2'd1 ) ) & ( value_recv__msg[6'd31:6'd0] == 32'd0 );
    if ( value_recv__msg[6'd31:6'd0] != 32'd0 ) begin
      if ( status__out == 2'd0 ) begin
        if ( value_recv__msg[6'd33:6'd32] == 2'd0 ) begin
          status__in_ = 2'd1;
          unit_lit__in_ = value_recv__msg[6'd31:6'd0];
        end
        else if ( value_recv__msg[6'd33:6'd32] == 2'd1 ) begin
          status__in_ = 2'd3;
          unit_lit__in_ = unit_lit__out;
        end
        else begin
          unit_lit__in_ = unit_lit__out;
          status__in_ = 2'd0;
        end
      end
      else if ( status__out == 2'd1 ) begin
        if ( value_recv__msg[6'd33:6'd32] == 2'd0 ) begin
          unit_lit__in_ = unit_lit__out;
          status__in_ = 2'd2;
        end
        else if ( value_recv__msg[6'd33:6'd32] == 2'd1 ) begin
          unit_lit__in_ = unit_lit__out;
          status__in_ = 2'd3;
        end
        else begin
          unit_lit__in_ = unit_lit__out;
          status__in_ = 2'd1;
        end
      end
      else if ( status__out == 2'd2 ) begin
        if ( value_recv__msg[6'd33:6'd32] == 2'd0 ) begin
          unit_lit__in_ = unit_lit__out;
          status__in_ = 2'd2;
        end
        else if ( value_recv__msg[6'd33:6'd32] == 2'd1 ) begin
          unit_lit__in_ = unit_lit__out;
          status__in_ = 2'd3;
        end
        else begin
          unit_lit__in_ = unit_lit__out;
          status__in_ = 2'd2;
        end
      end
      else if ( value_recv__msg[6'd33:6'd32] == 2'd0 ) begin
        unit_lit__in_ = unit_lit__out;
        status__in_ = 2'd3;
      end
      else if ( value_recv__msg[6'd33:6'd32] == 2'd1 ) begin
        unit_lit__in_ = unit_lit__out;
        status__in_ = 2'd3;
      end
      else begin
        unit_lit__in_ = unit_lit__out;
        status__in_ = 2'd3;
      end
    end
    else begin
      status__in_ = 2'd0;
      unit_lit__in_ = unit_lit__out;
    end
  end

  // Connections
  assign status__clk = clk;
  assign status__reset = reset;
  assign unit_lit__clk = clk;
  assign unit_lit__reset = reset;
  assign generated_queue__clk = clk;
  assign generated_queue__reset = reset;
  assign generate_adpter__clk = clk;
  assign generate_adpter__reset = reset;
  assign generated_queue__deq__en = generate_adpter__give_en;
  assign generate_adpter__give_rdy = generated_queue__deq__rdy;
  assign generate_adpter__give_ret = generated_queue__deq__ret;
  assign generated_send__en = generate_adpter__send__en;
  assign generated_send__msg = generate_adpter__send__msg;
  assign generate_adpter__send__rdy = generated_send__rdy;

endmodule


// PyMTL Component BypassQueueCtrlRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module BypassQueueCtrlRTL__num_entries_4
(
  input  logic [0:0]    clk,
  output logic [2:0]    count,
  input  logic [0:0]    deq_en,
  output logic [0:0]    deq_rdy,
  input  logic [0:0]    enq_en,
  output logic [0:0]    enq_rdy,
  output logic [0:0]    mux_sel,
  output logic [1:0]    raddr,
  input  logic [0:0]    reset,
  output logic [1:0]    waddr,
  output logic [0:0]    wen
);
  // Wire declarations
  logic [0:0]    deq_xfer;
  logic [0:0]    enq_xfer;
  logic [1:0]    head;
  logic [1:0]    tail;

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:351
  // s.deq_rdy //= lambda: ~s.reset & ( (s.count > CountType(0) ) | s.enq_en )
  
  always_comb begin : _lambda__s_clauses_0__cr_q_ctrl_deq_rdy
    deq_rdy = ( ~reset ) & ( ( count > 3'd0 ) | enq_en );
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:356
  // s.deq_xfer //= lambda: s.deq_en & s.deq_rdy
  
  always_comb begin : _lambda__s_clauses_0__cr_q_ctrl_deq_xfer
    deq_xfer = deq_en & deq_rdy;
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:350
  // s.enq_rdy //= lambda: ~s.reset & ( s.count < s.num_entries )
  
  always_comb begin : _lambda__s_clauses_0__cr_q_ctrl_enq_rdy
    enq_rdy = ( ~reset ) & ( count < 3'd4 );
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:355
  // s.enq_xfer //= lambda: s.enq_en & s.enq_rdy
  
  always_comb begin : _lambda__s_clauses_0__cr_q_ctrl_enq_xfer
    enq_xfer = enq_en & enq_rdy;
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:353
  // s.mux_sel //= lambda: s.count == CountType(0)
  
  always_comb begin : _lambda__s_clauses_0__cr_q_ctrl_mux_sel
    mux_sel = count == 3'd0;
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:358
  // @update_ff
  // def up_reg():
  // 
  //   if s.reset:
  //     s.head  <<= PtrType(0)
  //     s.tail  <<= PtrType(0)
  //     s.count <<= CountType(0)
  // 
  //   else:
  //     if s.deq_xfer:
  //       s.head <<= s.head + PtrType(1) if s.head < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer:
  //       s.tail <<= s.tail + PtrType(1) if s.tail < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer & ~s.deq_xfer:
  //       s.count <<= s.count + CountType(1)
  //     if ~s.enq_xfer & s.deq_xfer:
  //       s.count <<= s.count - CountType(1)
  
  always_ff @(posedge clk) begin : up_reg
    if ( reset ) begin
      head <= 2'd0;
      tail <= 2'd0;
      count <= 3'd0;
    end
    else begin
      if ( deq_xfer ) begin
        head <= ( head < 2'd3 ) ? head + 2'd1 : 2'd0;
      end
      if ( enq_xfer ) begin
        tail <= ( tail < 2'd3 ) ? tail + 2'd1 : 2'd0;
      end
      if ( enq_xfer & ( ~deq_xfer ) ) begin
        count <= count + 3'd1;
      end
      if ( ( ~enq_xfer ) & deq_xfer ) begin
        count <= count - 3'd1;
      end
    end
  end

  // Connections
  assign wen = enq_xfer;
  assign waddr = tail;
  assign raddr = head;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_Bits32__nregs_4__rd_ports_1__wr_ports_1__const_zero_False
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py
module RegisterFile__1714b9df89e3c838
(
  input  logic [0:0]    clk,
  input  logic [1:0]    raddr__0,
  output logic [31:0]   rdata__0,
  input  logic [0:0]    reset,
  input  logic [1:0]    waddr__0,
  input  logic [31:0]   wdata__0,
  input  logic [0:0]    wen__0
);
  // Struct/Array ports in the form of wires
  logic [1:0]    raddr [0:0];
  logic [31:0]   rdata [0:0];
  logic [1:0]    waddr [0:0];
  logic [31:0]   wdata [0:0];
  logic [0:0]    wen [0:0];

  // Wire declarations
  logic [31:0]   regs [0:3];

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  integer __loopvar__up_rf_read_i;
  
  always_comb begin : up_rf_read
    for ( __loopvar__up_rf_read_i = 1'd0; __loopvar__up_rf_read_i < 1'd1; __loopvar__up_rf_read_i = __loopvar__up_rf_read_i + 1'd1 )
      rdata[__loopvar__up_rf_read_i] = regs[raddr[__loopvar__up_rf_read_i]];
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  integer __loopvar__up_rf_write_i;
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( __loopvar__up_rf_write_i = 1'd0; __loopvar__up_rf_write_i < 1'd1; __loopvar__up_rf_write_i = __loopvar__up_rf_write_i + 1'd1 )
      if ( wen[__loopvar__up_rf_write_i] ) begin
        regs[waddr[__loopvar__up_rf_write_i]] <= wdata[__loopvar__up_rf_write_i];
      end
  end

  // Connections
  assign raddr[0] = raddr__0;
  assign rdata__0 = rdata[0];
  assign waddr[0] = waddr__0;
  assign wdata[0] = wdata__0;
  assign wen[0] = wen__0;

endmodule


// PyMTL Component BypassQueueDpathRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module BypassQueueDpathRTL__EntryType_Bits32__num_entries_4
(
  input  logic [0:0]    clk,
  output logic [31:0]   deq_ret,
  input  logic [31:0]   enq_msg,
  input  logic [0:0]    mux_sel,
  input  logic [1:0]    raddr,
  input  logic [0:0]    reset,
  input  logic [1:0]    waddr,
  input  logic [0:0]    wen
);
  // Struct/Array ports of sub-components in the form of wires
  logic [31:0]   mux__in_ [0:1];
  logic [1:0]    queue__raddr [0:0];
  logic [31:0]   queue__rdata [0:0];
  logic [1:0]    queue__waddr [0:0];
  logic [31:0]   queue__wdata [0:0];
  logic [0:0]    queue__wen [0:0];

  // Sub-component declarations
  logic [0:0]    mux__clk;
  logic [31:0]   mux__in___0;
  logic [31:0]   mux__in___1;
  logic [31:0]   mux__out;
  logic [0:0]    mux__reset;
  logic [0:0]    mux__sel;

  Mux__Type_Bits32__ninputs_2 mux
  (
    .clk            (          mux__clk         ),
    .in___0         (        mux__in___0        ),
    .in___1         (        mux__in___1        ),
    .out            (          mux__out         ),
    .reset          (         mux__reset        ),
    .sel            (          mux__sel         )
  );

  logic [0:0]    queue__clk;
  logic [1:0]    queue__raddr__0;
  logic [31:0]   queue__rdata__0;
  logic [0:0]    queue__reset;
  logic [1:0]    queue__waddr__0;
  logic [31:0]   queue__wdata__0;
  logic [0:0]    queue__wen__0;

  RegisterFile__1714b9df89e3c838 queue
  (
    .clk            (         queue__clk        ),
    .raddr__0       (      queue__raddr__0      ),
    .rdata__0       (      queue__rdata__0      ),
    .reset          (        queue__reset       ),
    .waddr__0       (      queue__waddr__0      ),
    .wdata__0       (      queue__wdata__0      ),
    .wen__0         (       queue__wen__0       )
  );

  // Connect struct/array ports and their wire forms
  assign mux__in___0 = mux__in_[0];
  assign mux__in___1 = mux__in_[1];
  assign queue__raddr__0 = queue__raddr[0];
  assign queue__rdata[0] = queue__rdata__0;
  assign queue__waddr__0 = queue__waddr[0];
  assign queue__wdata__0 = queue__wdata[0];
  assign queue__wen__0 = queue__wen[0];

  // Connections
  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;
  assign mux__clk = clk;
  assign mux__reset = reset;
  assign mux__sel = mux_sel;
  assign mux__in_[0] = queue__rdata[0];
  assign mux__in_[1] = enq_msg;
  assign deq_ret = mux__out;

endmodule


// PyMTL Component BypassQueueRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module BypassQueueRTL__EntryType_Bits32__num_entries_4
(
  input  logic [0:0]    clk,
  output logic [2:0]    count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [31:0]   deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [31:0]   enq__msg,
  output logic [0:0]    enq__rdy
);
  // Sub-component declarations
  logic [0:0]    ctrl__clk;
  logic [2:0]    ctrl__count;
  logic [0:0]    ctrl__deq_en;
  logic [0:0]    ctrl__deq_rdy;
  logic [0:0]    ctrl__enq_en;
  logic [0:0]    ctrl__enq_rdy;
  logic [0:0]    ctrl__mux_sel;
  logic [1:0]    ctrl__raddr;
  logic [0:0]    ctrl__reset;
  logic [1:0]    ctrl__waddr;
  logic [0:0]    ctrl__wen;

  BypassQueueCtrlRTL__num_entries_4 ctrl
  (
    .clk            (         ctrl__clk         ),
    .count          (        ctrl__count        ),
    .deq_en         (        ctrl__deq_en       ),
    .deq_rdy        (       ctrl__deq_rdy       ),
    .enq_en         (        ctrl__enq_en       ),
    .enq_rdy        (       ctrl__enq_rdy       ),
    .mux_sel        (       ctrl__mux_sel       ),
    .raddr          (        ctrl__raddr        ),
    .reset          (        ctrl__reset        ),
    .waddr          (        ctrl__waddr        ),
    .wen            (         ctrl__wen         )
  );

  logic [0:0]    dpath__clk;
  logic [31:0]   dpath__deq_ret;
  logic [31:0]   dpath__enq_msg;
  logic [0:0]    dpath__mux_sel;
  logic [1:0]    dpath__raddr;
  logic [0:0]    dpath__reset;
  logic [1:0]    dpath__waddr;
  logic [0:0]    dpath__wen;

  BypassQueueDpathRTL__EntryType_Bits32__num_entries_4 dpath
  (
    .clk            (         dpath__clk        ),
    .deq_ret        (       dpath__deq_ret      ),
    .enq_msg        (       dpath__enq_msg      ),
    .mux_sel        (       dpath__mux_sel      ),
    .raddr          (        dpath__raddr       ),
    .reset          (        dpath__reset       ),
    .waddr          (        dpath__waddr       ),
    .wen            (         dpath__wen        )
  );

  // Connections
  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign dpath__mux_sel = ctrl__mux_sel;
  assign ctrl__enq_en = enq__en;
  assign enq__rdy = ctrl__enq_rdy;
  assign ctrl__deq_en = deq__en;
  assign deq__rdy = ctrl__deq_rdy;
  assign count = ctrl__count;
  assign dpath__enq_msg = enq__msg;
  assign deq__ret = dpath__deq_ret;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_Bits96__nregs_8__rd_ports_1__wr_ports_1__const_zero_False
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py
module RegisterFile__1a7593584d840851
(
  input  logic [0:0]    clk,
  input  logic [2:0]    raddr__0,
  output logic [95:0]   rdata__0,
  input  logic [0:0]    reset,
  input  logic [2:0]    waddr__0,
  input  logic [95:0]   wdata__0,
  input  logic [0:0]    wen__0
);
  // Struct/Array ports in the form of wires
  logic [2:0]    raddr [0:0];
  logic [95:0]   rdata [0:0];
  logic [2:0]    waddr [0:0];
  logic [95:0]   wdata [0:0];
  logic [0:0]    wen [0:0];

  // Wire declarations
  logic [95:0]   regs [0:7];

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  integer __loopvar__up_rf_read_i;
  
  always_comb begin : up_rf_read
    for ( __loopvar__up_rf_read_i = 1'd0; __loopvar__up_rf_read_i < 1'd1; __loopvar__up_rf_read_i = __loopvar__up_rf_read_i + 1'd1 )
      rdata[__loopvar__up_rf_read_i] = regs[raddr[__loopvar__up_rf_read_i]];
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  integer __loopvar__up_rf_write_i;
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( __loopvar__up_rf_write_i = 1'd0; __loopvar__up_rf_write_i < 1'd1; __loopvar__up_rf_write_i = __loopvar__up_rf_write_i + 1'd1 )
      if ( wen[__loopvar__up_rf_write_i] ) begin
        regs[waddr[__loopvar__up_rf_write_i]] <= wdata[__loopvar__up_rf_write_i];
      end
  end

  // Connections
  assign raddr[0] = raddr__0;
  assign rdata__0 = rdata[0];
  assign waddr[0] = waddr__0;
  assign wdata[0] = wdata__0;
  assign wen[0] = wen__0;

endmodule


// PyMTL Component NormalQueueDpathRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module NormalQueueDpathRTL__EntryType_Bits96__num_entries_8
(
  input  logic [0:0]    clk,
  output logic [95:0]   deq_ret,
  input  logic [95:0]   enq_msg,
  input  logic [2:0]    raddr,
  input  logic [0:0]    reset,
  input  logic [2:0]    waddr,
  input  logic [0:0]    wen
);
  // Struct/Array ports of sub-components in the form of wires
  logic [2:0]    queue__raddr [0:0];
  logic [95:0]   queue__rdata [0:0];
  logic [2:0]    queue__waddr [0:0];
  logic [95:0]   queue__wdata [0:0];
  logic [0:0]    queue__wen [0:0];

  // Sub-component declarations
  logic [0:0]    queue__clk;
  logic [2:0]    queue__raddr__0;
  logic [95:0]   queue__rdata__0;
  logic [0:0]    queue__reset;
  logic [2:0]    queue__waddr__0;
  logic [95:0]   queue__wdata__0;
  logic [0:0]    queue__wen__0;

  RegisterFile__1a7593584d840851 queue
  (
    .clk            (         queue__clk        ),
    .raddr__0       (      queue__raddr__0      ),
    .rdata__0       (      queue__rdata__0      ),
    .reset          (        queue__reset       ),
    .waddr__0       (      queue__waddr__0      ),
    .wdata__0       (      queue__wdata__0      ),
    .wen__0         (       queue__wen__0       )
  );

  // Connect struct/array ports and their wire forms
  assign queue__raddr__0 = queue__raddr[0];
  assign queue__rdata[0] = queue__rdata__0;
  assign queue__waddr__0 = queue__waddr[0];
  assign queue__wdata__0 = queue__wdata[0];
  assign queue__wen__0 = queue__wen[0];

  // Connections
  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_ret = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component PipeQueueRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module PipeQueueRTL__EntryType_Bits96__num_entries_8
(
  input  logic [0:0]    clk,
  output logic [3:0]    count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [95:0]   deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [95:0]   enq__msg,
  output logic [0:0]    enq__rdy
);
  // Sub-component declarations
  logic [0:0]    ctrl__clk;
  logic [3:0]    ctrl__count;
  logic [0:0]    ctrl__deq_en;
  logic [0:0]    ctrl__deq_rdy;
  logic [0:0]    ctrl__enq_en;
  logic [0:0]    ctrl__enq_rdy;
  logic [2:0]    ctrl__raddr;
  logic [0:0]    ctrl__reset;
  logic [2:0]    ctrl__waddr;
  logic [0:0]    ctrl__wen;

  PipeQueueCtrlRTL__num_entries_8 ctrl
  (
    .clk            (         ctrl__clk         ),
    .count          (        ctrl__count        ),
    .deq_en         (        ctrl__deq_en       ),
    .deq_rdy        (       ctrl__deq_rdy       ),
    .enq_en         (        ctrl__enq_en       ),
    .enq_rdy        (       ctrl__enq_rdy       ),
    .raddr          (        ctrl__raddr        ),
    .reset          (        ctrl__reset        ),
    .waddr          (        ctrl__waddr        ),
    .wen            (         ctrl__wen         )
  );

  logic [0:0]    dpath__clk;
  logic [95:0]   dpath__deq_ret;
  logic [95:0]   dpath__enq_msg;
  logic [2:0]    dpath__raddr;
  logic [0:0]    dpath__reset;
  logic [2:0]    dpath__waddr;
  logic [0:0]    dpath__wen;

  NormalQueueDpathRTL__EntryType_Bits96__num_entries_8 dpath
  (
    .clk            (         dpath__clk        ),
    .deq_ret        (       dpath__deq_ret      ),
    .enq_msg        (       dpath__enq_msg      ),
    .raddr          (        dpath__raddr       ),
    .reset          (        dpath__reset       ),
    .waddr          (        dpath__waddr       ),
    .wen            (         dpath__wen        )
  );

  // Connections
  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_en = enq__en;
  assign enq__rdy = ctrl__enq_rdy;
  assign ctrl__deq_en = deq__en;
  assign deq__rdy = ctrl__deq_rdy;
  assign count = ctrl__count;
  assign dpath__enq_msg = enq__msg;
  assign deq__ret = dpath__deq_ret;

endmodule


// PyMTL Component BypassQueue1EntryRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module BypassQueue1EntryRTL__EntryType_Bits64
(
  input  logic [0:0]    clk,
  output logic [0:0]    count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [63:0]   deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [63:0]   enq__msg,
  output logic [0:0]    enq__rdy
);
  // Wire declarations
  logic [63:0]   entry;
  logic [0:0]    full;

  // Struct/Array ports of sub-components in the form of wires
  logic [63:0]   bypass_mux__in_ [0:1];

  // Sub-component declarations
  logic [0:0]    bypass_mux__clk;
  logic [63:0]   bypass_mux__in___0;
  logic [63:0]   bypass_mux__in___1;
  logic [63:0]   bypass_mux__out;
  logic [0:0]    bypass_mux__reset;
  logic [0:0]    bypass_mux__sel;

  Mux__Type_Bits64__ninputs_2 bypass_mux
  (
    .clk            (      bypass_mux__clk      ),
    .in___0         (     bypass_mux__in___0    ),
    .in___1         (     bypass_mux__in___1    ),
    .out            (      bypass_mux__out      ),
    .reset          (     bypass_mux__reset     ),
    .sel            (      bypass_mux__sel      )
  );

  // Connect struct/array ports and their wire forms
  assign bypass_mux__in___0 = bypass_mux__in_[0];
  assign bypass_mux__in___1 = bypass_mux__in_[1];

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:532
  // s.deq.rdy //= lambda: ~s.reset & ( s.full | s.enq.en )
  
  always_comb begin : _lambda__s_clauses_0__temp_cr_addr_q_deq_rdy
    deq__rdy = ( ~reset ) & ( full | enq__en );
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:531
  // s.enq.rdy //= lambda: ~s.reset & ~s.full
  
  always_comb begin : _lambda__s_clauses_0__temp_cr_addr_q_enq_rdy
    enq__rdy = ( ~reset ) & ( ~full );
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:534
  // @update_ff
  // def ff_bypass1():
  //   s.full <<= ~s.reset & ( ~s.deq.en & (s.enq.en | s.full) )
  // 
  //   if s.enq.en & ~s.deq.en:
  //     s.entry <<= s.enq.msg
  
  always_ff @(posedge clk) begin : ff_bypass1
    full <= ( ~reset ) & ( ( ~deq__en ) & ( enq__en | full ) );
    if ( enq__en & ( ~deq__en ) ) begin
      entry <= enq__msg;
    end
  end

  // Connections
  assign bypass_mux__clk = clk;
  assign bypass_mux__reset = reset;
  assign bypass_mux__in_[0] = enq__msg;
  assign bypass_mux__in_[1] = entry;
  assign deq__ret = bypass_mux__out;
  assign bypass_mux__sel = full;
  assign count = full;

endmodule


// PyMTL Component BypassQueueRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module BypassQueueRTL__EntryType_Bits64__num_entries_1
(
  input  logic [0:0]    clk,
  output logic [0:0]    count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [63:0]   deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [63:0]   enq__msg,
  output logic [0:0]    enq__rdy
);
  // Sub-component declarations
  logic [0:0]    q__clk;
  logic [0:0]    q__count;
  logic [0:0]    q__reset;
  logic [0:0]    q__deq__en;
  logic [0:0]    q__deq__rdy;
  logic [63:0]   q__deq__ret;
  logic [0:0]    q__enq__en;
  logic [63:0]   q__enq__msg;
  logic [0:0]    q__enq__rdy;

  BypassQueue1EntryRTL__EntryType_Bits64 q
  (
    .clk            (           q__clk          ),
    .count          (          q__count         ),
    .reset          (          q__reset         ),
    .deq__en        (         q__deq__en        ),
    .deq__rdy       (        q__deq__rdy        ),
    .deq__ret       (        q__deq__ret        ),
    .enq__en        (         q__enq__en        ),
    .enq__msg       (        q__enq__msg        ),
    .enq__rdy       (        q__enq__rdy        )
  );

  // Connections
  assign q__clk = clk;
  assign q__reset = reset;
  assign q__enq__en = enq__en;
  assign q__enq__msg = enq__msg;
  assign enq__rdy = q__enq__rdy;
  assign q__deq__en = deq__en;
  assign deq__rdy = q__deq__rdy;
  assign deq__ret = q__deq__ret;
  assign count = q__count;

endmodule


// PyMTL Component BypassQueue1EntryRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module BypassQueue1EntryRTL__EntryType_Bits32
(
  input  logic [0:0]    clk,
  output logic [0:0]    count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [31:0]   deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [31:0]   enq__msg,
  output logic [0:0]    enq__rdy
);
  // Wire declarations
  logic [31:0]   entry;
  logic [0:0]    full;

  // Struct/Array ports of sub-components in the form of wires
  logic [31:0]   bypass_mux__in_ [0:1];

  // Sub-component declarations
  logic [0:0]    bypass_mux__clk;
  logic [31:0]   bypass_mux__in___0;
  logic [31:0]   bypass_mux__in___1;
  logic [31:0]   bypass_mux__out;
  logic [0:0]    bypass_mux__reset;
  logic [0:0]    bypass_mux__sel;

  Mux__Type_Bits32__ninputs_2 bypass_mux
  (
    .clk            (      bypass_mux__clk      ),
    .in___0         (     bypass_mux__in___0    ),
    .in___1         (     bypass_mux__in___1    ),
    .out            (      bypass_mux__out      ),
    .reset          (     bypass_mux__reset     ),
    .sel            (      bypass_mux__sel      )
  );

  // Connect struct/array ports and their wire forms
  assign bypass_mux__in___0 = bypass_mux__in_[0];
  assign bypass_mux__in___1 = bypass_mux__in_[1];

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:532
  // s.deq.rdy //= lambda: ~s.reset & ( s.full | s.enq.en )
  
  always_comb begin : _lambda__s_clauses_0__temp_cr_size_q_deq_rdy
    deq__rdy = ( ~reset ) & ( full | enq__en );
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:531
  // s.enq.rdy //= lambda: ~s.reset & ~s.full
  
  always_comb begin : _lambda__s_clauses_0__temp_cr_size_q_enq_rdy
    enq__rdy = ( ~reset ) & ( ~full );
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:534
  // @update_ff
  // def ff_bypass1():
  //   s.full <<= ~s.reset & ( ~s.deq.en & (s.enq.en | s.full) )
  // 
  //   if s.enq.en & ~s.deq.en:
  //     s.entry <<= s.enq.msg
  
  always_ff @(posedge clk) begin : ff_bypass1
    full <= ( ~reset ) & ( ( ~deq__en ) & ( enq__en | full ) );
    if ( enq__en & ( ~deq__en ) ) begin
      entry <= enq__msg;
    end
  end

  // Connections
  assign bypass_mux__clk = clk;
  assign bypass_mux__reset = reset;
  assign bypass_mux__in_[0] = enq__msg;
  assign bypass_mux__in_[1] = entry;
  assign deq__ret = bypass_mux__out;
  assign bypass_mux__sel = full;
  assign count = full;

endmodule


// PyMTL Component BypassQueueRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module BypassQueueRTL__EntryType_Bits32__num_entries_1
(
  input  logic [0:0]    clk,
  output logic [0:0]    count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [31:0]   deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [31:0]   enq__msg,
  output logic [0:0]    enq__rdy
);
  // Sub-component declarations
  logic [0:0]    q__clk;
  logic [0:0]    q__count;
  logic [0:0]    q__reset;
  logic [0:0]    q__deq__en;
  logic [0:0]    q__deq__rdy;
  logic [31:0]   q__deq__ret;
  logic [0:0]    q__enq__en;
  logic [31:0]   q__enq__msg;
  logic [0:0]    q__enq__rdy;

  BypassQueue1EntryRTL__EntryType_Bits32 q
  (
    .clk            (           q__clk          ),
    .count          (          q__count         ),
    .reset          (          q__reset         ),
    .deq__en        (         q__deq__en        ),
    .deq__rdy       (        q__deq__rdy        ),
    .deq__ret       (        q__deq__ret        ),
    .enq__en        (         q__enq__en        ),
    .enq__msg       (        q__enq__msg        ),
    .enq__rdy       (        q__enq__rdy        )
  );

  // Connections
  assign q__clk = clk;
  assign q__reset = reset;
  assign q__enq__en = enq__en;
  assign q__enq__msg = enq__msg;
  assign enq__rdy = q__enq__rdy;
  assign q__deq__en = deq__en;
  assign deq__rdy = q__deq__rdy;
  assign deq__ret = q__deq__ret;
  assign count = q__count;

endmodule


// PyMTL Component Mux Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py
module Mux__Type_Bits2__ninputs_2
(
  input  logic [0:0]    clk,
  input  logic [1:0]    in___0,
  input  logic [1:0]    in___1,
  output logic [1:0]    out,
  input  logic [0:0]    reset,
  input  logic [0:0]    sel
);
  // Struct/Array ports in the form of wires
  logic [1:0]    in_ [0:1];

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py:13
  // @update
  // def up_mux():
  //   s.out @= s.in_[ s.sel ]
  
  always_comb begin : up_mux
    out = in_[sel];
  end

  // Connections
  assign in_[0] = in___0;
  assign in_[1] = in___1;

endmodule


// PyMTL Component BypassQueue1EntryRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module BypassQueue1EntryRTL__EntryType_Bits2
(
  input  logic [0:0]    clk,
  output logic [0:0]    count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [1:0]    deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [1:0]    enq__msg,
  output logic [0:0]    enq__rdy
);
  // Wire declarations
  logic [1:0]    entry;
  logic [0:0]    full;

  // Struct/Array ports of sub-components in the form of wires
  logic [1:0]    bypass_mux__in_ [0:1];

  // Sub-component declarations
  logic [0:0]    bypass_mux__clk;
  logic [1:0]    bypass_mux__in___0;
  logic [1:0]    bypass_mux__in___1;
  logic [1:0]    bypass_mux__out;
  logic [0:0]    bypass_mux__reset;
  logic [0:0]    bypass_mux__sel;

  Mux__Type_Bits2__ninputs_2 bypass_mux
  (
    .clk            (      bypass_mux__clk      ),
    .in___0         (     bypass_mux__in___0    ),
    .in___1         (     bypass_mux__in___1    ),
    .out            (      bypass_mux__out      ),
    .reset          (     bypass_mux__reset     ),
    .sel            (      bypass_mux__sel      )
  );

  // Connect struct/array ports and their wire forms
  assign bypass_mux__in___0 = bypass_mux__in_[0];
  assign bypass_mux__in___1 = bypass_mux__in_[1];

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:532
  // s.deq.rdy //= lambda: ~s.reset & ( s.full | s.enq.en )
  
  always_comb begin : _lambda__s_clauses_0__temp_value_q_deq_rdy
    deq__rdy = ( ~reset ) & ( full | enq__en );
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:531
  // s.enq.rdy //= lambda: ~s.reset & ~s.full
  
  always_comb begin : _lambda__s_clauses_0__temp_value_q_enq_rdy
    enq__rdy = ( ~reset ) & ( ~full );
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:534
  // @update_ff
  // def ff_bypass1():
  //   s.full <<= ~s.reset & ( ~s.deq.en & (s.enq.en | s.full) )
  // 
  //   if s.enq.en & ~s.deq.en:
  //     s.entry <<= s.enq.msg
  
  always_ff @(posedge clk) begin : ff_bypass1
    full <= ( ~reset ) & ( ( ~deq__en ) & ( enq__en | full ) );
    if ( enq__en & ( ~deq__en ) ) begin
      entry <= enq__msg;
    end
  end

  // Connections
  assign bypass_mux__clk = clk;
  assign bypass_mux__reset = reset;
  assign bypass_mux__in_[0] = enq__msg;
  assign bypass_mux__in_[1] = entry;
  assign deq__ret = bypass_mux__out;
  assign bypass_mux__sel = full;
  assign count = full;

endmodule


// PyMTL Component BypassQueueRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module BypassQueueRTL__EntryType_Bits2__num_entries_1
(
  input  logic [0:0]    clk,
  output logic [0:0]    count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [1:0]    deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [1:0]    enq__msg,
  output logic [0:0]    enq__rdy
);
  // Sub-component declarations
  logic [0:0]    q__clk;
  logic [0:0]    q__count;
  logic [0:0]    q__reset;
  logic [0:0]    q__deq__en;
  logic [0:0]    q__deq__rdy;
  logic [1:0]    q__deq__ret;
  logic [0:0]    q__enq__en;
  logic [1:0]    q__enq__msg;
  logic [0:0]    q__enq__rdy;

  BypassQueue1EntryRTL__EntryType_Bits2 q
  (
    .clk            (           q__clk          ),
    .count          (          q__count         ),
    .reset          (          q__reset         ),
    .deq__en        (         q__deq__en        ),
    .deq__rdy       (        q__deq__rdy        ),
    .deq__ret       (        q__deq__ret        ),
    .enq__en        (         q__enq__en        ),
    .enq__msg       (        q__enq__msg        ),
    .enq__rdy       (        q__enq__rdy        )
  );

  // Connections
  assign q__clk = clk;
  assign q__reset = reset;
  assign q__enq__en = enq__en;
  assign q__enq__msg = enq__msg;
  assign enq__rdy = q__enq__rdy;
  assign q__deq__en = deq__en;
  assign deq__rdy = q__deq__rdy;
  assign deq__ret = q__deq__ret;
  assign count = q__count;

endmodule


// PyMTL Component Clause Definition
// At /home/sjq/git/pymtl_project/satacc/clause/clause.py
module Clause__index_0
(
  input  logic [0:0]    clk,
  output logic [0:0]    conf,
  input  logic [0:0]    reset,
  input  logic [0:0]    cr_recv__en,
  input  logic [31:0]   cr_recv__msg,
  output logic [0:0]    cr_recv__rdy,
  input  logic [0:0]    fetcher_mem_in__en,
  input  logic [80:0]   fetcher_mem_in__msg,
  output logic [0:0]    fetcher_mem_in__rdy,
  output logic [0:0]    fetcher_mem_out__en,
  output logic [152:0]  fetcher_mem_out__msg,
  input  logic [0:0]    fetcher_mem_out__rdy,
  input  logic [0:0]    size_mem_recv__en,
  input  logic [47:0]   size_mem_recv__msg,
  output logic [0:0]    size_mem_recv__rdy,
  output logic [0:0]    size_mem_send__en,
  output logic [109:0]  size_mem_send__msg,
  input  logic [0:0]    size_mem_send__rdy,
  output logic [0:0]    to_trail__en,
  output logic [31:0]   to_trail__msg,
  input  logic [0:0]    to_trail__rdy,
  input  logic [0:0]    value_mem_recv__en,
  input  logic [16:0]   value_mem_recv__msg,
  output logic [0:0]    value_mem_recv__rdy,
  output logic [0:0]    value_mem_send__en,
  output logic [78:0]   value_mem_send__msg,
  input  logic [0:0]    value_mem_send__rdy
);
  // Sub-component declarations
  logic [0:0]    clause_fetcher__clk;
  logic [0:0]    clause_fetcher__reset;
  logic [0:0]    clause_fetcher__addr_recv__en;
  logic [63:0]   clause_fetcher__addr_recv__msg;
  logic [0:0]    clause_fetcher__addr_recv__rdy;
  logic [0:0]    clause_fetcher__data_out__en;
  logic [31:0]   clause_fetcher__data_out__msg;
  logic [0:0]    clause_fetcher__data_out__rdy;
  logic [0:0]    clause_fetcher__mem_in__en;
  logic [80:0]   clause_fetcher__mem_in__msg;
  logic [0:0]    clause_fetcher__mem_in__rdy;
  logic [0:0]    clause_fetcher__mem_out__en;
  logic [152:0]  clause_fetcher__mem_out__msg;
  logic [0:0]    clause_fetcher__mem_out__rdy;
  logic [0:0]    clause_fetcher__size_recv__en;
  logic [31:0]   clause_fetcher__size_recv__msg;
  logic [0:0]    clause_fetcher__size_recv__rdy;

  Sized_memory_sender_in_order__f102ad27562d9009 clause_fetcher
  (
    .clk            (    clause_fetcher__clk    ),
    .reset          (   clause_fetcher__reset   ),
    .addr_recv__en  ( clause_fetcher__addr_recv__en ),
    .addr_recv__msg ( clause_fetcher__addr_recv__msg ),
    .addr_recv__rdy ( clause_fetcher__addr_recv__rdy ),
    .data_out__en   ( clause_fetcher__data_out__en ),
    .data_out__msg  ( clause_fetcher__data_out__msg ),
    .data_out__rdy  ( clause_fetcher__data_out__rdy ),
    .mem_in__en     ( clause_fetcher__mem_in__en ),
    .mem_in__msg    ( clause_fetcher__mem_in__msg ),
    .mem_in__rdy    ( clause_fetcher__mem_in__rdy ),
    .mem_out__en    ( clause_fetcher__mem_out__en ),
    .mem_out__msg   ( clause_fetcher__mem_out__msg ),
    .mem_out__rdy   ( clause_fetcher__mem_out__rdy ),
    .size_recv__en  ( clause_fetcher__size_recv__en ),
    .size_recv__msg ( clause_fetcher__size_recv__msg ),
    .size_recv__rdy ( clause_fetcher__size_recv__rdy )
  );

  logic [0:0]    clause_lit_queue__clk;
  logic [3:0]    clause_lit_queue__count;
  logic [0:0]    clause_lit_queue__reset;
  logic [0:0]    clause_lit_queue__deq__en;
  logic [0:0]    clause_lit_queue__deq__rdy;
  logic [31:0]   clause_lit_queue__deq__ret;
  logic [0:0]    clause_lit_queue__enq__en;
  logic [31:0]   clause_lit_queue__enq__msg;
  logic [0:0]    clause_lit_queue__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_8 clause_lit_queue
  (
    .clk            (   clause_lit_queue__clk   ),
    .count          (  clause_lit_queue__count  ),
    .reset          (  clause_lit_queue__reset  ),
    .deq__en        ( clause_lit_queue__deq__en ),
    .deq__rdy       ( clause_lit_queue__deq__rdy ),
    .deq__ret       ( clause_lit_queue__deq__ret ),
    .enq__en        ( clause_lit_queue__enq__en ),
    .enq__msg       ( clause_lit_queue__enq__msg ),
    .enq__rdy       ( clause_lit_queue__enq__rdy )
  );

  logic [0:0]    clause_lit_with_value__clk;
  logic [3:0]    clause_lit_with_value__count;
  logic [0:0]    clause_lit_with_value__reset;
  logic [0:0]    clause_lit_with_value__deq__en;
  logic [0:0]    clause_lit_with_value__deq__rdy;
  logic [33:0]   clause_lit_with_value__deq__ret;
  logic [0:0]    clause_lit_with_value__enq__en;
  logic [33:0]   clause_lit_with_value__enq__msg;
  logic [0:0]    clause_lit_with_value__enq__rdy;

  PipeQueueRTL__EntryType_Bits34__num_entries_8 clause_lit_with_value
  (
    .clk            ( clause_lit_with_value__clk ),
    .count          ( clause_lit_with_value__count ),
    .reset          ( clause_lit_with_value__reset ),
    .deq__en        ( clause_lit_with_value__deq__en ),
    .deq__rdy       ( clause_lit_with_value__deq__rdy ),
    .deq__ret       ( clause_lit_with_value__deq__ret ),
    .enq__en        ( clause_lit_with_value__enq__en ),
    .enq__msg       ( clause_lit_with_value__enq__msg ),
    .enq__rdy       ( clause_lit_with_value__enq__rdy )
  );

  logic [0:0]    clause_process_fsm__clk;
  logic [0:0]    clause_process_fsm__conflict;
  logic [0:0]    clause_process_fsm__reset;
  logic [0:0]    clause_process_fsm__generated_send__en;
  logic [31:0]   clause_process_fsm__generated_send__msg;
  logic [0:0]    clause_process_fsm__generated_send__rdy;
  logic [0:0]    clause_process_fsm__value_recv__en;
  logic [33:0]   clause_process_fsm__value_recv__msg;
  logic [0:0]    clause_process_fsm__value_recv__rdy;

  Clause_fsm_noparam clause_process_fsm
  (
    .clk            (  clause_process_fsm__clk  ),
    .conflict       ( clause_process_fsm__conflict ),
    .reset          ( clause_process_fsm__reset ),
    .generated_send__en( clause_process_fsm__generated_send__en ),
    .generated_send__msg( clause_process_fsm__generated_send__msg ),
    .generated_send__rdy( clause_process_fsm__generated_send__rdy ),
    .value_recv__en ( clause_process_fsm__value_recv__en ),
    .value_recv__msg( clause_process_fsm__value_recv__msg ),
    .value_recv__rdy( clause_process_fsm__value_recv__rdy )
  );

  logic [0:0]    cr_q__clk;
  logic [2:0]    cr_q__count;
  logic [0:0]    cr_q__reset;
  logic [0:0]    cr_q__deq__en;
  logic [0:0]    cr_q__deq__rdy;
  logic [31:0]   cr_q__deq__ret;
  logic [0:0]    cr_q__enq__en;
  logic [31:0]   cr_q__enq__msg;
  logic [0:0]    cr_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_4 cr_q
  (
    .clk            (         cr_q__clk         ),
    .count          (        cr_q__count        ),
    .reset          (        cr_q__reset        ),
    .deq__en        (       cr_q__deq__en       ),
    .deq__rdy       (       cr_q__deq__rdy      ),
    .deq__ret       (       cr_q__deq__ret      ),
    .enq__en        (       cr_q__enq__en       ),
    .enq__msg       (       cr_q__enq__msg      ),
    .enq__rdy       (       cr_q__enq__rdy      )
  );

  logic [0:0]    size_addr_q__clk;
  logic [3:0]    size_addr_q__count;
  logic [0:0]    size_addr_q__reset;
  logic [0:0]    size_addr_q__deq__en;
  logic [0:0]    size_addr_q__deq__rdy;
  logic [95:0]   size_addr_q__deq__ret;
  logic [0:0]    size_addr_q__enq__en;
  logic [95:0]   size_addr_q__enq__msg;
  logic [0:0]    size_addr_q__enq__rdy;

  PipeQueueRTL__EntryType_Bits96__num_entries_8 size_addr_q
  (
    .clk            (      size_addr_q__clk     ),
    .count          (     size_addr_q__count    ),
    .reset          (     size_addr_q__reset    ),
    .deq__en        (    size_addr_q__deq__en   ),
    .deq__rdy       (   size_addr_q__deq__rdy   ),
    .deq__ret       (   size_addr_q__deq__ret   ),
    .enq__en        (    size_addr_q__enq__en   ),
    .enq__msg       (   size_addr_q__enq__msg   ),
    .enq__rdy       (   size_addr_q__enq__rdy   )
  );

  logic [0:0]    temp_cr_addr__clk;
  logic [0:0]    temp_cr_addr__count;
  logic [0:0]    temp_cr_addr__reset;
  logic [0:0]    temp_cr_addr__deq__en;
  logic [0:0]    temp_cr_addr__deq__rdy;
  logic [63:0]   temp_cr_addr__deq__ret;
  logic [0:0]    temp_cr_addr__enq__en;
  logic [63:0]   temp_cr_addr__enq__msg;
  logic [0:0]    temp_cr_addr__enq__rdy;

  BypassQueueRTL__EntryType_Bits64__num_entries_1 temp_cr_addr
  (
    .clk            (     temp_cr_addr__clk     ),
    .count          (    temp_cr_addr__count    ),
    .reset          (    temp_cr_addr__reset    ),
    .deq__en        (   temp_cr_addr__deq__en   ),
    .deq__rdy       (   temp_cr_addr__deq__rdy  ),
    .deq__ret       (   temp_cr_addr__deq__ret  ),
    .enq__en        (   temp_cr_addr__enq__en   ),
    .enq__msg       (   temp_cr_addr__enq__msg  ),
    .enq__rdy       (   temp_cr_addr__enq__rdy  )
  );

  logic [0:0]    temp_cr_size__clk;
  logic [0:0]    temp_cr_size__count;
  logic [0:0]    temp_cr_size__reset;
  logic [0:0]    temp_cr_size__deq__en;
  logic [0:0]    temp_cr_size__deq__rdy;
  logic [31:0]   temp_cr_size__deq__ret;
  logic [0:0]    temp_cr_size__enq__en;
  logic [31:0]   temp_cr_size__enq__msg;
  logic [0:0]    temp_cr_size__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_cr_size
  (
    .clk            (     temp_cr_size__clk     ),
    .count          (    temp_cr_size__count    ),
    .reset          (    temp_cr_size__reset    ),
    .deq__en        (   temp_cr_size__deq__en   ),
    .deq__rdy       (   temp_cr_size__deq__rdy  ),
    .deq__ret       (   temp_cr_size__deq__ret  ),
    .enq__en        (   temp_cr_size__enq__en   ),
    .enq__msg       (   temp_cr_size__enq__msg  ),
    .enq__rdy       (   temp_cr_size__enq__rdy  )
  );

  logic [0:0]    temp_lit__clk;
  logic [0:0]    temp_lit__count;
  logic [0:0]    temp_lit__reset;
  logic [0:0]    temp_lit__deq__en;
  logic [0:0]    temp_lit__deq__rdy;
  logic [31:0]   temp_lit__deq__ret;
  logic [0:0]    temp_lit__enq__en;
  logic [31:0]   temp_lit__enq__msg;
  logic [0:0]    temp_lit__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_lit
  (
    .clk            (       temp_lit__clk       ),
    .count          (      temp_lit__count      ),
    .reset          (      temp_lit__reset      ),
    .deq__en        (     temp_lit__deq__en     ),
    .deq__rdy       (     temp_lit__deq__rdy    ),
    .deq__ret       (     temp_lit__deq__ret    ),
    .enq__en        (     temp_lit__enq__en     ),
    .enq__msg       (     temp_lit__enq__msg    ),
    .enq__rdy       (     temp_lit__enq__rdy    )
  );

  logic [0:0]    temp_value__clk;
  logic [0:0]    temp_value__count;
  logic [0:0]    temp_value__reset;
  logic [0:0]    temp_value__deq__en;
  logic [0:0]    temp_value__deq__rdy;
  logic [1:0]    temp_value__deq__ret;
  logic [0:0]    temp_value__enq__en;
  logic [1:0]    temp_value__enq__msg;
  logic [0:0]    temp_value__enq__rdy;

  BypassQueueRTL__EntryType_Bits2__num_entries_1 temp_value
  (
    .clk            (      temp_value__clk      ),
    .count          (     temp_value__count     ),
    .reset          (     temp_value__reset     ),
    .deq__en        (    temp_value__deq__en    ),
    .deq__rdy       (    temp_value__deq__rdy   ),
    .deq__ret       (    temp_value__deq__ret   ),
    .enq__en        (    temp_value__enq__en    ),
    .enq__msg       (    temp_value__enq__msg   ),
    .enq__rdy       (    temp_value__enq__rdy   )
  );

  // Temporary wire definitions
  logic [109:0]  __tmpvar__comb_msg;

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/clause/clause.py:64
  //   @update
  //   def comb():
  //       s.value_mem_recv.rdy@=s.temp_value.enq.rdy
  //       s.size_mem_send.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       s.cr_q.deq.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       s.temp_cr_size.enq.en@=s.temp_cr_addr.enq.rdy & s.size_mem_recv.en
  //       s.size_mem_recv.rdy@=s.temp_cr_size.enq.rdy
  //       s.temp_cr_addr.enq.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       msg = Bits110()
  // 
  //       s.size_mem_send.msg@=msg
  //       s.temp_cr_size.enq.msg@=s.size_mem_recv.msg[48-32:48]
  //       # TODO: the real addr can be calculated immediately
  //       s.temp_cr_addr.enq.msg@=concat(Bits32(0), s.cr_q.deq.ret)
  // 
  //       s.size_addr_q.enq.en@=s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.temp_cr_size.deq.en@= s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.temp_cr_addr.deq.en@= s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.size_addr_q.enq.msg@=concat(s.temp_cr_size.deq.ret,
  //                                     s.temp_cr_addr.deq.ret)
  //       s.clause_fetcher.size_recv.en@=s.clause_fetcher.size_recv.rdy & s.size_addr_q.deq.rdy
  //       s.clause_fetcher.addr_recv.en@=s.clause_fetcher.addr_recv.rdy & s.size_addr_q.deq.rdy
  //       s.size_addr_q.deq.en@=s.clause_fetcher.size_recv.rdy & s.clause_fetcher.addr_recv.rdy & s.size_addr_q.deq.rdy
  //       s.clause_fetcher.size_recv.msg@=s.size_addr_q.deq.ret[0:32]
  //       s.clause_fetcher.addr_recv.msg@=s.size_addr_q.deq.ret[32:96]
  //       #
  //       s.value_mem_send.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  //       s.clause_lit_queue.deq.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  //       s.temp_value.enq.en@=s.temp_lit.enq.rdy & s.size_mem_recv.en
  //       s.size_mem_recv.rdy@=s.temp_value.enq.rdy
  //       s.temp_lit.enq.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  // 
  //       s.value_mem_send.msg@=concat(Bits12(0), Bits32(
  //           0), s.clause_lit_queue.deq.ret, Bits3(0))
  // 
  //       s.temp_value.enq.msg@=s.value_mem_recv.msg[17-2:17]
  //       # TODO: the real addr can be calculated immediately
  //       s.temp_lit.enq.msg@= s.clause_lit_queue.deq.ret
  // 
  //       s.clause_lit_with_value.enq.en@=s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  //       s.temp_value.deq.en@= s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  //       s.temp_lit.deq.en@= s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  // 
  //       s.clause_lit_with_value.enq.msg@=concat(
  //           s.temp_lit.deq.ret, s.temp_value.deq.ret)
  // 
  //       s.clause_lit_with_value.deq.en@=s.clause_lit_with_value.deq.rdy & s.clause_process_fsm.value_recv.rdy
  //       s.clause_process_fsm.value_recv.en@=s.clause_lit_with_value.deq.rdy & s.clause_process_fsm.value_recv.rdy
  
  always_comb begin : comb
    value_mem_recv__rdy = temp_value__enq__rdy;
    size_mem_send__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    cr_q__deq__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    temp_cr_size__enq__en = temp_cr_addr__enq__rdy & size_mem_recv__en;
    size_mem_recv__rdy = temp_cr_size__enq__rdy;
    temp_cr_addr__enq__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    __tmpvar__comb_msg = 110'd0;
    size_mem_send__msg = __tmpvar__comb_msg;
    temp_cr_size__enq__msg = size_mem_recv__msg[6'd47:6'd48 - 6'd32];
    temp_cr_addr__enq__msg = { 32'd0, cr_q__deq__ret };
    size_addr_q__enq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    temp_cr_size__deq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    temp_cr_addr__deq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    size_addr_q__enq__msg = { temp_cr_size__deq__ret, temp_cr_addr__deq__ret };
    clause_fetcher__size_recv__en = clause_fetcher__size_recv__rdy & size_addr_q__deq__rdy;
    clause_fetcher__addr_recv__en = clause_fetcher__addr_recv__rdy & size_addr_q__deq__rdy;
    size_addr_q__deq__en = ( clause_fetcher__size_recv__rdy & clause_fetcher__addr_recv__rdy ) & size_addr_q__deq__rdy;
    clause_fetcher__size_recv__msg = size_addr_q__deq__ret[7'd31:7'd0];
    clause_fetcher__addr_recv__msg = size_addr_q__deq__ret[7'd95:7'd32];
    value_mem_send__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    clause_lit_queue__deq__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    temp_value__enq__en = temp_lit__enq__rdy & size_mem_recv__en;
    size_mem_recv__rdy = temp_value__enq__rdy;
    temp_lit__enq__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    value_mem_send__msg = { 12'd0, 32'd0, clause_lit_queue__deq__ret, 3'd0 };
    temp_value__enq__msg = value_mem_recv__msg[5'd16:5'd17 - 5'd2];
    temp_lit__enq__msg = clause_lit_queue__deq__ret;
    clause_lit_with_value__enq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    temp_value__deq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    temp_lit__deq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    clause_lit_with_value__enq__msg = { temp_lit__deq__ret, temp_value__deq__ret };
    clause_lit_with_value__deq__en = clause_lit_with_value__deq__rdy & clause_process_fsm__value_recv__rdy;
    clause_process_fsm__value_recv__en = clause_lit_with_value__deq__rdy & clause_process_fsm__value_recv__rdy;
  end

  // Connections
  assign cr_q__clk = clk;
  assign cr_q__reset = reset;
  assign size_addr_q__clk = clk;
  assign size_addr_q__reset = reset;
  assign clause_fetcher__clk = clk;
  assign clause_fetcher__reset = reset;
  assign clause_lit_queue__clk = clk;
  assign clause_lit_queue__reset = reset;
  assign clause_lit_with_value__clk = clk;
  assign clause_lit_with_value__reset = reset;
  assign clause_process_fsm__clk = clk;
  assign clause_process_fsm__reset = reset;
  assign temp_cr_size__clk = clk;
  assign temp_cr_size__reset = reset;
  assign temp_cr_addr__clk = clk;
  assign temp_cr_addr__reset = reset;
  assign cr_q__enq__en = cr_recv__en;
  assign cr_q__enq__msg = cr_recv__msg;
  assign cr_recv__rdy = cr_q__enq__rdy;
  assign clause_lit_queue__enq__en = clause_fetcher__data_out__en;
  assign clause_lit_queue__enq__msg = clause_fetcher__data_out__msg;
  assign clause_fetcher__data_out__rdy = clause_lit_queue__enq__rdy;
  assign to_trail__en = clause_process_fsm__generated_send__en;
  assign to_trail__msg = clause_process_fsm__generated_send__msg;
  assign clause_process_fsm__generated_send__rdy = to_trail__rdy;
  assign conf = clause_process_fsm__conflict;
  assign temp_lit__clk = clk;
  assign temp_lit__reset = reset;
  assign temp_value__clk = clk;
  assign temp_value__reset = reset;
  assign clause_fetcher__mem_in__en = fetcher_mem_in__en;
  assign clause_fetcher__mem_in__msg = fetcher_mem_in__msg;
  assign fetcher_mem_in__rdy = clause_fetcher__mem_in__rdy;
  assign fetcher_mem_out__en = clause_fetcher__mem_out__en;
  assign fetcher_mem_out__msg = clause_fetcher__mem_out__msg;
  assign clause_fetcher__mem_out__rdy = fetcher_mem_out__rdy;

endmodule


// PyMTL Component Clause Definition
// At /home/sjq/git/pymtl_project/satacc/clause/clause.py
module Clause__index_1
(
  input  logic [0:0]    clk,
  output logic [0:0]    conf,
  input  logic [0:0]    reset,
  input  logic [0:0]    cr_recv__en,
  input  logic [31:0]   cr_recv__msg,
  output logic [0:0]    cr_recv__rdy,
  input  logic [0:0]    fetcher_mem_in__en,
  input  logic [80:0]   fetcher_mem_in__msg,
  output logic [0:0]    fetcher_mem_in__rdy,
  output logic [0:0]    fetcher_mem_out__en,
  output logic [152:0]  fetcher_mem_out__msg,
  input  logic [0:0]    fetcher_mem_out__rdy,
  input  logic [0:0]    size_mem_recv__en,
  input  logic [47:0]   size_mem_recv__msg,
  output logic [0:0]    size_mem_recv__rdy,
  output logic [0:0]    size_mem_send__en,
  output logic [109:0]  size_mem_send__msg,
  input  logic [0:0]    size_mem_send__rdy,
  output logic [0:0]    to_trail__en,
  output logic [31:0]   to_trail__msg,
  input  logic [0:0]    to_trail__rdy,
  input  logic [0:0]    value_mem_recv__en,
  input  logic [16:0]   value_mem_recv__msg,
  output logic [0:0]    value_mem_recv__rdy,
  output logic [0:0]    value_mem_send__en,
  output logic [78:0]   value_mem_send__msg,
  input  logic [0:0]    value_mem_send__rdy
);
  // Sub-component declarations
  logic [0:0]    clause_fetcher__clk;
  logic [0:0]    clause_fetcher__reset;
  logic [0:0]    clause_fetcher__addr_recv__en;
  logic [63:0]   clause_fetcher__addr_recv__msg;
  logic [0:0]    clause_fetcher__addr_recv__rdy;
  logic [0:0]    clause_fetcher__data_out__en;
  logic [31:0]   clause_fetcher__data_out__msg;
  logic [0:0]    clause_fetcher__data_out__rdy;
  logic [0:0]    clause_fetcher__mem_in__en;
  logic [80:0]   clause_fetcher__mem_in__msg;
  logic [0:0]    clause_fetcher__mem_in__rdy;
  logic [0:0]    clause_fetcher__mem_out__en;
  logic [152:0]  clause_fetcher__mem_out__msg;
  logic [0:0]    clause_fetcher__mem_out__rdy;
  logic [0:0]    clause_fetcher__size_recv__en;
  logic [31:0]   clause_fetcher__size_recv__msg;
  logic [0:0]    clause_fetcher__size_recv__rdy;

  Sized_memory_sender_in_order__f102ad27562d9009 clause_fetcher
  (
    .clk            (    clause_fetcher__clk    ),
    .reset          (   clause_fetcher__reset   ),
    .addr_recv__en  ( clause_fetcher__addr_recv__en ),
    .addr_recv__msg ( clause_fetcher__addr_recv__msg ),
    .addr_recv__rdy ( clause_fetcher__addr_recv__rdy ),
    .data_out__en   ( clause_fetcher__data_out__en ),
    .data_out__msg  ( clause_fetcher__data_out__msg ),
    .data_out__rdy  ( clause_fetcher__data_out__rdy ),
    .mem_in__en     ( clause_fetcher__mem_in__en ),
    .mem_in__msg    ( clause_fetcher__mem_in__msg ),
    .mem_in__rdy    ( clause_fetcher__mem_in__rdy ),
    .mem_out__en    ( clause_fetcher__mem_out__en ),
    .mem_out__msg   ( clause_fetcher__mem_out__msg ),
    .mem_out__rdy   ( clause_fetcher__mem_out__rdy ),
    .size_recv__en  ( clause_fetcher__size_recv__en ),
    .size_recv__msg ( clause_fetcher__size_recv__msg ),
    .size_recv__rdy ( clause_fetcher__size_recv__rdy )
  );

  logic [0:0]    clause_lit_queue__clk;
  logic [3:0]    clause_lit_queue__count;
  logic [0:0]    clause_lit_queue__reset;
  logic [0:0]    clause_lit_queue__deq__en;
  logic [0:0]    clause_lit_queue__deq__rdy;
  logic [31:0]   clause_lit_queue__deq__ret;
  logic [0:0]    clause_lit_queue__enq__en;
  logic [31:0]   clause_lit_queue__enq__msg;
  logic [0:0]    clause_lit_queue__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_8 clause_lit_queue
  (
    .clk            (   clause_lit_queue__clk   ),
    .count          (  clause_lit_queue__count  ),
    .reset          (  clause_lit_queue__reset  ),
    .deq__en        ( clause_lit_queue__deq__en ),
    .deq__rdy       ( clause_lit_queue__deq__rdy ),
    .deq__ret       ( clause_lit_queue__deq__ret ),
    .enq__en        ( clause_lit_queue__enq__en ),
    .enq__msg       ( clause_lit_queue__enq__msg ),
    .enq__rdy       ( clause_lit_queue__enq__rdy )
  );

  logic [0:0]    clause_lit_with_value__clk;
  logic [3:0]    clause_lit_with_value__count;
  logic [0:0]    clause_lit_with_value__reset;
  logic [0:0]    clause_lit_with_value__deq__en;
  logic [0:0]    clause_lit_with_value__deq__rdy;
  logic [33:0]   clause_lit_with_value__deq__ret;
  logic [0:0]    clause_lit_with_value__enq__en;
  logic [33:0]   clause_lit_with_value__enq__msg;
  logic [0:0]    clause_lit_with_value__enq__rdy;

  PipeQueueRTL__EntryType_Bits34__num_entries_8 clause_lit_with_value
  (
    .clk            ( clause_lit_with_value__clk ),
    .count          ( clause_lit_with_value__count ),
    .reset          ( clause_lit_with_value__reset ),
    .deq__en        ( clause_lit_with_value__deq__en ),
    .deq__rdy       ( clause_lit_with_value__deq__rdy ),
    .deq__ret       ( clause_lit_with_value__deq__ret ),
    .enq__en        ( clause_lit_with_value__enq__en ),
    .enq__msg       ( clause_lit_with_value__enq__msg ),
    .enq__rdy       ( clause_lit_with_value__enq__rdy )
  );

  logic [0:0]    clause_process_fsm__clk;
  logic [0:0]    clause_process_fsm__conflict;
  logic [0:0]    clause_process_fsm__reset;
  logic [0:0]    clause_process_fsm__generated_send__en;
  logic [31:0]   clause_process_fsm__generated_send__msg;
  logic [0:0]    clause_process_fsm__generated_send__rdy;
  logic [0:0]    clause_process_fsm__value_recv__en;
  logic [33:0]   clause_process_fsm__value_recv__msg;
  logic [0:0]    clause_process_fsm__value_recv__rdy;

  Clause_fsm_noparam clause_process_fsm
  (
    .clk            (  clause_process_fsm__clk  ),
    .conflict       ( clause_process_fsm__conflict ),
    .reset          ( clause_process_fsm__reset ),
    .generated_send__en( clause_process_fsm__generated_send__en ),
    .generated_send__msg( clause_process_fsm__generated_send__msg ),
    .generated_send__rdy( clause_process_fsm__generated_send__rdy ),
    .value_recv__en ( clause_process_fsm__value_recv__en ),
    .value_recv__msg( clause_process_fsm__value_recv__msg ),
    .value_recv__rdy( clause_process_fsm__value_recv__rdy )
  );

  logic [0:0]    cr_q__clk;
  logic [2:0]    cr_q__count;
  logic [0:0]    cr_q__reset;
  logic [0:0]    cr_q__deq__en;
  logic [0:0]    cr_q__deq__rdy;
  logic [31:0]   cr_q__deq__ret;
  logic [0:0]    cr_q__enq__en;
  logic [31:0]   cr_q__enq__msg;
  logic [0:0]    cr_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_4 cr_q
  (
    .clk            (         cr_q__clk         ),
    .count          (        cr_q__count        ),
    .reset          (        cr_q__reset        ),
    .deq__en        (       cr_q__deq__en       ),
    .deq__rdy       (       cr_q__deq__rdy      ),
    .deq__ret       (       cr_q__deq__ret      ),
    .enq__en        (       cr_q__enq__en       ),
    .enq__msg       (       cr_q__enq__msg      ),
    .enq__rdy       (       cr_q__enq__rdy      )
  );

  logic [0:0]    size_addr_q__clk;
  logic [3:0]    size_addr_q__count;
  logic [0:0]    size_addr_q__reset;
  logic [0:0]    size_addr_q__deq__en;
  logic [0:0]    size_addr_q__deq__rdy;
  logic [95:0]   size_addr_q__deq__ret;
  logic [0:0]    size_addr_q__enq__en;
  logic [95:0]   size_addr_q__enq__msg;
  logic [0:0]    size_addr_q__enq__rdy;

  PipeQueueRTL__EntryType_Bits96__num_entries_8 size_addr_q
  (
    .clk            (      size_addr_q__clk     ),
    .count          (     size_addr_q__count    ),
    .reset          (     size_addr_q__reset    ),
    .deq__en        (    size_addr_q__deq__en   ),
    .deq__rdy       (   size_addr_q__deq__rdy   ),
    .deq__ret       (   size_addr_q__deq__ret   ),
    .enq__en        (    size_addr_q__enq__en   ),
    .enq__msg       (   size_addr_q__enq__msg   ),
    .enq__rdy       (   size_addr_q__enq__rdy   )
  );

  logic [0:0]    temp_cr_addr__clk;
  logic [0:0]    temp_cr_addr__count;
  logic [0:0]    temp_cr_addr__reset;
  logic [0:0]    temp_cr_addr__deq__en;
  logic [0:0]    temp_cr_addr__deq__rdy;
  logic [63:0]   temp_cr_addr__deq__ret;
  logic [0:0]    temp_cr_addr__enq__en;
  logic [63:0]   temp_cr_addr__enq__msg;
  logic [0:0]    temp_cr_addr__enq__rdy;

  BypassQueueRTL__EntryType_Bits64__num_entries_1 temp_cr_addr
  (
    .clk            (     temp_cr_addr__clk     ),
    .count          (    temp_cr_addr__count    ),
    .reset          (    temp_cr_addr__reset    ),
    .deq__en        (   temp_cr_addr__deq__en   ),
    .deq__rdy       (   temp_cr_addr__deq__rdy  ),
    .deq__ret       (   temp_cr_addr__deq__ret  ),
    .enq__en        (   temp_cr_addr__enq__en   ),
    .enq__msg       (   temp_cr_addr__enq__msg  ),
    .enq__rdy       (   temp_cr_addr__enq__rdy  )
  );

  logic [0:0]    temp_cr_size__clk;
  logic [0:0]    temp_cr_size__count;
  logic [0:0]    temp_cr_size__reset;
  logic [0:0]    temp_cr_size__deq__en;
  logic [0:0]    temp_cr_size__deq__rdy;
  logic [31:0]   temp_cr_size__deq__ret;
  logic [0:0]    temp_cr_size__enq__en;
  logic [31:0]   temp_cr_size__enq__msg;
  logic [0:0]    temp_cr_size__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_cr_size
  (
    .clk            (     temp_cr_size__clk     ),
    .count          (    temp_cr_size__count    ),
    .reset          (    temp_cr_size__reset    ),
    .deq__en        (   temp_cr_size__deq__en   ),
    .deq__rdy       (   temp_cr_size__deq__rdy  ),
    .deq__ret       (   temp_cr_size__deq__ret  ),
    .enq__en        (   temp_cr_size__enq__en   ),
    .enq__msg       (   temp_cr_size__enq__msg  ),
    .enq__rdy       (   temp_cr_size__enq__rdy  )
  );

  logic [0:0]    temp_lit__clk;
  logic [0:0]    temp_lit__count;
  logic [0:0]    temp_lit__reset;
  logic [0:0]    temp_lit__deq__en;
  logic [0:0]    temp_lit__deq__rdy;
  logic [31:0]   temp_lit__deq__ret;
  logic [0:0]    temp_lit__enq__en;
  logic [31:0]   temp_lit__enq__msg;
  logic [0:0]    temp_lit__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_lit
  (
    .clk            (       temp_lit__clk       ),
    .count          (      temp_lit__count      ),
    .reset          (      temp_lit__reset      ),
    .deq__en        (     temp_lit__deq__en     ),
    .deq__rdy       (     temp_lit__deq__rdy    ),
    .deq__ret       (     temp_lit__deq__ret    ),
    .enq__en        (     temp_lit__enq__en     ),
    .enq__msg       (     temp_lit__enq__msg    ),
    .enq__rdy       (     temp_lit__enq__rdy    )
  );

  logic [0:0]    temp_value__clk;
  logic [0:0]    temp_value__count;
  logic [0:0]    temp_value__reset;
  logic [0:0]    temp_value__deq__en;
  logic [0:0]    temp_value__deq__rdy;
  logic [1:0]    temp_value__deq__ret;
  logic [0:0]    temp_value__enq__en;
  logic [1:0]    temp_value__enq__msg;
  logic [0:0]    temp_value__enq__rdy;

  BypassQueueRTL__EntryType_Bits2__num_entries_1 temp_value
  (
    .clk            (      temp_value__clk      ),
    .count          (     temp_value__count     ),
    .reset          (     temp_value__reset     ),
    .deq__en        (    temp_value__deq__en    ),
    .deq__rdy       (    temp_value__deq__rdy   ),
    .deq__ret       (    temp_value__deq__ret   ),
    .enq__en        (    temp_value__enq__en    ),
    .enq__msg       (    temp_value__enq__msg   ),
    .enq__rdy       (    temp_value__enq__rdy   )
  );

  // Temporary wire definitions
  logic [109:0]  __tmpvar__comb_msg;

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/clause/clause.py:64
  //   @update
  //   def comb():
  //       s.value_mem_recv.rdy@=s.temp_value.enq.rdy
  //       s.size_mem_send.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       s.cr_q.deq.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       s.temp_cr_size.enq.en@=s.temp_cr_addr.enq.rdy & s.size_mem_recv.en
  //       s.size_mem_recv.rdy@=s.temp_cr_size.enq.rdy
  //       s.temp_cr_addr.enq.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       msg = Bits110()
  // 
  //       s.size_mem_send.msg@=msg
  //       s.temp_cr_size.enq.msg@=s.size_mem_recv.msg[48-32:48]
  //       # TODO: the real addr can be calculated immediately
  //       s.temp_cr_addr.enq.msg@=concat(Bits32(0), s.cr_q.deq.ret)
  // 
  //       s.size_addr_q.enq.en@=s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.temp_cr_size.deq.en@= s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.temp_cr_addr.deq.en@= s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.size_addr_q.enq.msg@=concat(s.temp_cr_size.deq.ret,
  //                                     s.temp_cr_addr.deq.ret)
  //       s.clause_fetcher.size_recv.en@=s.clause_fetcher.size_recv.rdy & s.size_addr_q.deq.rdy
  //       s.clause_fetcher.addr_recv.en@=s.clause_fetcher.addr_recv.rdy & s.size_addr_q.deq.rdy
  //       s.size_addr_q.deq.en@=s.clause_fetcher.size_recv.rdy & s.clause_fetcher.addr_recv.rdy & s.size_addr_q.deq.rdy
  //       s.clause_fetcher.size_recv.msg@=s.size_addr_q.deq.ret[0:32]
  //       s.clause_fetcher.addr_recv.msg@=s.size_addr_q.deq.ret[32:96]
  //       #
  //       s.value_mem_send.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  //       s.clause_lit_queue.deq.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  //       s.temp_value.enq.en@=s.temp_lit.enq.rdy & s.size_mem_recv.en
  //       s.size_mem_recv.rdy@=s.temp_value.enq.rdy
  //       s.temp_lit.enq.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  // 
  //       s.value_mem_send.msg@=concat(Bits12(0), Bits32(
  //           0), s.clause_lit_queue.deq.ret, Bits3(0))
  // 
  //       s.temp_value.enq.msg@=s.value_mem_recv.msg[17-2:17]
  //       # TODO: the real addr can be calculated immediately
  //       s.temp_lit.enq.msg@= s.clause_lit_queue.deq.ret
  // 
  //       s.clause_lit_with_value.enq.en@=s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  //       s.temp_value.deq.en@= s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  //       s.temp_lit.deq.en@= s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  // 
  //       s.clause_lit_with_value.enq.msg@=concat(
  //           s.temp_lit.deq.ret, s.temp_value.deq.ret)
  // 
  //       s.clause_lit_with_value.deq.en@=s.clause_lit_with_value.deq.rdy & s.clause_process_fsm.value_recv.rdy
  //       s.clause_process_fsm.value_recv.en@=s.clause_lit_with_value.deq.rdy & s.clause_process_fsm.value_recv.rdy
  
  always_comb begin : comb
    value_mem_recv__rdy = temp_value__enq__rdy;
    size_mem_send__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    cr_q__deq__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    temp_cr_size__enq__en = temp_cr_addr__enq__rdy & size_mem_recv__en;
    size_mem_recv__rdy = temp_cr_size__enq__rdy;
    temp_cr_addr__enq__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    __tmpvar__comb_msg = 110'd0;
    size_mem_send__msg = __tmpvar__comb_msg;
    temp_cr_size__enq__msg = size_mem_recv__msg[6'd47:6'd48 - 6'd32];
    temp_cr_addr__enq__msg = { 32'd0, cr_q__deq__ret };
    size_addr_q__enq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    temp_cr_size__deq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    temp_cr_addr__deq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    size_addr_q__enq__msg = { temp_cr_size__deq__ret, temp_cr_addr__deq__ret };
    clause_fetcher__size_recv__en = clause_fetcher__size_recv__rdy & size_addr_q__deq__rdy;
    clause_fetcher__addr_recv__en = clause_fetcher__addr_recv__rdy & size_addr_q__deq__rdy;
    size_addr_q__deq__en = ( clause_fetcher__size_recv__rdy & clause_fetcher__addr_recv__rdy ) & size_addr_q__deq__rdy;
    clause_fetcher__size_recv__msg = size_addr_q__deq__ret[7'd31:7'd0];
    clause_fetcher__addr_recv__msg = size_addr_q__deq__ret[7'd95:7'd32];
    value_mem_send__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    clause_lit_queue__deq__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    temp_value__enq__en = temp_lit__enq__rdy & size_mem_recv__en;
    size_mem_recv__rdy = temp_value__enq__rdy;
    temp_lit__enq__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    value_mem_send__msg = { 12'd0, 32'd0, clause_lit_queue__deq__ret, 3'd0 };
    temp_value__enq__msg = value_mem_recv__msg[5'd16:5'd17 - 5'd2];
    temp_lit__enq__msg = clause_lit_queue__deq__ret;
    clause_lit_with_value__enq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    temp_value__deq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    temp_lit__deq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    clause_lit_with_value__enq__msg = { temp_lit__deq__ret, temp_value__deq__ret };
    clause_lit_with_value__deq__en = clause_lit_with_value__deq__rdy & clause_process_fsm__value_recv__rdy;
    clause_process_fsm__value_recv__en = clause_lit_with_value__deq__rdy & clause_process_fsm__value_recv__rdy;
  end

  // Connections
  assign cr_q__clk = clk;
  assign cr_q__reset = reset;
  assign size_addr_q__clk = clk;
  assign size_addr_q__reset = reset;
  assign clause_fetcher__clk = clk;
  assign clause_fetcher__reset = reset;
  assign clause_lit_queue__clk = clk;
  assign clause_lit_queue__reset = reset;
  assign clause_lit_with_value__clk = clk;
  assign clause_lit_with_value__reset = reset;
  assign clause_process_fsm__clk = clk;
  assign clause_process_fsm__reset = reset;
  assign temp_cr_size__clk = clk;
  assign temp_cr_size__reset = reset;
  assign temp_cr_addr__clk = clk;
  assign temp_cr_addr__reset = reset;
  assign cr_q__enq__en = cr_recv__en;
  assign cr_q__enq__msg = cr_recv__msg;
  assign cr_recv__rdy = cr_q__enq__rdy;
  assign clause_lit_queue__enq__en = clause_fetcher__data_out__en;
  assign clause_lit_queue__enq__msg = clause_fetcher__data_out__msg;
  assign clause_fetcher__data_out__rdy = clause_lit_queue__enq__rdy;
  assign to_trail__en = clause_process_fsm__generated_send__en;
  assign to_trail__msg = clause_process_fsm__generated_send__msg;
  assign clause_process_fsm__generated_send__rdy = to_trail__rdy;
  assign conf = clause_process_fsm__conflict;
  assign temp_lit__clk = clk;
  assign temp_lit__reset = reset;
  assign temp_value__clk = clk;
  assign temp_value__reset = reset;
  assign clause_fetcher__mem_in__en = fetcher_mem_in__en;
  assign clause_fetcher__mem_in__msg = fetcher_mem_in__msg;
  assign fetcher_mem_in__rdy = clause_fetcher__mem_in__rdy;
  assign fetcher_mem_out__en = clause_fetcher__mem_out__en;
  assign fetcher_mem_out__msg = clause_fetcher__mem_out__msg;
  assign clause_fetcher__mem_out__rdy = fetcher_mem_out__rdy;

endmodule


// PyMTL Component Clause Definition
// At /home/sjq/git/pymtl_project/satacc/clause/clause.py
module Clause__index_2
(
  input  logic [0:0]    clk,
  output logic [0:0]    conf,
  input  logic [0:0]    reset,
  input  logic [0:0]    cr_recv__en,
  input  logic [31:0]   cr_recv__msg,
  output logic [0:0]    cr_recv__rdy,
  input  logic [0:0]    fetcher_mem_in__en,
  input  logic [80:0]   fetcher_mem_in__msg,
  output logic [0:0]    fetcher_mem_in__rdy,
  output logic [0:0]    fetcher_mem_out__en,
  output logic [152:0]  fetcher_mem_out__msg,
  input  logic [0:0]    fetcher_mem_out__rdy,
  input  logic [0:0]    size_mem_recv__en,
  input  logic [47:0]   size_mem_recv__msg,
  output logic [0:0]    size_mem_recv__rdy,
  output logic [0:0]    size_mem_send__en,
  output logic [109:0]  size_mem_send__msg,
  input  logic [0:0]    size_mem_send__rdy,
  output logic [0:0]    to_trail__en,
  output logic [31:0]   to_trail__msg,
  input  logic [0:0]    to_trail__rdy,
  input  logic [0:0]    value_mem_recv__en,
  input  logic [16:0]   value_mem_recv__msg,
  output logic [0:0]    value_mem_recv__rdy,
  output logic [0:0]    value_mem_send__en,
  output logic [78:0]   value_mem_send__msg,
  input  logic [0:0]    value_mem_send__rdy
);
  // Sub-component declarations
  logic [0:0]    clause_fetcher__clk;
  logic [0:0]    clause_fetcher__reset;
  logic [0:0]    clause_fetcher__addr_recv__en;
  logic [63:0]   clause_fetcher__addr_recv__msg;
  logic [0:0]    clause_fetcher__addr_recv__rdy;
  logic [0:0]    clause_fetcher__data_out__en;
  logic [31:0]   clause_fetcher__data_out__msg;
  logic [0:0]    clause_fetcher__data_out__rdy;
  logic [0:0]    clause_fetcher__mem_in__en;
  logic [80:0]   clause_fetcher__mem_in__msg;
  logic [0:0]    clause_fetcher__mem_in__rdy;
  logic [0:0]    clause_fetcher__mem_out__en;
  logic [152:0]  clause_fetcher__mem_out__msg;
  logic [0:0]    clause_fetcher__mem_out__rdy;
  logic [0:0]    clause_fetcher__size_recv__en;
  logic [31:0]   clause_fetcher__size_recv__msg;
  logic [0:0]    clause_fetcher__size_recv__rdy;

  Sized_memory_sender_in_order__f102ad27562d9009 clause_fetcher
  (
    .clk            (    clause_fetcher__clk    ),
    .reset          (   clause_fetcher__reset   ),
    .addr_recv__en  ( clause_fetcher__addr_recv__en ),
    .addr_recv__msg ( clause_fetcher__addr_recv__msg ),
    .addr_recv__rdy ( clause_fetcher__addr_recv__rdy ),
    .data_out__en   ( clause_fetcher__data_out__en ),
    .data_out__msg  ( clause_fetcher__data_out__msg ),
    .data_out__rdy  ( clause_fetcher__data_out__rdy ),
    .mem_in__en     ( clause_fetcher__mem_in__en ),
    .mem_in__msg    ( clause_fetcher__mem_in__msg ),
    .mem_in__rdy    ( clause_fetcher__mem_in__rdy ),
    .mem_out__en    ( clause_fetcher__mem_out__en ),
    .mem_out__msg   ( clause_fetcher__mem_out__msg ),
    .mem_out__rdy   ( clause_fetcher__mem_out__rdy ),
    .size_recv__en  ( clause_fetcher__size_recv__en ),
    .size_recv__msg ( clause_fetcher__size_recv__msg ),
    .size_recv__rdy ( clause_fetcher__size_recv__rdy )
  );

  logic [0:0]    clause_lit_queue__clk;
  logic [3:0]    clause_lit_queue__count;
  logic [0:0]    clause_lit_queue__reset;
  logic [0:0]    clause_lit_queue__deq__en;
  logic [0:0]    clause_lit_queue__deq__rdy;
  logic [31:0]   clause_lit_queue__deq__ret;
  logic [0:0]    clause_lit_queue__enq__en;
  logic [31:0]   clause_lit_queue__enq__msg;
  logic [0:0]    clause_lit_queue__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_8 clause_lit_queue
  (
    .clk            (   clause_lit_queue__clk   ),
    .count          (  clause_lit_queue__count  ),
    .reset          (  clause_lit_queue__reset  ),
    .deq__en        ( clause_lit_queue__deq__en ),
    .deq__rdy       ( clause_lit_queue__deq__rdy ),
    .deq__ret       ( clause_lit_queue__deq__ret ),
    .enq__en        ( clause_lit_queue__enq__en ),
    .enq__msg       ( clause_lit_queue__enq__msg ),
    .enq__rdy       ( clause_lit_queue__enq__rdy )
  );

  logic [0:0]    clause_lit_with_value__clk;
  logic [3:0]    clause_lit_with_value__count;
  logic [0:0]    clause_lit_with_value__reset;
  logic [0:0]    clause_lit_with_value__deq__en;
  logic [0:0]    clause_lit_with_value__deq__rdy;
  logic [33:0]   clause_lit_with_value__deq__ret;
  logic [0:0]    clause_lit_with_value__enq__en;
  logic [33:0]   clause_lit_with_value__enq__msg;
  logic [0:0]    clause_lit_with_value__enq__rdy;

  PipeQueueRTL__EntryType_Bits34__num_entries_8 clause_lit_with_value
  (
    .clk            ( clause_lit_with_value__clk ),
    .count          ( clause_lit_with_value__count ),
    .reset          ( clause_lit_with_value__reset ),
    .deq__en        ( clause_lit_with_value__deq__en ),
    .deq__rdy       ( clause_lit_with_value__deq__rdy ),
    .deq__ret       ( clause_lit_with_value__deq__ret ),
    .enq__en        ( clause_lit_with_value__enq__en ),
    .enq__msg       ( clause_lit_with_value__enq__msg ),
    .enq__rdy       ( clause_lit_with_value__enq__rdy )
  );

  logic [0:0]    clause_process_fsm__clk;
  logic [0:0]    clause_process_fsm__conflict;
  logic [0:0]    clause_process_fsm__reset;
  logic [0:0]    clause_process_fsm__generated_send__en;
  logic [31:0]   clause_process_fsm__generated_send__msg;
  logic [0:0]    clause_process_fsm__generated_send__rdy;
  logic [0:0]    clause_process_fsm__value_recv__en;
  logic [33:0]   clause_process_fsm__value_recv__msg;
  logic [0:0]    clause_process_fsm__value_recv__rdy;

  Clause_fsm_noparam clause_process_fsm
  (
    .clk            (  clause_process_fsm__clk  ),
    .conflict       ( clause_process_fsm__conflict ),
    .reset          ( clause_process_fsm__reset ),
    .generated_send__en( clause_process_fsm__generated_send__en ),
    .generated_send__msg( clause_process_fsm__generated_send__msg ),
    .generated_send__rdy( clause_process_fsm__generated_send__rdy ),
    .value_recv__en ( clause_process_fsm__value_recv__en ),
    .value_recv__msg( clause_process_fsm__value_recv__msg ),
    .value_recv__rdy( clause_process_fsm__value_recv__rdy )
  );

  logic [0:0]    cr_q__clk;
  logic [2:0]    cr_q__count;
  logic [0:0]    cr_q__reset;
  logic [0:0]    cr_q__deq__en;
  logic [0:0]    cr_q__deq__rdy;
  logic [31:0]   cr_q__deq__ret;
  logic [0:0]    cr_q__enq__en;
  logic [31:0]   cr_q__enq__msg;
  logic [0:0]    cr_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_4 cr_q
  (
    .clk            (         cr_q__clk         ),
    .count          (        cr_q__count        ),
    .reset          (        cr_q__reset        ),
    .deq__en        (       cr_q__deq__en       ),
    .deq__rdy       (       cr_q__deq__rdy      ),
    .deq__ret       (       cr_q__deq__ret      ),
    .enq__en        (       cr_q__enq__en       ),
    .enq__msg       (       cr_q__enq__msg      ),
    .enq__rdy       (       cr_q__enq__rdy      )
  );

  logic [0:0]    size_addr_q__clk;
  logic [3:0]    size_addr_q__count;
  logic [0:0]    size_addr_q__reset;
  logic [0:0]    size_addr_q__deq__en;
  logic [0:0]    size_addr_q__deq__rdy;
  logic [95:0]   size_addr_q__deq__ret;
  logic [0:0]    size_addr_q__enq__en;
  logic [95:0]   size_addr_q__enq__msg;
  logic [0:0]    size_addr_q__enq__rdy;

  PipeQueueRTL__EntryType_Bits96__num_entries_8 size_addr_q
  (
    .clk            (      size_addr_q__clk     ),
    .count          (     size_addr_q__count    ),
    .reset          (     size_addr_q__reset    ),
    .deq__en        (    size_addr_q__deq__en   ),
    .deq__rdy       (   size_addr_q__deq__rdy   ),
    .deq__ret       (   size_addr_q__deq__ret   ),
    .enq__en        (    size_addr_q__enq__en   ),
    .enq__msg       (   size_addr_q__enq__msg   ),
    .enq__rdy       (   size_addr_q__enq__rdy   )
  );

  logic [0:0]    temp_cr_addr__clk;
  logic [0:0]    temp_cr_addr__count;
  logic [0:0]    temp_cr_addr__reset;
  logic [0:0]    temp_cr_addr__deq__en;
  logic [0:0]    temp_cr_addr__deq__rdy;
  logic [63:0]   temp_cr_addr__deq__ret;
  logic [0:0]    temp_cr_addr__enq__en;
  logic [63:0]   temp_cr_addr__enq__msg;
  logic [0:0]    temp_cr_addr__enq__rdy;

  BypassQueueRTL__EntryType_Bits64__num_entries_1 temp_cr_addr
  (
    .clk            (     temp_cr_addr__clk     ),
    .count          (    temp_cr_addr__count    ),
    .reset          (    temp_cr_addr__reset    ),
    .deq__en        (   temp_cr_addr__deq__en   ),
    .deq__rdy       (   temp_cr_addr__deq__rdy  ),
    .deq__ret       (   temp_cr_addr__deq__ret  ),
    .enq__en        (   temp_cr_addr__enq__en   ),
    .enq__msg       (   temp_cr_addr__enq__msg  ),
    .enq__rdy       (   temp_cr_addr__enq__rdy  )
  );

  logic [0:0]    temp_cr_size__clk;
  logic [0:0]    temp_cr_size__count;
  logic [0:0]    temp_cr_size__reset;
  logic [0:0]    temp_cr_size__deq__en;
  logic [0:0]    temp_cr_size__deq__rdy;
  logic [31:0]   temp_cr_size__deq__ret;
  logic [0:0]    temp_cr_size__enq__en;
  logic [31:0]   temp_cr_size__enq__msg;
  logic [0:0]    temp_cr_size__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_cr_size
  (
    .clk            (     temp_cr_size__clk     ),
    .count          (    temp_cr_size__count    ),
    .reset          (    temp_cr_size__reset    ),
    .deq__en        (   temp_cr_size__deq__en   ),
    .deq__rdy       (   temp_cr_size__deq__rdy  ),
    .deq__ret       (   temp_cr_size__deq__ret  ),
    .enq__en        (   temp_cr_size__enq__en   ),
    .enq__msg       (   temp_cr_size__enq__msg  ),
    .enq__rdy       (   temp_cr_size__enq__rdy  )
  );

  logic [0:0]    temp_lit__clk;
  logic [0:0]    temp_lit__count;
  logic [0:0]    temp_lit__reset;
  logic [0:0]    temp_lit__deq__en;
  logic [0:0]    temp_lit__deq__rdy;
  logic [31:0]   temp_lit__deq__ret;
  logic [0:0]    temp_lit__enq__en;
  logic [31:0]   temp_lit__enq__msg;
  logic [0:0]    temp_lit__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_lit
  (
    .clk            (       temp_lit__clk       ),
    .count          (      temp_lit__count      ),
    .reset          (      temp_lit__reset      ),
    .deq__en        (     temp_lit__deq__en     ),
    .deq__rdy       (     temp_lit__deq__rdy    ),
    .deq__ret       (     temp_lit__deq__ret    ),
    .enq__en        (     temp_lit__enq__en     ),
    .enq__msg       (     temp_lit__enq__msg    ),
    .enq__rdy       (     temp_lit__enq__rdy    )
  );

  logic [0:0]    temp_value__clk;
  logic [0:0]    temp_value__count;
  logic [0:0]    temp_value__reset;
  logic [0:0]    temp_value__deq__en;
  logic [0:0]    temp_value__deq__rdy;
  logic [1:0]    temp_value__deq__ret;
  logic [0:0]    temp_value__enq__en;
  logic [1:0]    temp_value__enq__msg;
  logic [0:0]    temp_value__enq__rdy;

  BypassQueueRTL__EntryType_Bits2__num_entries_1 temp_value
  (
    .clk            (      temp_value__clk      ),
    .count          (     temp_value__count     ),
    .reset          (     temp_value__reset     ),
    .deq__en        (    temp_value__deq__en    ),
    .deq__rdy       (    temp_value__deq__rdy   ),
    .deq__ret       (    temp_value__deq__ret   ),
    .enq__en        (    temp_value__enq__en    ),
    .enq__msg       (    temp_value__enq__msg   ),
    .enq__rdy       (    temp_value__enq__rdy   )
  );

  // Temporary wire definitions
  logic [109:0]  __tmpvar__comb_msg;

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/clause/clause.py:64
  //   @update
  //   def comb():
  //       s.value_mem_recv.rdy@=s.temp_value.enq.rdy
  //       s.size_mem_send.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       s.cr_q.deq.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       s.temp_cr_size.enq.en@=s.temp_cr_addr.enq.rdy & s.size_mem_recv.en
  //       s.size_mem_recv.rdy@=s.temp_cr_size.enq.rdy
  //       s.temp_cr_addr.enq.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       msg = Bits110()
  // 
  //       s.size_mem_send.msg@=msg
  //       s.temp_cr_size.enq.msg@=s.size_mem_recv.msg[48-32:48]
  //       # TODO: the real addr can be calculated immediately
  //       s.temp_cr_addr.enq.msg@=concat(Bits32(0), s.cr_q.deq.ret)
  // 
  //       s.size_addr_q.enq.en@=s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.temp_cr_size.deq.en@= s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.temp_cr_addr.deq.en@= s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.size_addr_q.enq.msg@=concat(s.temp_cr_size.deq.ret,
  //                                     s.temp_cr_addr.deq.ret)
  //       s.clause_fetcher.size_recv.en@=s.clause_fetcher.size_recv.rdy & s.size_addr_q.deq.rdy
  //       s.clause_fetcher.addr_recv.en@=s.clause_fetcher.addr_recv.rdy & s.size_addr_q.deq.rdy
  //       s.size_addr_q.deq.en@=s.clause_fetcher.size_recv.rdy & s.clause_fetcher.addr_recv.rdy & s.size_addr_q.deq.rdy
  //       s.clause_fetcher.size_recv.msg@=s.size_addr_q.deq.ret[0:32]
  //       s.clause_fetcher.addr_recv.msg@=s.size_addr_q.deq.ret[32:96]
  //       #
  //       s.value_mem_send.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  //       s.clause_lit_queue.deq.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  //       s.temp_value.enq.en@=s.temp_lit.enq.rdy & s.size_mem_recv.en
  //       s.size_mem_recv.rdy@=s.temp_value.enq.rdy
  //       s.temp_lit.enq.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  // 
  //       s.value_mem_send.msg@=concat(Bits12(0), Bits32(
  //           0), s.clause_lit_queue.deq.ret, Bits3(0))
  // 
  //       s.temp_value.enq.msg@=s.value_mem_recv.msg[17-2:17]
  //       # TODO: the real addr can be calculated immediately
  //       s.temp_lit.enq.msg@= s.clause_lit_queue.deq.ret
  // 
  //       s.clause_lit_with_value.enq.en@=s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  //       s.temp_value.deq.en@= s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  //       s.temp_lit.deq.en@= s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  // 
  //       s.clause_lit_with_value.enq.msg@=concat(
  //           s.temp_lit.deq.ret, s.temp_value.deq.ret)
  // 
  //       s.clause_lit_with_value.deq.en@=s.clause_lit_with_value.deq.rdy & s.clause_process_fsm.value_recv.rdy
  //       s.clause_process_fsm.value_recv.en@=s.clause_lit_with_value.deq.rdy & s.clause_process_fsm.value_recv.rdy
  
  always_comb begin : comb
    value_mem_recv__rdy = temp_value__enq__rdy;
    size_mem_send__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    cr_q__deq__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    temp_cr_size__enq__en = temp_cr_addr__enq__rdy & size_mem_recv__en;
    size_mem_recv__rdy = temp_cr_size__enq__rdy;
    temp_cr_addr__enq__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    __tmpvar__comb_msg = 110'd0;
    size_mem_send__msg = __tmpvar__comb_msg;
    temp_cr_size__enq__msg = size_mem_recv__msg[6'd47:6'd48 - 6'd32];
    temp_cr_addr__enq__msg = { 32'd0, cr_q__deq__ret };
    size_addr_q__enq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    temp_cr_size__deq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    temp_cr_addr__deq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    size_addr_q__enq__msg = { temp_cr_size__deq__ret, temp_cr_addr__deq__ret };
    clause_fetcher__size_recv__en = clause_fetcher__size_recv__rdy & size_addr_q__deq__rdy;
    clause_fetcher__addr_recv__en = clause_fetcher__addr_recv__rdy & size_addr_q__deq__rdy;
    size_addr_q__deq__en = ( clause_fetcher__size_recv__rdy & clause_fetcher__addr_recv__rdy ) & size_addr_q__deq__rdy;
    clause_fetcher__size_recv__msg = size_addr_q__deq__ret[7'd31:7'd0];
    clause_fetcher__addr_recv__msg = size_addr_q__deq__ret[7'd95:7'd32];
    value_mem_send__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    clause_lit_queue__deq__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    temp_value__enq__en = temp_lit__enq__rdy & size_mem_recv__en;
    size_mem_recv__rdy = temp_value__enq__rdy;
    temp_lit__enq__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    value_mem_send__msg = { 12'd0, 32'd0, clause_lit_queue__deq__ret, 3'd0 };
    temp_value__enq__msg = value_mem_recv__msg[5'd16:5'd17 - 5'd2];
    temp_lit__enq__msg = clause_lit_queue__deq__ret;
    clause_lit_with_value__enq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    temp_value__deq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    temp_lit__deq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    clause_lit_with_value__enq__msg = { temp_lit__deq__ret, temp_value__deq__ret };
    clause_lit_with_value__deq__en = clause_lit_with_value__deq__rdy & clause_process_fsm__value_recv__rdy;
    clause_process_fsm__value_recv__en = clause_lit_with_value__deq__rdy & clause_process_fsm__value_recv__rdy;
  end

  // Connections
  assign cr_q__clk = clk;
  assign cr_q__reset = reset;
  assign size_addr_q__clk = clk;
  assign size_addr_q__reset = reset;
  assign clause_fetcher__clk = clk;
  assign clause_fetcher__reset = reset;
  assign clause_lit_queue__clk = clk;
  assign clause_lit_queue__reset = reset;
  assign clause_lit_with_value__clk = clk;
  assign clause_lit_with_value__reset = reset;
  assign clause_process_fsm__clk = clk;
  assign clause_process_fsm__reset = reset;
  assign temp_cr_size__clk = clk;
  assign temp_cr_size__reset = reset;
  assign temp_cr_addr__clk = clk;
  assign temp_cr_addr__reset = reset;
  assign cr_q__enq__en = cr_recv__en;
  assign cr_q__enq__msg = cr_recv__msg;
  assign cr_recv__rdy = cr_q__enq__rdy;
  assign clause_lit_queue__enq__en = clause_fetcher__data_out__en;
  assign clause_lit_queue__enq__msg = clause_fetcher__data_out__msg;
  assign clause_fetcher__data_out__rdy = clause_lit_queue__enq__rdy;
  assign to_trail__en = clause_process_fsm__generated_send__en;
  assign to_trail__msg = clause_process_fsm__generated_send__msg;
  assign clause_process_fsm__generated_send__rdy = to_trail__rdy;
  assign conf = clause_process_fsm__conflict;
  assign temp_lit__clk = clk;
  assign temp_lit__reset = reset;
  assign temp_value__clk = clk;
  assign temp_value__reset = reset;
  assign clause_fetcher__mem_in__en = fetcher_mem_in__en;
  assign clause_fetcher__mem_in__msg = fetcher_mem_in__msg;
  assign fetcher_mem_in__rdy = clause_fetcher__mem_in__rdy;
  assign fetcher_mem_out__en = clause_fetcher__mem_out__en;
  assign fetcher_mem_out__msg = clause_fetcher__mem_out__msg;
  assign clause_fetcher__mem_out__rdy = fetcher_mem_out__rdy;

endmodule


// PyMTL Component Clause Definition
// At /home/sjq/git/pymtl_project/satacc/clause/clause.py
module Clause__index_3
(
  input  logic [0:0]    clk,
  output logic [0:0]    conf,
  input  logic [0:0]    reset,
  input  logic [0:0]    cr_recv__en,
  input  logic [31:0]   cr_recv__msg,
  output logic [0:0]    cr_recv__rdy,
  input  logic [0:0]    fetcher_mem_in__en,
  input  logic [80:0]   fetcher_mem_in__msg,
  output logic [0:0]    fetcher_mem_in__rdy,
  output logic [0:0]    fetcher_mem_out__en,
  output logic [152:0]  fetcher_mem_out__msg,
  input  logic [0:0]    fetcher_mem_out__rdy,
  input  logic [0:0]    size_mem_recv__en,
  input  logic [47:0]   size_mem_recv__msg,
  output logic [0:0]    size_mem_recv__rdy,
  output logic [0:0]    size_mem_send__en,
  output logic [109:0]  size_mem_send__msg,
  input  logic [0:0]    size_mem_send__rdy,
  output logic [0:0]    to_trail__en,
  output logic [31:0]   to_trail__msg,
  input  logic [0:0]    to_trail__rdy,
  input  logic [0:0]    value_mem_recv__en,
  input  logic [16:0]   value_mem_recv__msg,
  output logic [0:0]    value_mem_recv__rdy,
  output logic [0:0]    value_mem_send__en,
  output logic [78:0]   value_mem_send__msg,
  input  logic [0:0]    value_mem_send__rdy
);
  // Sub-component declarations
  logic [0:0]    clause_fetcher__clk;
  logic [0:0]    clause_fetcher__reset;
  logic [0:0]    clause_fetcher__addr_recv__en;
  logic [63:0]   clause_fetcher__addr_recv__msg;
  logic [0:0]    clause_fetcher__addr_recv__rdy;
  logic [0:0]    clause_fetcher__data_out__en;
  logic [31:0]   clause_fetcher__data_out__msg;
  logic [0:0]    clause_fetcher__data_out__rdy;
  logic [0:0]    clause_fetcher__mem_in__en;
  logic [80:0]   clause_fetcher__mem_in__msg;
  logic [0:0]    clause_fetcher__mem_in__rdy;
  logic [0:0]    clause_fetcher__mem_out__en;
  logic [152:0]  clause_fetcher__mem_out__msg;
  logic [0:0]    clause_fetcher__mem_out__rdy;
  logic [0:0]    clause_fetcher__size_recv__en;
  logic [31:0]   clause_fetcher__size_recv__msg;
  logic [0:0]    clause_fetcher__size_recv__rdy;

  Sized_memory_sender_in_order__f102ad27562d9009 clause_fetcher
  (
    .clk            (    clause_fetcher__clk    ),
    .reset          (   clause_fetcher__reset   ),
    .addr_recv__en  ( clause_fetcher__addr_recv__en ),
    .addr_recv__msg ( clause_fetcher__addr_recv__msg ),
    .addr_recv__rdy ( clause_fetcher__addr_recv__rdy ),
    .data_out__en   ( clause_fetcher__data_out__en ),
    .data_out__msg  ( clause_fetcher__data_out__msg ),
    .data_out__rdy  ( clause_fetcher__data_out__rdy ),
    .mem_in__en     ( clause_fetcher__mem_in__en ),
    .mem_in__msg    ( clause_fetcher__mem_in__msg ),
    .mem_in__rdy    ( clause_fetcher__mem_in__rdy ),
    .mem_out__en    ( clause_fetcher__mem_out__en ),
    .mem_out__msg   ( clause_fetcher__mem_out__msg ),
    .mem_out__rdy   ( clause_fetcher__mem_out__rdy ),
    .size_recv__en  ( clause_fetcher__size_recv__en ),
    .size_recv__msg ( clause_fetcher__size_recv__msg ),
    .size_recv__rdy ( clause_fetcher__size_recv__rdy )
  );

  logic [0:0]    clause_lit_queue__clk;
  logic [3:0]    clause_lit_queue__count;
  logic [0:0]    clause_lit_queue__reset;
  logic [0:0]    clause_lit_queue__deq__en;
  logic [0:0]    clause_lit_queue__deq__rdy;
  logic [31:0]   clause_lit_queue__deq__ret;
  logic [0:0]    clause_lit_queue__enq__en;
  logic [31:0]   clause_lit_queue__enq__msg;
  logic [0:0]    clause_lit_queue__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_8 clause_lit_queue
  (
    .clk            (   clause_lit_queue__clk   ),
    .count          (  clause_lit_queue__count  ),
    .reset          (  clause_lit_queue__reset  ),
    .deq__en        ( clause_lit_queue__deq__en ),
    .deq__rdy       ( clause_lit_queue__deq__rdy ),
    .deq__ret       ( clause_lit_queue__deq__ret ),
    .enq__en        ( clause_lit_queue__enq__en ),
    .enq__msg       ( clause_lit_queue__enq__msg ),
    .enq__rdy       ( clause_lit_queue__enq__rdy )
  );

  logic [0:0]    clause_lit_with_value__clk;
  logic [3:0]    clause_lit_with_value__count;
  logic [0:0]    clause_lit_with_value__reset;
  logic [0:0]    clause_lit_with_value__deq__en;
  logic [0:0]    clause_lit_with_value__deq__rdy;
  logic [33:0]   clause_lit_with_value__deq__ret;
  logic [0:0]    clause_lit_with_value__enq__en;
  logic [33:0]   clause_lit_with_value__enq__msg;
  logic [0:0]    clause_lit_with_value__enq__rdy;

  PipeQueueRTL__EntryType_Bits34__num_entries_8 clause_lit_with_value
  (
    .clk            ( clause_lit_with_value__clk ),
    .count          ( clause_lit_with_value__count ),
    .reset          ( clause_lit_with_value__reset ),
    .deq__en        ( clause_lit_with_value__deq__en ),
    .deq__rdy       ( clause_lit_with_value__deq__rdy ),
    .deq__ret       ( clause_lit_with_value__deq__ret ),
    .enq__en        ( clause_lit_with_value__enq__en ),
    .enq__msg       ( clause_lit_with_value__enq__msg ),
    .enq__rdy       ( clause_lit_with_value__enq__rdy )
  );

  logic [0:0]    clause_process_fsm__clk;
  logic [0:0]    clause_process_fsm__conflict;
  logic [0:0]    clause_process_fsm__reset;
  logic [0:0]    clause_process_fsm__generated_send__en;
  logic [31:0]   clause_process_fsm__generated_send__msg;
  logic [0:0]    clause_process_fsm__generated_send__rdy;
  logic [0:0]    clause_process_fsm__value_recv__en;
  logic [33:0]   clause_process_fsm__value_recv__msg;
  logic [0:0]    clause_process_fsm__value_recv__rdy;

  Clause_fsm_noparam clause_process_fsm
  (
    .clk            (  clause_process_fsm__clk  ),
    .conflict       ( clause_process_fsm__conflict ),
    .reset          ( clause_process_fsm__reset ),
    .generated_send__en( clause_process_fsm__generated_send__en ),
    .generated_send__msg( clause_process_fsm__generated_send__msg ),
    .generated_send__rdy( clause_process_fsm__generated_send__rdy ),
    .value_recv__en ( clause_process_fsm__value_recv__en ),
    .value_recv__msg( clause_process_fsm__value_recv__msg ),
    .value_recv__rdy( clause_process_fsm__value_recv__rdy )
  );

  logic [0:0]    cr_q__clk;
  logic [2:0]    cr_q__count;
  logic [0:0]    cr_q__reset;
  logic [0:0]    cr_q__deq__en;
  logic [0:0]    cr_q__deq__rdy;
  logic [31:0]   cr_q__deq__ret;
  logic [0:0]    cr_q__enq__en;
  logic [31:0]   cr_q__enq__msg;
  logic [0:0]    cr_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_4 cr_q
  (
    .clk            (         cr_q__clk         ),
    .count          (        cr_q__count        ),
    .reset          (        cr_q__reset        ),
    .deq__en        (       cr_q__deq__en       ),
    .deq__rdy       (       cr_q__deq__rdy      ),
    .deq__ret       (       cr_q__deq__ret      ),
    .enq__en        (       cr_q__enq__en       ),
    .enq__msg       (       cr_q__enq__msg      ),
    .enq__rdy       (       cr_q__enq__rdy      )
  );

  logic [0:0]    size_addr_q__clk;
  logic [3:0]    size_addr_q__count;
  logic [0:0]    size_addr_q__reset;
  logic [0:0]    size_addr_q__deq__en;
  logic [0:0]    size_addr_q__deq__rdy;
  logic [95:0]   size_addr_q__deq__ret;
  logic [0:0]    size_addr_q__enq__en;
  logic [95:0]   size_addr_q__enq__msg;
  logic [0:0]    size_addr_q__enq__rdy;

  PipeQueueRTL__EntryType_Bits96__num_entries_8 size_addr_q
  (
    .clk            (      size_addr_q__clk     ),
    .count          (     size_addr_q__count    ),
    .reset          (     size_addr_q__reset    ),
    .deq__en        (    size_addr_q__deq__en   ),
    .deq__rdy       (   size_addr_q__deq__rdy   ),
    .deq__ret       (   size_addr_q__deq__ret   ),
    .enq__en        (    size_addr_q__enq__en   ),
    .enq__msg       (   size_addr_q__enq__msg   ),
    .enq__rdy       (   size_addr_q__enq__rdy   )
  );

  logic [0:0]    temp_cr_addr__clk;
  logic [0:0]    temp_cr_addr__count;
  logic [0:0]    temp_cr_addr__reset;
  logic [0:0]    temp_cr_addr__deq__en;
  logic [0:0]    temp_cr_addr__deq__rdy;
  logic [63:0]   temp_cr_addr__deq__ret;
  logic [0:0]    temp_cr_addr__enq__en;
  logic [63:0]   temp_cr_addr__enq__msg;
  logic [0:0]    temp_cr_addr__enq__rdy;

  BypassQueueRTL__EntryType_Bits64__num_entries_1 temp_cr_addr
  (
    .clk            (     temp_cr_addr__clk     ),
    .count          (    temp_cr_addr__count    ),
    .reset          (    temp_cr_addr__reset    ),
    .deq__en        (   temp_cr_addr__deq__en   ),
    .deq__rdy       (   temp_cr_addr__deq__rdy  ),
    .deq__ret       (   temp_cr_addr__deq__ret  ),
    .enq__en        (   temp_cr_addr__enq__en   ),
    .enq__msg       (   temp_cr_addr__enq__msg  ),
    .enq__rdy       (   temp_cr_addr__enq__rdy  )
  );

  logic [0:0]    temp_cr_size__clk;
  logic [0:0]    temp_cr_size__count;
  logic [0:0]    temp_cr_size__reset;
  logic [0:0]    temp_cr_size__deq__en;
  logic [0:0]    temp_cr_size__deq__rdy;
  logic [31:0]   temp_cr_size__deq__ret;
  logic [0:0]    temp_cr_size__enq__en;
  logic [31:0]   temp_cr_size__enq__msg;
  logic [0:0]    temp_cr_size__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_cr_size
  (
    .clk            (     temp_cr_size__clk     ),
    .count          (    temp_cr_size__count    ),
    .reset          (    temp_cr_size__reset    ),
    .deq__en        (   temp_cr_size__deq__en   ),
    .deq__rdy       (   temp_cr_size__deq__rdy  ),
    .deq__ret       (   temp_cr_size__deq__ret  ),
    .enq__en        (   temp_cr_size__enq__en   ),
    .enq__msg       (   temp_cr_size__enq__msg  ),
    .enq__rdy       (   temp_cr_size__enq__rdy  )
  );

  logic [0:0]    temp_lit__clk;
  logic [0:0]    temp_lit__count;
  logic [0:0]    temp_lit__reset;
  logic [0:0]    temp_lit__deq__en;
  logic [0:0]    temp_lit__deq__rdy;
  logic [31:0]   temp_lit__deq__ret;
  logic [0:0]    temp_lit__enq__en;
  logic [31:0]   temp_lit__enq__msg;
  logic [0:0]    temp_lit__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_lit
  (
    .clk            (       temp_lit__clk       ),
    .count          (      temp_lit__count      ),
    .reset          (      temp_lit__reset      ),
    .deq__en        (     temp_lit__deq__en     ),
    .deq__rdy       (     temp_lit__deq__rdy    ),
    .deq__ret       (     temp_lit__deq__ret    ),
    .enq__en        (     temp_lit__enq__en     ),
    .enq__msg       (     temp_lit__enq__msg    ),
    .enq__rdy       (     temp_lit__enq__rdy    )
  );

  logic [0:0]    temp_value__clk;
  logic [0:0]    temp_value__count;
  logic [0:0]    temp_value__reset;
  logic [0:0]    temp_value__deq__en;
  logic [0:0]    temp_value__deq__rdy;
  logic [1:0]    temp_value__deq__ret;
  logic [0:0]    temp_value__enq__en;
  logic [1:0]    temp_value__enq__msg;
  logic [0:0]    temp_value__enq__rdy;

  BypassQueueRTL__EntryType_Bits2__num_entries_1 temp_value
  (
    .clk            (      temp_value__clk      ),
    .count          (     temp_value__count     ),
    .reset          (     temp_value__reset     ),
    .deq__en        (    temp_value__deq__en    ),
    .deq__rdy       (    temp_value__deq__rdy   ),
    .deq__ret       (    temp_value__deq__ret   ),
    .enq__en        (    temp_value__enq__en    ),
    .enq__msg       (    temp_value__enq__msg   ),
    .enq__rdy       (    temp_value__enq__rdy   )
  );

  // Temporary wire definitions
  logic [109:0]  __tmpvar__comb_msg;

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/clause/clause.py:64
  //   @update
  //   def comb():
  //       s.value_mem_recv.rdy@=s.temp_value.enq.rdy
  //       s.size_mem_send.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       s.cr_q.deq.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       s.temp_cr_size.enq.en@=s.temp_cr_addr.enq.rdy & s.size_mem_recv.en
  //       s.size_mem_recv.rdy@=s.temp_cr_size.enq.rdy
  //       s.temp_cr_addr.enq.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       msg = Bits110()
  // 
  //       s.size_mem_send.msg@=msg
  //       s.temp_cr_size.enq.msg@=s.size_mem_recv.msg[48-32:48]
  //       # TODO: the real addr can be calculated immediately
  //       s.temp_cr_addr.enq.msg@=concat(Bits32(0), s.cr_q.deq.ret)
  // 
  //       s.size_addr_q.enq.en@=s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.temp_cr_size.deq.en@= s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.temp_cr_addr.deq.en@= s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.size_addr_q.enq.msg@=concat(s.temp_cr_size.deq.ret,
  //                                     s.temp_cr_addr.deq.ret)
  //       s.clause_fetcher.size_recv.en@=s.clause_fetcher.size_recv.rdy & s.size_addr_q.deq.rdy
  //       s.clause_fetcher.addr_recv.en@=s.clause_fetcher.addr_recv.rdy & s.size_addr_q.deq.rdy
  //       s.size_addr_q.deq.en@=s.clause_fetcher.size_recv.rdy & s.clause_fetcher.addr_recv.rdy & s.size_addr_q.deq.rdy
  //       s.clause_fetcher.size_recv.msg@=s.size_addr_q.deq.ret[0:32]
  //       s.clause_fetcher.addr_recv.msg@=s.size_addr_q.deq.ret[32:96]
  //       #
  //       s.value_mem_send.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  //       s.clause_lit_queue.deq.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  //       s.temp_value.enq.en@=s.temp_lit.enq.rdy & s.size_mem_recv.en
  //       s.size_mem_recv.rdy@=s.temp_value.enq.rdy
  //       s.temp_lit.enq.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  // 
  //       s.value_mem_send.msg@=concat(Bits12(0), Bits32(
  //           0), s.clause_lit_queue.deq.ret, Bits3(0))
  // 
  //       s.temp_value.enq.msg@=s.value_mem_recv.msg[17-2:17]
  //       # TODO: the real addr can be calculated immediately
  //       s.temp_lit.enq.msg@= s.clause_lit_queue.deq.ret
  // 
  //       s.clause_lit_with_value.enq.en@=s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  //       s.temp_value.deq.en@= s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  //       s.temp_lit.deq.en@= s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  // 
  //       s.clause_lit_with_value.enq.msg@=concat(
  //           s.temp_lit.deq.ret, s.temp_value.deq.ret)
  // 
  //       s.clause_lit_with_value.deq.en@=s.clause_lit_with_value.deq.rdy & s.clause_process_fsm.value_recv.rdy
  //       s.clause_process_fsm.value_recv.en@=s.clause_lit_with_value.deq.rdy & s.clause_process_fsm.value_recv.rdy
  
  always_comb begin : comb
    value_mem_recv__rdy = temp_value__enq__rdy;
    size_mem_send__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    cr_q__deq__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    temp_cr_size__enq__en = temp_cr_addr__enq__rdy & size_mem_recv__en;
    size_mem_recv__rdy = temp_cr_size__enq__rdy;
    temp_cr_addr__enq__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    __tmpvar__comb_msg = 110'd0;
    size_mem_send__msg = __tmpvar__comb_msg;
    temp_cr_size__enq__msg = size_mem_recv__msg[6'd47:6'd48 - 6'd32];
    temp_cr_addr__enq__msg = { 32'd0, cr_q__deq__ret };
    size_addr_q__enq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    temp_cr_size__deq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    temp_cr_addr__deq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    size_addr_q__enq__msg = { temp_cr_size__deq__ret, temp_cr_addr__deq__ret };
    clause_fetcher__size_recv__en = clause_fetcher__size_recv__rdy & size_addr_q__deq__rdy;
    clause_fetcher__addr_recv__en = clause_fetcher__addr_recv__rdy & size_addr_q__deq__rdy;
    size_addr_q__deq__en = ( clause_fetcher__size_recv__rdy & clause_fetcher__addr_recv__rdy ) & size_addr_q__deq__rdy;
    clause_fetcher__size_recv__msg = size_addr_q__deq__ret[7'd31:7'd0];
    clause_fetcher__addr_recv__msg = size_addr_q__deq__ret[7'd95:7'd32];
    value_mem_send__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    clause_lit_queue__deq__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    temp_value__enq__en = temp_lit__enq__rdy & size_mem_recv__en;
    size_mem_recv__rdy = temp_value__enq__rdy;
    temp_lit__enq__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    value_mem_send__msg = { 12'd0, 32'd0, clause_lit_queue__deq__ret, 3'd0 };
    temp_value__enq__msg = value_mem_recv__msg[5'd16:5'd17 - 5'd2];
    temp_lit__enq__msg = clause_lit_queue__deq__ret;
    clause_lit_with_value__enq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    temp_value__deq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    temp_lit__deq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    clause_lit_with_value__enq__msg = { temp_lit__deq__ret, temp_value__deq__ret };
    clause_lit_with_value__deq__en = clause_lit_with_value__deq__rdy & clause_process_fsm__value_recv__rdy;
    clause_process_fsm__value_recv__en = clause_lit_with_value__deq__rdy & clause_process_fsm__value_recv__rdy;
  end

  // Connections
  assign cr_q__clk = clk;
  assign cr_q__reset = reset;
  assign size_addr_q__clk = clk;
  assign size_addr_q__reset = reset;
  assign clause_fetcher__clk = clk;
  assign clause_fetcher__reset = reset;
  assign clause_lit_queue__clk = clk;
  assign clause_lit_queue__reset = reset;
  assign clause_lit_with_value__clk = clk;
  assign clause_lit_with_value__reset = reset;
  assign clause_process_fsm__clk = clk;
  assign clause_process_fsm__reset = reset;
  assign temp_cr_size__clk = clk;
  assign temp_cr_size__reset = reset;
  assign temp_cr_addr__clk = clk;
  assign temp_cr_addr__reset = reset;
  assign cr_q__enq__en = cr_recv__en;
  assign cr_q__enq__msg = cr_recv__msg;
  assign cr_recv__rdy = cr_q__enq__rdy;
  assign clause_lit_queue__enq__en = clause_fetcher__data_out__en;
  assign clause_lit_queue__enq__msg = clause_fetcher__data_out__msg;
  assign clause_fetcher__data_out__rdy = clause_lit_queue__enq__rdy;
  assign to_trail__en = clause_process_fsm__generated_send__en;
  assign to_trail__msg = clause_process_fsm__generated_send__msg;
  assign clause_process_fsm__generated_send__rdy = to_trail__rdy;
  assign conf = clause_process_fsm__conflict;
  assign temp_lit__clk = clk;
  assign temp_lit__reset = reset;
  assign temp_value__clk = clk;
  assign temp_value__reset = reset;
  assign clause_fetcher__mem_in__en = fetcher_mem_in__en;
  assign clause_fetcher__mem_in__msg = fetcher_mem_in__msg;
  assign fetcher_mem_in__rdy = clause_fetcher__mem_in__rdy;
  assign fetcher_mem_out__en = clause_fetcher__mem_out__en;
  assign fetcher_mem_out__msg = clause_fetcher__mem_out__msg;
  assign clause_fetcher__mem_out__rdy = fetcher_mem_out__rdy;

endmodule


// PyMTL Component Clause Definition
// At /home/sjq/git/pymtl_project/satacc/clause/clause.py
module Clause__index_4
(
  input  logic [0:0]    clk,
  output logic [0:0]    conf,
  input  logic [0:0]    reset,
  input  logic [0:0]    cr_recv__en,
  input  logic [31:0]   cr_recv__msg,
  output logic [0:0]    cr_recv__rdy,
  input  logic [0:0]    fetcher_mem_in__en,
  input  logic [80:0]   fetcher_mem_in__msg,
  output logic [0:0]    fetcher_mem_in__rdy,
  output logic [0:0]    fetcher_mem_out__en,
  output logic [152:0]  fetcher_mem_out__msg,
  input  logic [0:0]    fetcher_mem_out__rdy,
  input  logic [0:0]    size_mem_recv__en,
  input  logic [47:0]   size_mem_recv__msg,
  output logic [0:0]    size_mem_recv__rdy,
  output logic [0:0]    size_mem_send__en,
  output logic [109:0]  size_mem_send__msg,
  input  logic [0:0]    size_mem_send__rdy,
  output logic [0:0]    to_trail__en,
  output logic [31:0]   to_trail__msg,
  input  logic [0:0]    to_trail__rdy,
  input  logic [0:0]    value_mem_recv__en,
  input  logic [16:0]   value_mem_recv__msg,
  output logic [0:0]    value_mem_recv__rdy,
  output logic [0:0]    value_mem_send__en,
  output logic [78:0]   value_mem_send__msg,
  input  logic [0:0]    value_mem_send__rdy
);
  // Sub-component declarations
  logic [0:0]    clause_fetcher__clk;
  logic [0:0]    clause_fetcher__reset;
  logic [0:0]    clause_fetcher__addr_recv__en;
  logic [63:0]   clause_fetcher__addr_recv__msg;
  logic [0:0]    clause_fetcher__addr_recv__rdy;
  logic [0:0]    clause_fetcher__data_out__en;
  logic [31:0]   clause_fetcher__data_out__msg;
  logic [0:0]    clause_fetcher__data_out__rdy;
  logic [0:0]    clause_fetcher__mem_in__en;
  logic [80:0]   clause_fetcher__mem_in__msg;
  logic [0:0]    clause_fetcher__mem_in__rdy;
  logic [0:0]    clause_fetcher__mem_out__en;
  logic [152:0]  clause_fetcher__mem_out__msg;
  logic [0:0]    clause_fetcher__mem_out__rdy;
  logic [0:0]    clause_fetcher__size_recv__en;
  logic [31:0]   clause_fetcher__size_recv__msg;
  logic [0:0]    clause_fetcher__size_recv__rdy;

  Sized_memory_sender_in_order__f102ad27562d9009 clause_fetcher
  (
    .clk            (    clause_fetcher__clk    ),
    .reset          (   clause_fetcher__reset   ),
    .addr_recv__en  ( clause_fetcher__addr_recv__en ),
    .addr_recv__msg ( clause_fetcher__addr_recv__msg ),
    .addr_recv__rdy ( clause_fetcher__addr_recv__rdy ),
    .data_out__en   ( clause_fetcher__data_out__en ),
    .data_out__msg  ( clause_fetcher__data_out__msg ),
    .data_out__rdy  ( clause_fetcher__data_out__rdy ),
    .mem_in__en     ( clause_fetcher__mem_in__en ),
    .mem_in__msg    ( clause_fetcher__mem_in__msg ),
    .mem_in__rdy    ( clause_fetcher__mem_in__rdy ),
    .mem_out__en    ( clause_fetcher__mem_out__en ),
    .mem_out__msg   ( clause_fetcher__mem_out__msg ),
    .mem_out__rdy   ( clause_fetcher__mem_out__rdy ),
    .size_recv__en  ( clause_fetcher__size_recv__en ),
    .size_recv__msg ( clause_fetcher__size_recv__msg ),
    .size_recv__rdy ( clause_fetcher__size_recv__rdy )
  );

  logic [0:0]    clause_lit_queue__clk;
  logic [3:0]    clause_lit_queue__count;
  logic [0:0]    clause_lit_queue__reset;
  logic [0:0]    clause_lit_queue__deq__en;
  logic [0:0]    clause_lit_queue__deq__rdy;
  logic [31:0]   clause_lit_queue__deq__ret;
  logic [0:0]    clause_lit_queue__enq__en;
  logic [31:0]   clause_lit_queue__enq__msg;
  logic [0:0]    clause_lit_queue__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_8 clause_lit_queue
  (
    .clk            (   clause_lit_queue__clk   ),
    .count          (  clause_lit_queue__count  ),
    .reset          (  clause_lit_queue__reset  ),
    .deq__en        ( clause_lit_queue__deq__en ),
    .deq__rdy       ( clause_lit_queue__deq__rdy ),
    .deq__ret       ( clause_lit_queue__deq__ret ),
    .enq__en        ( clause_lit_queue__enq__en ),
    .enq__msg       ( clause_lit_queue__enq__msg ),
    .enq__rdy       ( clause_lit_queue__enq__rdy )
  );

  logic [0:0]    clause_lit_with_value__clk;
  logic [3:0]    clause_lit_with_value__count;
  logic [0:0]    clause_lit_with_value__reset;
  logic [0:0]    clause_lit_with_value__deq__en;
  logic [0:0]    clause_lit_with_value__deq__rdy;
  logic [33:0]   clause_lit_with_value__deq__ret;
  logic [0:0]    clause_lit_with_value__enq__en;
  logic [33:0]   clause_lit_with_value__enq__msg;
  logic [0:0]    clause_lit_with_value__enq__rdy;

  PipeQueueRTL__EntryType_Bits34__num_entries_8 clause_lit_with_value
  (
    .clk            ( clause_lit_with_value__clk ),
    .count          ( clause_lit_with_value__count ),
    .reset          ( clause_lit_with_value__reset ),
    .deq__en        ( clause_lit_with_value__deq__en ),
    .deq__rdy       ( clause_lit_with_value__deq__rdy ),
    .deq__ret       ( clause_lit_with_value__deq__ret ),
    .enq__en        ( clause_lit_with_value__enq__en ),
    .enq__msg       ( clause_lit_with_value__enq__msg ),
    .enq__rdy       ( clause_lit_with_value__enq__rdy )
  );

  logic [0:0]    clause_process_fsm__clk;
  logic [0:0]    clause_process_fsm__conflict;
  logic [0:0]    clause_process_fsm__reset;
  logic [0:0]    clause_process_fsm__generated_send__en;
  logic [31:0]   clause_process_fsm__generated_send__msg;
  logic [0:0]    clause_process_fsm__generated_send__rdy;
  logic [0:0]    clause_process_fsm__value_recv__en;
  logic [33:0]   clause_process_fsm__value_recv__msg;
  logic [0:0]    clause_process_fsm__value_recv__rdy;

  Clause_fsm_noparam clause_process_fsm
  (
    .clk            (  clause_process_fsm__clk  ),
    .conflict       ( clause_process_fsm__conflict ),
    .reset          ( clause_process_fsm__reset ),
    .generated_send__en( clause_process_fsm__generated_send__en ),
    .generated_send__msg( clause_process_fsm__generated_send__msg ),
    .generated_send__rdy( clause_process_fsm__generated_send__rdy ),
    .value_recv__en ( clause_process_fsm__value_recv__en ),
    .value_recv__msg( clause_process_fsm__value_recv__msg ),
    .value_recv__rdy( clause_process_fsm__value_recv__rdy )
  );

  logic [0:0]    cr_q__clk;
  logic [2:0]    cr_q__count;
  logic [0:0]    cr_q__reset;
  logic [0:0]    cr_q__deq__en;
  logic [0:0]    cr_q__deq__rdy;
  logic [31:0]   cr_q__deq__ret;
  logic [0:0]    cr_q__enq__en;
  logic [31:0]   cr_q__enq__msg;
  logic [0:0]    cr_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_4 cr_q
  (
    .clk            (         cr_q__clk         ),
    .count          (        cr_q__count        ),
    .reset          (        cr_q__reset        ),
    .deq__en        (       cr_q__deq__en       ),
    .deq__rdy       (       cr_q__deq__rdy      ),
    .deq__ret       (       cr_q__deq__ret      ),
    .enq__en        (       cr_q__enq__en       ),
    .enq__msg       (       cr_q__enq__msg      ),
    .enq__rdy       (       cr_q__enq__rdy      )
  );

  logic [0:0]    size_addr_q__clk;
  logic [3:0]    size_addr_q__count;
  logic [0:0]    size_addr_q__reset;
  logic [0:0]    size_addr_q__deq__en;
  logic [0:0]    size_addr_q__deq__rdy;
  logic [95:0]   size_addr_q__deq__ret;
  logic [0:0]    size_addr_q__enq__en;
  logic [95:0]   size_addr_q__enq__msg;
  logic [0:0]    size_addr_q__enq__rdy;

  PipeQueueRTL__EntryType_Bits96__num_entries_8 size_addr_q
  (
    .clk            (      size_addr_q__clk     ),
    .count          (     size_addr_q__count    ),
    .reset          (     size_addr_q__reset    ),
    .deq__en        (    size_addr_q__deq__en   ),
    .deq__rdy       (   size_addr_q__deq__rdy   ),
    .deq__ret       (   size_addr_q__deq__ret   ),
    .enq__en        (    size_addr_q__enq__en   ),
    .enq__msg       (   size_addr_q__enq__msg   ),
    .enq__rdy       (   size_addr_q__enq__rdy   )
  );

  logic [0:0]    temp_cr_addr__clk;
  logic [0:0]    temp_cr_addr__count;
  logic [0:0]    temp_cr_addr__reset;
  logic [0:0]    temp_cr_addr__deq__en;
  logic [0:0]    temp_cr_addr__deq__rdy;
  logic [63:0]   temp_cr_addr__deq__ret;
  logic [0:0]    temp_cr_addr__enq__en;
  logic [63:0]   temp_cr_addr__enq__msg;
  logic [0:0]    temp_cr_addr__enq__rdy;

  BypassQueueRTL__EntryType_Bits64__num_entries_1 temp_cr_addr
  (
    .clk            (     temp_cr_addr__clk     ),
    .count          (    temp_cr_addr__count    ),
    .reset          (    temp_cr_addr__reset    ),
    .deq__en        (   temp_cr_addr__deq__en   ),
    .deq__rdy       (   temp_cr_addr__deq__rdy  ),
    .deq__ret       (   temp_cr_addr__deq__ret  ),
    .enq__en        (   temp_cr_addr__enq__en   ),
    .enq__msg       (   temp_cr_addr__enq__msg  ),
    .enq__rdy       (   temp_cr_addr__enq__rdy  )
  );

  logic [0:0]    temp_cr_size__clk;
  logic [0:0]    temp_cr_size__count;
  logic [0:0]    temp_cr_size__reset;
  logic [0:0]    temp_cr_size__deq__en;
  logic [0:0]    temp_cr_size__deq__rdy;
  logic [31:0]   temp_cr_size__deq__ret;
  logic [0:0]    temp_cr_size__enq__en;
  logic [31:0]   temp_cr_size__enq__msg;
  logic [0:0]    temp_cr_size__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_cr_size
  (
    .clk            (     temp_cr_size__clk     ),
    .count          (    temp_cr_size__count    ),
    .reset          (    temp_cr_size__reset    ),
    .deq__en        (   temp_cr_size__deq__en   ),
    .deq__rdy       (   temp_cr_size__deq__rdy  ),
    .deq__ret       (   temp_cr_size__deq__ret  ),
    .enq__en        (   temp_cr_size__enq__en   ),
    .enq__msg       (   temp_cr_size__enq__msg  ),
    .enq__rdy       (   temp_cr_size__enq__rdy  )
  );

  logic [0:0]    temp_lit__clk;
  logic [0:0]    temp_lit__count;
  logic [0:0]    temp_lit__reset;
  logic [0:0]    temp_lit__deq__en;
  logic [0:0]    temp_lit__deq__rdy;
  logic [31:0]   temp_lit__deq__ret;
  logic [0:0]    temp_lit__enq__en;
  logic [31:0]   temp_lit__enq__msg;
  logic [0:0]    temp_lit__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_lit
  (
    .clk            (       temp_lit__clk       ),
    .count          (      temp_lit__count      ),
    .reset          (      temp_lit__reset      ),
    .deq__en        (     temp_lit__deq__en     ),
    .deq__rdy       (     temp_lit__deq__rdy    ),
    .deq__ret       (     temp_lit__deq__ret    ),
    .enq__en        (     temp_lit__enq__en     ),
    .enq__msg       (     temp_lit__enq__msg    ),
    .enq__rdy       (     temp_lit__enq__rdy    )
  );

  logic [0:0]    temp_value__clk;
  logic [0:0]    temp_value__count;
  logic [0:0]    temp_value__reset;
  logic [0:0]    temp_value__deq__en;
  logic [0:0]    temp_value__deq__rdy;
  logic [1:0]    temp_value__deq__ret;
  logic [0:0]    temp_value__enq__en;
  logic [1:0]    temp_value__enq__msg;
  logic [0:0]    temp_value__enq__rdy;

  BypassQueueRTL__EntryType_Bits2__num_entries_1 temp_value
  (
    .clk            (      temp_value__clk      ),
    .count          (     temp_value__count     ),
    .reset          (     temp_value__reset     ),
    .deq__en        (    temp_value__deq__en    ),
    .deq__rdy       (    temp_value__deq__rdy   ),
    .deq__ret       (    temp_value__deq__ret   ),
    .enq__en        (    temp_value__enq__en    ),
    .enq__msg       (    temp_value__enq__msg   ),
    .enq__rdy       (    temp_value__enq__rdy   )
  );

  // Temporary wire definitions
  logic [109:0]  __tmpvar__comb_msg;

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/clause/clause.py:64
  //   @update
  //   def comb():
  //       s.value_mem_recv.rdy@=s.temp_value.enq.rdy
  //       s.size_mem_send.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       s.cr_q.deq.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       s.temp_cr_size.enq.en@=s.temp_cr_addr.enq.rdy & s.size_mem_recv.en
  //       s.size_mem_recv.rdy@=s.temp_cr_size.enq.rdy
  //       s.temp_cr_addr.enq.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       msg = Bits110()
  // 
  //       s.size_mem_send.msg@=msg
  //       s.temp_cr_size.enq.msg@=s.size_mem_recv.msg[48-32:48]
  //       # TODO: the real addr can be calculated immediately
  //       s.temp_cr_addr.enq.msg@=concat(Bits32(0), s.cr_q.deq.ret)
  // 
  //       s.size_addr_q.enq.en@=s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.temp_cr_size.deq.en@= s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.temp_cr_addr.deq.en@= s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.size_addr_q.enq.msg@=concat(s.temp_cr_size.deq.ret,
  //                                     s.temp_cr_addr.deq.ret)
  //       s.clause_fetcher.size_recv.en@=s.clause_fetcher.size_recv.rdy & s.size_addr_q.deq.rdy
  //       s.clause_fetcher.addr_recv.en@=s.clause_fetcher.addr_recv.rdy & s.size_addr_q.deq.rdy
  //       s.size_addr_q.deq.en@=s.clause_fetcher.size_recv.rdy & s.clause_fetcher.addr_recv.rdy & s.size_addr_q.deq.rdy
  //       s.clause_fetcher.size_recv.msg@=s.size_addr_q.deq.ret[0:32]
  //       s.clause_fetcher.addr_recv.msg@=s.size_addr_q.deq.ret[32:96]
  //       #
  //       s.value_mem_send.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  //       s.clause_lit_queue.deq.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  //       s.temp_value.enq.en@=s.temp_lit.enq.rdy & s.size_mem_recv.en
  //       s.size_mem_recv.rdy@=s.temp_value.enq.rdy
  //       s.temp_lit.enq.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  // 
  //       s.value_mem_send.msg@=concat(Bits12(0), Bits32(
  //           0), s.clause_lit_queue.deq.ret, Bits3(0))
  // 
  //       s.temp_value.enq.msg@=s.value_mem_recv.msg[17-2:17]
  //       # TODO: the real addr can be calculated immediately
  //       s.temp_lit.enq.msg@= s.clause_lit_queue.deq.ret
  // 
  //       s.clause_lit_with_value.enq.en@=s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  //       s.temp_value.deq.en@= s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  //       s.temp_lit.deq.en@= s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  // 
  //       s.clause_lit_with_value.enq.msg@=concat(
  //           s.temp_lit.deq.ret, s.temp_value.deq.ret)
  // 
  //       s.clause_lit_with_value.deq.en@=s.clause_lit_with_value.deq.rdy & s.clause_process_fsm.value_recv.rdy
  //       s.clause_process_fsm.value_recv.en@=s.clause_lit_with_value.deq.rdy & s.clause_process_fsm.value_recv.rdy
  
  always_comb begin : comb
    value_mem_recv__rdy = temp_value__enq__rdy;
    size_mem_send__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    cr_q__deq__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    temp_cr_size__enq__en = temp_cr_addr__enq__rdy & size_mem_recv__en;
    size_mem_recv__rdy = temp_cr_size__enq__rdy;
    temp_cr_addr__enq__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    __tmpvar__comb_msg = 110'd0;
    size_mem_send__msg = __tmpvar__comb_msg;
    temp_cr_size__enq__msg = size_mem_recv__msg[6'd47:6'd48 - 6'd32];
    temp_cr_addr__enq__msg = { 32'd0, cr_q__deq__ret };
    size_addr_q__enq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    temp_cr_size__deq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    temp_cr_addr__deq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    size_addr_q__enq__msg = { temp_cr_size__deq__ret, temp_cr_addr__deq__ret };
    clause_fetcher__size_recv__en = clause_fetcher__size_recv__rdy & size_addr_q__deq__rdy;
    clause_fetcher__addr_recv__en = clause_fetcher__addr_recv__rdy & size_addr_q__deq__rdy;
    size_addr_q__deq__en = ( clause_fetcher__size_recv__rdy & clause_fetcher__addr_recv__rdy ) & size_addr_q__deq__rdy;
    clause_fetcher__size_recv__msg = size_addr_q__deq__ret[7'd31:7'd0];
    clause_fetcher__addr_recv__msg = size_addr_q__deq__ret[7'd95:7'd32];
    value_mem_send__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    clause_lit_queue__deq__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    temp_value__enq__en = temp_lit__enq__rdy & size_mem_recv__en;
    size_mem_recv__rdy = temp_value__enq__rdy;
    temp_lit__enq__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    value_mem_send__msg = { 12'd0, 32'd0, clause_lit_queue__deq__ret, 3'd0 };
    temp_value__enq__msg = value_mem_recv__msg[5'd16:5'd17 - 5'd2];
    temp_lit__enq__msg = clause_lit_queue__deq__ret;
    clause_lit_with_value__enq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    temp_value__deq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    temp_lit__deq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    clause_lit_with_value__enq__msg = { temp_lit__deq__ret, temp_value__deq__ret };
    clause_lit_with_value__deq__en = clause_lit_with_value__deq__rdy & clause_process_fsm__value_recv__rdy;
    clause_process_fsm__value_recv__en = clause_lit_with_value__deq__rdy & clause_process_fsm__value_recv__rdy;
  end

  // Connections
  assign cr_q__clk = clk;
  assign cr_q__reset = reset;
  assign size_addr_q__clk = clk;
  assign size_addr_q__reset = reset;
  assign clause_fetcher__clk = clk;
  assign clause_fetcher__reset = reset;
  assign clause_lit_queue__clk = clk;
  assign clause_lit_queue__reset = reset;
  assign clause_lit_with_value__clk = clk;
  assign clause_lit_with_value__reset = reset;
  assign clause_process_fsm__clk = clk;
  assign clause_process_fsm__reset = reset;
  assign temp_cr_size__clk = clk;
  assign temp_cr_size__reset = reset;
  assign temp_cr_addr__clk = clk;
  assign temp_cr_addr__reset = reset;
  assign cr_q__enq__en = cr_recv__en;
  assign cr_q__enq__msg = cr_recv__msg;
  assign cr_recv__rdy = cr_q__enq__rdy;
  assign clause_lit_queue__enq__en = clause_fetcher__data_out__en;
  assign clause_lit_queue__enq__msg = clause_fetcher__data_out__msg;
  assign clause_fetcher__data_out__rdy = clause_lit_queue__enq__rdy;
  assign to_trail__en = clause_process_fsm__generated_send__en;
  assign to_trail__msg = clause_process_fsm__generated_send__msg;
  assign clause_process_fsm__generated_send__rdy = to_trail__rdy;
  assign conf = clause_process_fsm__conflict;
  assign temp_lit__clk = clk;
  assign temp_lit__reset = reset;
  assign temp_value__clk = clk;
  assign temp_value__reset = reset;
  assign clause_fetcher__mem_in__en = fetcher_mem_in__en;
  assign clause_fetcher__mem_in__msg = fetcher_mem_in__msg;
  assign fetcher_mem_in__rdy = clause_fetcher__mem_in__rdy;
  assign fetcher_mem_out__en = clause_fetcher__mem_out__en;
  assign fetcher_mem_out__msg = clause_fetcher__mem_out__msg;
  assign clause_fetcher__mem_out__rdy = fetcher_mem_out__rdy;

endmodule


// PyMTL Component Clause Definition
// At /home/sjq/git/pymtl_project/satacc/clause/clause.py
module Clause__index_5
(
  input  logic [0:0]    clk,
  output logic [0:0]    conf,
  input  logic [0:0]    reset,
  input  logic [0:0]    cr_recv__en,
  input  logic [31:0]   cr_recv__msg,
  output logic [0:0]    cr_recv__rdy,
  input  logic [0:0]    fetcher_mem_in__en,
  input  logic [80:0]   fetcher_mem_in__msg,
  output logic [0:0]    fetcher_mem_in__rdy,
  output logic [0:0]    fetcher_mem_out__en,
  output logic [152:0]  fetcher_mem_out__msg,
  input  logic [0:0]    fetcher_mem_out__rdy,
  input  logic [0:0]    size_mem_recv__en,
  input  logic [47:0]   size_mem_recv__msg,
  output logic [0:0]    size_mem_recv__rdy,
  output logic [0:0]    size_mem_send__en,
  output logic [109:0]  size_mem_send__msg,
  input  logic [0:0]    size_mem_send__rdy,
  output logic [0:0]    to_trail__en,
  output logic [31:0]   to_trail__msg,
  input  logic [0:0]    to_trail__rdy,
  input  logic [0:0]    value_mem_recv__en,
  input  logic [16:0]   value_mem_recv__msg,
  output logic [0:0]    value_mem_recv__rdy,
  output logic [0:0]    value_mem_send__en,
  output logic [78:0]   value_mem_send__msg,
  input  logic [0:0]    value_mem_send__rdy
);
  // Sub-component declarations
  logic [0:0]    clause_fetcher__clk;
  logic [0:0]    clause_fetcher__reset;
  logic [0:0]    clause_fetcher__addr_recv__en;
  logic [63:0]   clause_fetcher__addr_recv__msg;
  logic [0:0]    clause_fetcher__addr_recv__rdy;
  logic [0:0]    clause_fetcher__data_out__en;
  logic [31:0]   clause_fetcher__data_out__msg;
  logic [0:0]    clause_fetcher__data_out__rdy;
  logic [0:0]    clause_fetcher__mem_in__en;
  logic [80:0]   clause_fetcher__mem_in__msg;
  logic [0:0]    clause_fetcher__mem_in__rdy;
  logic [0:0]    clause_fetcher__mem_out__en;
  logic [152:0]  clause_fetcher__mem_out__msg;
  logic [0:0]    clause_fetcher__mem_out__rdy;
  logic [0:0]    clause_fetcher__size_recv__en;
  logic [31:0]   clause_fetcher__size_recv__msg;
  logic [0:0]    clause_fetcher__size_recv__rdy;

  Sized_memory_sender_in_order__f102ad27562d9009 clause_fetcher
  (
    .clk            (    clause_fetcher__clk    ),
    .reset          (   clause_fetcher__reset   ),
    .addr_recv__en  ( clause_fetcher__addr_recv__en ),
    .addr_recv__msg ( clause_fetcher__addr_recv__msg ),
    .addr_recv__rdy ( clause_fetcher__addr_recv__rdy ),
    .data_out__en   ( clause_fetcher__data_out__en ),
    .data_out__msg  ( clause_fetcher__data_out__msg ),
    .data_out__rdy  ( clause_fetcher__data_out__rdy ),
    .mem_in__en     ( clause_fetcher__mem_in__en ),
    .mem_in__msg    ( clause_fetcher__mem_in__msg ),
    .mem_in__rdy    ( clause_fetcher__mem_in__rdy ),
    .mem_out__en    ( clause_fetcher__mem_out__en ),
    .mem_out__msg   ( clause_fetcher__mem_out__msg ),
    .mem_out__rdy   ( clause_fetcher__mem_out__rdy ),
    .size_recv__en  ( clause_fetcher__size_recv__en ),
    .size_recv__msg ( clause_fetcher__size_recv__msg ),
    .size_recv__rdy ( clause_fetcher__size_recv__rdy )
  );

  logic [0:0]    clause_lit_queue__clk;
  logic [3:0]    clause_lit_queue__count;
  logic [0:0]    clause_lit_queue__reset;
  logic [0:0]    clause_lit_queue__deq__en;
  logic [0:0]    clause_lit_queue__deq__rdy;
  logic [31:0]   clause_lit_queue__deq__ret;
  logic [0:0]    clause_lit_queue__enq__en;
  logic [31:0]   clause_lit_queue__enq__msg;
  logic [0:0]    clause_lit_queue__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_8 clause_lit_queue
  (
    .clk            (   clause_lit_queue__clk   ),
    .count          (  clause_lit_queue__count  ),
    .reset          (  clause_lit_queue__reset  ),
    .deq__en        ( clause_lit_queue__deq__en ),
    .deq__rdy       ( clause_lit_queue__deq__rdy ),
    .deq__ret       ( clause_lit_queue__deq__ret ),
    .enq__en        ( clause_lit_queue__enq__en ),
    .enq__msg       ( clause_lit_queue__enq__msg ),
    .enq__rdy       ( clause_lit_queue__enq__rdy )
  );

  logic [0:0]    clause_lit_with_value__clk;
  logic [3:0]    clause_lit_with_value__count;
  logic [0:0]    clause_lit_with_value__reset;
  logic [0:0]    clause_lit_with_value__deq__en;
  logic [0:0]    clause_lit_with_value__deq__rdy;
  logic [33:0]   clause_lit_with_value__deq__ret;
  logic [0:0]    clause_lit_with_value__enq__en;
  logic [33:0]   clause_lit_with_value__enq__msg;
  logic [0:0]    clause_lit_with_value__enq__rdy;

  PipeQueueRTL__EntryType_Bits34__num_entries_8 clause_lit_with_value
  (
    .clk            ( clause_lit_with_value__clk ),
    .count          ( clause_lit_with_value__count ),
    .reset          ( clause_lit_with_value__reset ),
    .deq__en        ( clause_lit_with_value__deq__en ),
    .deq__rdy       ( clause_lit_with_value__deq__rdy ),
    .deq__ret       ( clause_lit_with_value__deq__ret ),
    .enq__en        ( clause_lit_with_value__enq__en ),
    .enq__msg       ( clause_lit_with_value__enq__msg ),
    .enq__rdy       ( clause_lit_with_value__enq__rdy )
  );

  logic [0:0]    clause_process_fsm__clk;
  logic [0:0]    clause_process_fsm__conflict;
  logic [0:0]    clause_process_fsm__reset;
  logic [0:0]    clause_process_fsm__generated_send__en;
  logic [31:0]   clause_process_fsm__generated_send__msg;
  logic [0:0]    clause_process_fsm__generated_send__rdy;
  logic [0:0]    clause_process_fsm__value_recv__en;
  logic [33:0]   clause_process_fsm__value_recv__msg;
  logic [0:0]    clause_process_fsm__value_recv__rdy;

  Clause_fsm_noparam clause_process_fsm
  (
    .clk            (  clause_process_fsm__clk  ),
    .conflict       ( clause_process_fsm__conflict ),
    .reset          ( clause_process_fsm__reset ),
    .generated_send__en( clause_process_fsm__generated_send__en ),
    .generated_send__msg( clause_process_fsm__generated_send__msg ),
    .generated_send__rdy( clause_process_fsm__generated_send__rdy ),
    .value_recv__en ( clause_process_fsm__value_recv__en ),
    .value_recv__msg( clause_process_fsm__value_recv__msg ),
    .value_recv__rdy( clause_process_fsm__value_recv__rdy )
  );

  logic [0:0]    cr_q__clk;
  logic [2:0]    cr_q__count;
  logic [0:0]    cr_q__reset;
  logic [0:0]    cr_q__deq__en;
  logic [0:0]    cr_q__deq__rdy;
  logic [31:0]   cr_q__deq__ret;
  logic [0:0]    cr_q__enq__en;
  logic [31:0]   cr_q__enq__msg;
  logic [0:0]    cr_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_4 cr_q
  (
    .clk            (         cr_q__clk         ),
    .count          (        cr_q__count        ),
    .reset          (        cr_q__reset        ),
    .deq__en        (       cr_q__deq__en       ),
    .deq__rdy       (       cr_q__deq__rdy      ),
    .deq__ret       (       cr_q__deq__ret      ),
    .enq__en        (       cr_q__enq__en       ),
    .enq__msg       (       cr_q__enq__msg      ),
    .enq__rdy       (       cr_q__enq__rdy      )
  );

  logic [0:0]    size_addr_q__clk;
  logic [3:0]    size_addr_q__count;
  logic [0:0]    size_addr_q__reset;
  logic [0:0]    size_addr_q__deq__en;
  logic [0:0]    size_addr_q__deq__rdy;
  logic [95:0]   size_addr_q__deq__ret;
  logic [0:0]    size_addr_q__enq__en;
  logic [95:0]   size_addr_q__enq__msg;
  logic [0:0]    size_addr_q__enq__rdy;

  PipeQueueRTL__EntryType_Bits96__num_entries_8 size_addr_q
  (
    .clk            (      size_addr_q__clk     ),
    .count          (     size_addr_q__count    ),
    .reset          (     size_addr_q__reset    ),
    .deq__en        (    size_addr_q__deq__en   ),
    .deq__rdy       (   size_addr_q__deq__rdy   ),
    .deq__ret       (   size_addr_q__deq__ret   ),
    .enq__en        (    size_addr_q__enq__en   ),
    .enq__msg       (   size_addr_q__enq__msg   ),
    .enq__rdy       (   size_addr_q__enq__rdy   )
  );

  logic [0:0]    temp_cr_addr__clk;
  logic [0:0]    temp_cr_addr__count;
  logic [0:0]    temp_cr_addr__reset;
  logic [0:0]    temp_cr_addr__deq__en;
  logic [0:0]    temp_cr_addr__deq__rdy;
  logic [63:0]   temp_cr_addr__deq__ret;
  logic [0:0]    temp_cr_addr__enq__en;
  logic [63:0]   temp_cr_addr__enq__msg;
  logic [0:0]    temp_cr_addr__enq__rdy;

  BypassQueueRTL__EntryType_Bits64__num_entries_1 temp_cr_addr
  (
    .clk            (     temp_cr_addr__clk     ),
    .count          (    temp_cr_addr__count    ),
    .reset          (    temp_cr_addr__reset    ),
    .deq__en        (   temp_cr_addr__deq__en   ),
    .deq__rdy       (   temp_cr_addr__deq__rdy  ),
    .deq__ret       (   temp_cr_addr__deq__ret  ),
    .enq__en        (   temp_cr_addr__enq__en   ),
    .enq__msg       (   temp_cr_addr__enq__msg  ),
    .enq__rdy       (   temp_cr_addr__enq__rdy  )
  );

  logic [0:0]    temp_cr_size__clk;
  logic [0:0]    temp_cr_size__count;
  logic [0:0]    temp_cr_size__reset;
  logic [0:0]    temp_cr_size__deq__en;
  logic [0:0]    temp_cr_size__deq__rdy;
  logic [31:0]   temp_cr_size__deq__ret;
  logic [0:0]    temp_cr_size__enq__en;
  logic [31:0]   temp_cr_size__enq__msg;
  logic [0:0]    temp_cr_size__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_cr_size
  (
    .clk            (     temp_cr_size__clk     ),
    .count          (    temp_cr_size__count    ),
    .reset          (    temp_cr_size__reset    ),
    .deq__en        (   temp_cr_size__deq__en   ),
    .deq__rdy       (   temp_cr_size__deq__rdy  ),
    .deq__ret       (   temp_cr_size__deq__ret  ),
    .enq__en        (   temp_cr_size__enq__en   ),
    .enq__msg       (   temp_cr_size__enq__msg  ),
    .enq__rdy       (   temp_cr_size__enq__rdy  )
  );

  logic [0:0]    temp_lit__clk;
  logic [0:0]    temp_lit__count;
  logic [0:0]    temp_lit__reset;
  logic [0:0]    temp_lit__deq__en;
  logic [0:0]    temp_lit__deq__rdy;
  logic [31:0]   temp_lit__deq__ret;
  logic [0:0]    temp_lit__enq__en;
  logic [31:0]   temp_lit__enq__msg;
  logic [0:0]    temp_lit__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_lit
  (
    .clk            (       temp_lit__clk       ),
    .count          (      temp_lit__count      ),
    .reset          (      temp_lit__reset      ),
    .deq__en        (     temp_lit__deq__en     ),
    .deq__rdy       (     temp_lit__deq__rdy    ),
    .deq__ret       (     temp_lit__deq__ret    ),
    .enq__en        (     temp_lit__enq__en     ),
    .enq__msg       (     temp_lit__enq__msg    ),
    .enq__rdy       (     temp_lit__enq__rdy    )
  );

  logic [0:0]    temp_value__clk;
  logic [0:0]    temp_value__count;
  logic [0:0]    temp_value__reset;
  logic [0:0]    temp_value__deq__en;
  logic [0:0]    temp_value__deq__rdy;
  logic [1:0]    temp_value__deq__ret;
  logic [0:0]    temp_value__enq__en;
  logic [1:0]    temp_value__enq__msg;
  logic [0:0]    temp_value__enq__rdy;

  BypassQueueRTL__EntryType_Bits2__num_entries_1 temp_value
  (
    .clk            (      temp_value__clk      ),
    .count          (     temp_value__count     ),
    .reset          (     temp_value__reset     ),
    .deq__en        (    temp_value__deq__en    ),
    .deq__rdy       (    temp_value__deq__rdy   ),
    .deq__ret       (    temp_value__deq__ret   ),
    .enq__en        (    temp_value__enq__en    ),
    .enq__msg       (    temp_value__enq__msg   ),
    .enq__rdy       (    temp_value__enq__rdy   )
  );

  // Temporary wire definitions
  logic [109:0]  __tmpvar__comb_msg;

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/clause/clause.py:64
  //   @update
  //   def comb():
  //       s.value_mem_recv.rdy@=s.temp_value.enq.rdy
  //       s.size_mem_send.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       s.cr_q.deq.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       s.temp_cr_size.enq.en@=s.temp_cr_addr.enq.rdy & s.size_mem_recv.en
  //       s.size_mem_recv.rdy@=s.temp_cr_size.enq.rdy
  //       s.temp_cr_addr.enq.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       msg = Bits110()
  // 
  //       s.size_mem_send.msg@=msg
  //       s.temp_cr_size.enq.msg@=s.size_mem_recv.msg[48-32:48]
  //       # TODO: the real addr can be calculated immediately
  //       s.temp_cr_addr.enq.msg@=concat(Bits32(0), s.cr_q.deq.ret)
  // 
  //       s.size_addr_q.enq.en@=s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.temp_cr_size.deq.en@= s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.temp_cr_addr.deq.en@= s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.size_addr_q.enq.msg@=concat(s.temp_cr_size.deq.ret,
  //                                     s.temp_cr_addr.deq.ret)
  //       s.clause_fetcher.size_recv.en@=s.clause_fetcher.size_recv.rdy & s.size_addr_q.deq.rdy
  //       s.clause_fetcher.addr_recv.en@=s.clause_fetcher.addr_recv.rdy & s.size_addr_q.deq.rdy
  //       s.size_addr_q.deq.en@=s.clause_fetcher.size_recv.rdy & s.clause_fetcher.addr_recv.rdy & s.size_addr_q.deq.rdy
  //       s.clause_fetcher.size_recv.msg@=s.size_addr_q.deq.ret[0:32]
  //       s.clause_fetcher.addr_recv.msg@=s.size_addr_q.deq.ret[32:96]
  //       #
  //       s.value_mem_send.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  //       s.clause_lit_queue.deq.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  //       s.temp_value.enq.en@=s.temp_lit.enq.rdy & s.size_mem_recv.en
  //       s.size_mem_recv.rdy@=s.temp_value.enq.rdy
  //       s.temp_lit.enq.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  // 
  //       s.value_mem_send.msg@=concat(Bits12(0), Bits32(
  //           0), s.clause_lit_queue.deq.ret, Bits3(0))
  // 
  //       s.temp_value.enq.msg@=s.value_mem_recv.msg[17-2:17]
  //       # TODO: the real addr can be calculated immediately
  //       s.temp_lit.enq.msg@= s.clause_lit_queue.deq.ret
  // 
  //       s.clause_lit_with_value.enq.en@=s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  //       s.temp_value.deq.en@= s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  //       s.temp_lit.deq.en@= s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  // 
  //       s.clause_lit_with_value.enq.msg@=concat(
  //           s.temp_lit.deq.ret, s.temp_value.deq.ret)
  // 
  //       s.clause_lit_with_value.deq.en@=s.clause_lit_with_value.deq.rdy & s.clause_process_fsm.value_recv.rdy
  //       s.clause_process_fsm.value_recv.en@=s.clause_lit_with_value.deq.rdy & s.clause_process_fsm.value_recv.rdy
  
  always_comb begin : comb
    value_mem_recv__rdy = temp_value__enq__rdy;
    size_mem_send__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    cr_q__deq__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    temp_cr_size__enq__en = temp_cr_addr__enq__rdy & size_mem_recv__en;
    size_mem_recv__rdy = temp_cr_size__enq__rdy;
    temp_cr_addr__enq__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    __tmpvar__comb_msg = 110'd0;
    size_mem_send__msg = __tmpvar__comb_msg;
    temp_cr_size__enq__msg = size_mem_recv__msg[6'd47:6'd48 - 6'd32];
    temp_cr_addr__enq__msg = { 32'd0, cr_q__deq__ret };
    size_addr_q__enq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    temp_cr_size__deq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    temp_cr_addr__deq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    size_addr_q__enq__msg = { temp_cr_size__deq__ret, temp_cr_addr__deq__ret };
    clause_fetcher__size_recv__en = clause_fetcher__size_recv__rdy & size_addr_q__deq__rdy;
    clause_fetcher__addr_recv__en = clause_fetcher__addr_recv__rdy & size_addr_q__deq__rdy;
    size_addr_q__deq__en = ( clause_fetcher__size_recv__rdy & clause_fetcher__addr_recv__rdy ) & size_addr_q__deq__rdy;
    clause_fetcher__size_recv__msg = size_addr_q__deq__ret[7'd31:7'd0];
    clause_fetcher__addr_recv__msg = size_addr_q__deq__ret[7'd95:7'd32];
    value_mem_send__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    clause_lit_queue__deq__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    temp_value__enq__en = temp_lit__enq__rdy & size_mem_recv__en;
    size_mem_recv__rdy = temp_value__enq__rdy;
    temp_lit__enq__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    value_mem_send__msg = { 12'd0, 32'd0, clause_lit_queue__deq__ret, 3'd0 };
    temp_value__enq__msg = value_mem_recv__msg[5'd16:5'd17 - 5'd2];
    temp_lit__enq__msg = clause_lit_queue__deq__ret;
    clause_lit_with_value__enq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    temp_value__deq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    temp_lit__deq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    clause_lit_with_value__enq__msg = { temp_lit__deq__ret, temp_value__deq__ret };
    clause_lit_with_value__deq__en = clause_lit_with_value__deq__rdy & clause_process_fsm__value_recv__rdy;
    clause_process_fsm__value_recv__en = clause_lit_with_value__deq__rdy & clause_process_fsm__value_recv__rdy;
  end

  // Connections
  assign cr_q__clk = clk;
  assign cr_q__reset = reset;
  assign size_addr_q__clk = clk;
  assign size_addr_q__reset = reset;
  assign clause_fetcher__clk = clk;
  assign clause_fetcher__reset = reset;
  assign clause_lit_queue__clk = clk;
  assign clause_lit_queue__reset = reset;
  assign clause_lit_with_value__clk = clk;
  assign clause_lit_with_value__reset = reset;
  assign clause_process_fsm__clk = clk;
  assign clause_process_fsm__reset = reset;
  assign temp_cr_size__clk = clk;
  assign temp_cr_size__reset = reset;
  assign temp_cr_addr__clk = clk;
  assign temp_cr_addr__reset = reset;
  assign cr_q__enq__en = cr_recv__en;
  assign cr_q__enq__msg = cr_recv__msg;
  assign cr_recv__rdy = cr_q__enq__rdy;
  assign clause_lit_queue__enq__en = clause_fetcher__data_out__en;
  assign clause_lit_queue__enq__msg = clause_fetcher__data_out__msg;
  assign clause_fetcher__data_out__rdy = clause_lit_queue__enq__rdy;
  assign to_trail__en = clause_process_fsm__generated_send__en;
  assign to_trail__msg = clause_process_fsm__generated_send__msg;
  assign clause_process_fsm__generated_send__rdy = to_trail__rdy;
  assign conf = clause_process_fsm__conflict;
  assign temp_lit__clk = clk;
  assign temp_lit__reset = reset;
  assign temp_value__clk = clk;
  assign temp_value__reset = reset;
  assign clause_fetcher__mem_in__en = fetcher_mem_in__en;
  assign clause_fetcher__mem_in__msg = fetcher_mem_in__msg;
  assign fetcher_mem_in__rdy = clause_fetcher__mem_in__rdy;
  assign fetcher_mem_out__en = clause_fetcher__mem_out__en;
  assign fetcher_mem_out__msg = clause_fetcher__mem_out__msg;
  assign clause_fetcher__mem_out__rdy = fetcher_mem_out__rdy;

endmodule


// PyMTL Component Clause Definition
// At /home/sjq/git/pymtl_project/satacc/clause/clause.py
module Clause__index_6
(
  input  logic [0:0]    clk,
  output logic [0:0]    conf,
  input  logic [0:0]    reset,
  input  logic [0:0]    cr_recv__en,
  input  logic [31:0]   cr_recv__msg,
  output logic [0:0]    cr_recv__rdy,
  input  logic [0:0]    fetcher_mem_in__en,
  input  logic [80:0]   fetcher_mem_in__msg,
  output logic [0:0]    fetcher_mem_in__rdy,
  output logic [0:0]    fetcher_mem_out__en,
  output logic [152:0]  fetcher_mem_out__msg,
  input  logic [0:0]    fetcher_mem_out__rdy,
  input  logic [0:0]    size_mem_recv__en,
  input  logic [47:0]   size_mem_recv__msg,
  output logic [0:0]    size_mem_recv__rdy,
  output logic [0:0]    size_mem_send__en,
  output logic [109:0]  size_mem_send__msg,
  input  logic [0:0]    size_mem_send__rdy,
  output logic [0:0]    to_trail__en,
  output logic [31:0]   to_trail__msg,
  input  logic [0:0]    to_trail__rdy,
  input  logic [0:0]    value_mem_recv__en,
  input  logic [16:0]   value_mem_recv__msg,
  output logic [0:0]    value_mem_recv__rdy,
  output logic [0:0]    value_mem_send__en,
  output logic [78:0]   value_mem_send__msg,
  input  logic [0:0]    value_mem_send__rdy
);
  // Sub-component declarations
  logic [0:0]    clause_fetcher__clk;
  logic [0:0]    clause_fetcher__reset;
  logic [0:0]    clause_fetcher__addr_recv__en;
  logic [63:0]   clause_fetcher__addr_recv__msg;
  logic [0:0]    clause_fetcher__addr_recv__rdy;
  logic [0:0]    clause_fetcher__data_out__en;
  logic [31:0]   clause_fetcher__data_out__msg;
  logic [0:0]    clause_fetcher__data_out__rdy;
  logic [0:0]    clause_fetcher__mem_in__en;
  logic [80:0]   clause_fetcher__mem_in__msg;
  logic [0:0]    clause_fetcher__mem_in__rdy;
  logic [0:0]    clause_fetcher__mem_out__en;
  logic [152:0]  clause_fetcher__mem_out__msg;
  logic [0:0]    clause_fetcher__mem_out__rdy;
  logic [0:0]    clause_fetcher__size_recv__en;
  logic [31:0]   clause_fetcher__size_recv__msg;
  logic [0:0]    clause_fetcher__size_recv__rdy;

  Sized_memory_sender_in_order__f102ad27562d9009 clause_fetcher
  (
    .clk            (    clause_fetcher__clk    ),
    .reset          (   clause_fetcher__reset   ),
    .addr_recv__en  ( clause_fetcher__addr_recv__en ),
    .addr_recv__msg ( clause_fetcher__addr_recv__msg ),
    .addr_recv__rdy ( clause_fetcher__addr_recv__rdy ),
    .data_out__en   ( clause_fetcher__data_out__en ),
    .data_out__msg  ( clause_fetcher__data_out__msg ),
    .data_out__rdy  ( clause_fetcher__data_out__rdy ),
    .mem_in__en     ( clause_fetcher__mem_in__en ),
    .mem_in__msg    ( clause_fetcher__mem_in__msg ),
    .mem_in__rdy    ( clause_fetcher__mem_in__rdy ),
    .mem_out__en    ( clause_fetcher__mem_out__en ),
    .mem_out__msg   ( clause_fetcher__mem_out__msg ),
    .mem_out__rdy   ( clause_fetcher__mem_out__rdy ),
    .size_recv__en  ( clause_fetcher__size_recv__en ),
    .size_recv__msg ( clause_fetcher__size_recv__msg ),
    .size_recv__rdy ( clause_fetcher__size_recv__rdy )
  );

  logic [0:0]    clause_lit_queue__clk;
  logic [3:0]    clause_lit_queue__count;
  logic [0:0]    clause_lit_queue__reset;
  logic [0:0]    clause_lit_queue__deq__en;
  logic [0:0]    clause_lit_queue__deq__rdy;
  logic [31:0]   clause_lit_queue__deq__ret;
  logic [0:0]    clause_lit_queue__enq__en;
  logic [31:0]   clause_lit_queue__enq__msg;
  logic [0:0]    clause_lit_queue__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_8 clause_lit_queue
  (
    .clk            (   clause_lit_queue__clk   ),
    .count          (  clause_lit_queue__count  ),
    .reset          (  clause_lit_queue__reset  ),
    .deq__en        ( clause_lit_queue__deq__en ),
    .deq__rdy       ( clause_lit_queue__deq__rdy ),
    .deq__ret       ( clause_lit_queue__deq__ret ),
    .enq__en        ( clause_lit_queue__enq__en ),
    .enq__msg       ( clause_lit_queue__enq__msg ),
    .enq__rdy       ( clause_lit_queue__enq__rdy )
  );

  logic [0:0]    clause_lit_with_value__clk;
  logic [3:0]    clause_lit_with_value__count;
  logic [0:0]    clause_lit_with_value__reset;
  logic [0:0]    clause_lit_with_value__deq__en;
  logic [0:0]    clause_lit_with_value__deq__rdy;
  logic [33:0]   clause_lit_with_value__deq__ret;
  logic [0:0]    clause_lit_with_value__enq__en;
  logic [33:0]   clause_lit_with_value__enq__msg;
  logic [0:0]    clause_lit_with_value__enq__rdy;

  PipeQueueRTL__EntryType_Bits34__num_entries_8 clause_lit_with_value
  (
    .clk            ( clause_lit_with_value__clk ),
    .count          ( clause_lit_with_value__count ),
    .reset          ( clause_lit_with_value__reset ),
    .deq__en        ( clause_lit_with_value__deq__en ),
    .deq__rdy       ( clause_lit_with_value__deq__rdy ),
    .deq__ret       ( clause_lit_with_value__deq__ret ),
    .enq__en        ( clause_lit_with_value__enq__en ),
    .enq__msg       ( clause_lit_with_value__enq__msg ),
    .enq__rdy       ( clause_lit_with_value__enq__rdy )
  );

  logic [0:0]    clause_process_fsm__clk;
  logic [0:0]    clause_process_fsm__conflict;
  logic [0:0]    clause_process_fsm__reset;
  logic [0:0]    clause_process_fsm__generated_send__en;
  logic [31:0]   clause_process_fsm__generated_send__msg;
  logic [0:0]    clause_process_fsm__generated_send__rdy;
  logic [0:0]    clause_process_fsm__value_recv__en;
  logic [33:0]   clause_process_fsm__value_recv__msg;
  logic [0:0]    clause_process_fsm__value_recv__rdy;

  Clause_fsm_noparam clause_process_fsm
  (
    .clk            (  clause_process_fsm__clk  ),
    .conflict       ( clause_process_fsm__conflict ),
    .reset          ( clause_process_fsm__reset ),
    .generated_send__en( clause_process_fsm__generated_send__en ),
    .generated_send__msg( clause_process_fsm__generated_send__msg ),
    .generated_send__rdy( clause_process_fsm__generated_send__rdy ),
    .value_recv__en ( clause_process_fsm__value_recv__en ),
    .value_recv__msg( clause_process_fsm__value_recv__msg ),
    .value_recv__rdy( clause_process_fsm__value_recv__rdy )
  );

  logic [0:0]    cr_q__clk;
  logic [2:0]    cr_q__count;
  logic [0:0]    cr_q__reset;
  logic [0:0]    cr_q__deq__en;
  logic [0:0]    cr_q__deq__rdy;
  logic [31:0]   cr_q__deq__ret;
  logic [0:0]    cr_q__enq__en;
  logic [31:0]   cr_q__enq__msg;
  logic [0:0]    cr_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_4 cr_q
  (
    .clk            (         cr_q__clk         ),
    .count          (        cr_q__count        ),
    .reset          (        cr_q__reset        ),
    .deq__en        (       cr_q__deq__en       ),
    .deq__rdy       (       cr_q__deq__rdy      ),
    .deq__ret       (       cr_q__deq__ret      ),
    .enq__en        (       cr_q__enq__en       ),
    .enq__msg       (       cr_q__enq__msg      ),
    .enq__rdy       (       cr_q__enq__rdy      )
  );

  logic [0:0]    size_addr_q__clk;
  logic [3:0]    size_addr_q__count;
  logic [0:0]    size_addr_q__reset;
  logic [0:0]    size_addr_q__deq__en;
  logic [0:0]    size_addr_q__deq__rdy;
  logic [95:0]   size_addr_q__deq__ret;
  logic [0:0]    size_addr_q__enq__en;
  logic [95:0]   size_addr_q__enq__msg;
  logic [0:0]    size_addr_q__enq__rdy;

  PipeQueueRTL__EntryType_Bits96__num_entries_8 size_addr_q
  (
    .clk            (      size_addr_q__clk     ),
    .count          (     size_addr_q__count    ),
    .reset          (     size_addr_q__reset    ),
    .deq__en        (    size_addr_q__deq__en   ),
    .deq__rdy       (   size_addr_q__deq__rdy   ),
    .deq__ret       (   size_addr_q__deq__ret   ),
    .enq__en        (    size_addr_q__enq__en   ),
    .enq__msg       (   size_addr_q__enq__msg   ),
    .enq__rdy       (   size_addr_q__enq__rdy   )
  );

  logic [0:0]    temp_cr_addr__clk;
  logic [0:0]    temp_cr_addr__count;
  logic [0:0]    temp_cr_addr__reset;
  logic [0:0]    temp_cr_addr__deq__en;
  logic [0:0]    temp_cr_addr__deq__rdy;
  logic [63:0]   temp_cr_addr__deq__ret;
  logic [0:0]    temp_cr_addr__enq__en;
  logic [63:0]   temp_cr_addr__enq__msg;
  logic [0:0]    temp_cr_addr__enq__rdy;

  BypassQueueRTL__EntryType_Bits64__num_entries_1 temp_cr_addr
  (
    .clk            (     temp_cr_addr__clk     ),
    .count          (    temp_cr_addr__count    ),
    .reset          (    temp_cr_addr__reset    ),
    .deq__en        (   temp_cr_addr__deq__en   ),
    .deq__rdy       (   temp_cr_addr__deq__rdy  ),
    .deq__ret       (   temp_cr_addr__deq__ret  ),
    .enq__en        (   temp_cr_addr__enq__en   ),
    .enq__msg       (   temp_cr_addr__enq__msg  ),
    .enq__rdy       (   temp_cr_addr__enq__rdy  )
  );

  logic [0:0]    temp_cr_size__clk;
  logic [0:0]    temp_cr_size__count;
  logic [0:0]    temp_cr_size__reset;
  logic [0:0]    temp_cr_size__deq__en;
  logic [0:0]    temp_cr_size__deq__rdy;
  logic [31:0]   temp_cr_size__deq__ret;
  logic [0:0]    temp_cr_size__enq__en;
  logic [31:0]   temp_cr_size__enq__msg;
  logic [0:0]    temp_cr_size__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_cr_size
  (
    .clk            (     temp_cr_size__clk     ),
    .count          (    temp_cr_size__count    ),
    .reset          (    temp_cr_size__reset    ),
    .deq__en        (   temp_cr_size__deq__en   ),
    .deq__rdy       (   temp_cr_size__deq__rdy  ),
    .deq__ret       (   temp_cr_size__deq__ret  ),
    .enq__en        (   temp_cr_size__enq__en   ),
    .enq__msg       (   temp_cr_size__enq__msg  ),
    .enq__rdy       (   temp_cr_size__enq__rdy  )
  );

  logic [0:0]    temp_lit__clk;
  logic [0:0]    temp_lit__count;
  logic [0:0]    temp_lit__reset;
  logic [0:0]    temp_lit__deq__en;
  logic [0:0]    temp_lit__deq__rdy;
  logic [31:0]   temp_lit__deq__ret;
  logic [0:0]    temp_lit__enq__en;
  logic [31:0]   temp_lit__enq__msg;
  logic [0:0]    temp_lit__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_lit
  (
    .clk            (       temp_lit__clk       ),
    .count          (      temp_lit__count      ),
    .reset          (      temp_lit__reset      ),
    .deq__en        (     temp_lit__deq__en     ),
    .deq__rdy       (     temp_lit__deq__rdy    ),
    .deq__ret       (     temp_lit__deq__ret    ),
    .enq__en        (     temp_lit__enq__en     ),
    .enq__msg       (     temp_lit__enq__msg    ),
    .enq__rdy       (     temp_lit__enq__rdy    )
  );

  logic [0:0]    temp_value__clk;
  logic [0:0]    temp_value__count;
  logic [0:0]    temp_value__reset;
  logic [0:0]    temp_value__deq__en;
  logic [0:0]    temp_value__deq__rdy;
  logic [1:0]    temp_value__deq__ret;
  logic [0:0]    temp_value__enq__en;
  logic [1:0]    temp_value__enq__msg;
  logic [0:0]    temp_value__enq__rdy;

  BypassQueueRTL__EntryType_Bits2__num_entries_1 temp_value
  (
    .clk            (      temp_value__clk      ),
    .count          (     temp_value__count     ),
    .reset          (     temp_value__reset     ),
    .deq__en        (    temp_value__deq__en    ),
    .deq__rdy       (    temp_value__deq__rdy   ),
    .deq__ret       (    temp_value__deq__ret   ),
    .enq__en        (    temp_value__enq__en    ),
    .enq__msg       (    temp_value__enq__msg   ),
    .enq__rdy       (    temp_value__enq__rdy   )
  );

  // Temporary wire definitions
  logic [109:0]  __tmpvar__comb_msg;

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/clause/clause.py:64
  //   @update
  //   def comb():
  //       s.value_mem_recv.rdy@=s.temp_value.enq.rdy
  //       s.size_mem_send.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       s.cr_q.deq.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       s.temp_cr_size.enq.en@=s.temp_cr_addr.enq.rdy & s.size_mem_recv.en
  //       s.size_mem_recv.rdy@=s.temp_cr_size.enq.rdy
  //       s.temp_cr_addr.enq.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       msg = Bits110()
  // 
  //       s.size_mem_send.msg@=msg
  //       s.temp_cr_size.enq.msg@=s.size_mem_recv.msg[48-32:48]
  //       # TODO: the real addr can be calculated immediately
  //       s.temp_cr_addr.enq.msg@=concat(Bits32(0), s.cr_q.deq.ret)
  // 
  //       s.size_addr_q.enq.en@=s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.temp_cr_size.deq.en@= s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.temp_cr_addr.deq.en@= s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.size_addr_q.enq.msg@=concat(s.temp_cr_size.deq.ret,
  //                                     s.temp_cr_addr.deq.ret)
  //       s.clause_fetcher.size_recv.en@=s.clause_fetcher.size_recv.rdy & s.size_addr_q.deq.rdy
  //       s.clause_fetcher.addr_recv.en@=s.clause_fetcher.addr_recv.rdy & s.size_addr_q.deq.rdy
  //       s.size_addr_q.deq.en@=s.clause_fetcher.size_recv.rdy & s.clause_fetcher.addr_recv.rdy & s.size_addr_q.deq.rdy
  //       s.clause_fetcher.size_recv.msg@=s.size_addr_q.deq.ret[0:32]
  //       s.clause_fetcher.addr_recv.msg@=s.size_addr_q.deq.ret[32:96]
  //       #
  //       s.value_mem_send.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  //       s.clause_lit_queue.deq.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  //       s.temp_value.enq.en@=s.temp_lit.enq.rdy & s.size_mem_recv.en
  //       s.size_mem_recv.rdy@=s.temp_value.enq.rdy
  //       s.temp_lit.enq.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  // 
  //       s.value_mem_send.msg@=concat(Bits12(0), Bits32(
  //           0), s.clause_lit_queue.deq.ret, Bits3(0))
  // 
  //       s.temp_value.enq.msg@=s.value_mem_recv.msg[17-2:17]
  //       # TODO: the real addr can be calculated immediately
  //       s.temp_lit.enq.msg@= s.clause_lit_queue.deq.ret
  // 
  //       s.clause_lit_with_value.enq.en@=s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  //       s.temp_value.deq.en@= s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  //       s.temp_lit.deq.en@= s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  // 
  //       s.clause_lit_with_value.enq.msg@=concat(
  //           s.temp_lit.deq.ret, s.temp_value.deq.ret)
  // 
  //       s.clause_lit_with_value.deq.en@=s.clause_lit_with_value.deq.rdy & s.clause_process_fsm.value_recv.rdy
  //       s.clause_process_fsm.value_recv.en@=s.clause_lit_with_value.deq.rdy & s.clause_process_fsm.value_recv.rdy
  
  always_comb begin : comb
    value_mem_recv__rdy = temp_value__enq__rdy;
    size_mem_send__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    cr_q__deq__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    temp_cr_size__enq__en = temp_cr_addr__enq__rdy & size_mem_recv__en;
    size_mem_recv__rdy = temp_cr_size__enq__rdy;
    temp_cr_addr__enq__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    __tmpvar__comb_msg = 110'd0;
    size_mem_send__msg = __tmpvar__comb_msg;
    temp_cr_size__enq__msg = size_mem_recv__msg[6'd47:6'd48 - 6'd32];
    temp_cr_addr__enq__msg = { 32'd0, cr_q__deq__ret };
    size_addr_q__enq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    temp_cr_size__deq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    temp_cr_addr__deq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    size_addr_q__enq__msg = { temp_cr_size__deq__ret, temp_cr_addr__deq__ret };
    clause_fetcher__size_recv__en = clause_fetcher__size_recv__rdy & size_addr_q__deq__rdy;
    clause_fetcher__addr_recv__en = clause_fetcher__addr_recv__rdy & size_addr_q__deq__rdy;
    size_addr_q__deq__en = ( clause_fetcher__size_recv__rdy & clause_fetcher__addr_recv__rdy ) & size_addr_q__deq__rdy;
    clause_fetcher__size_recv__msg = size_addr_q__deq__ret[7'd31:7'd0];
    clause_fetcher__addr_recv__msg = size_addr_q__deq__ret[7'd95:7'd32];
    value_mem_send__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    clause_lit_queue__deq__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    temp_value__enq__en = temp_lit__enq__rdy & size_mem_recv__en;
    size_mem_recv__rdy = temp_value__enq__rdy;
    temp_lit__enq__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    value_mem_send__msg = { 12'd0, 32'd0, clause_lit_queue__deq__ret, 3'd0 };
    temp_value__enq__msg = value_mem_recv__msg[5'd16:5'd17 - 5'd2];
    temp_lit__enq__msg = clause_lit_queue__deq__ret;
    clause_lit_with_value__enq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    temp_value__deq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    temp_lit__deq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    clause_lit_with_value__enq__msg = { temp_lit__deq__ret, temp_value__deq__ret };
    clause_lit_with_value__deq__en = clause_lit_with_value__deq__rdy & clause_process_fsm__value_recv__rdy;
    clause_process_fsm__value_recv__en = clause_lit_with_value__deq__rdy & clause_process_fsm__value_recv__rdy;
  end

  // Connections
  assign cr_q__clk = clk;
  assign cr_q__reset = reset;
  assign size_addr_q__clk = clk;
  assign size_addr_q__reset = reset;
  assign clause_fetcher__clk = clk;
  assign clause_fetcher__reset = reset;
  assign clause_lit_queue__clk = clk;
  assign clause_lit_queue__reset = reset;
  assign clause_lit_with_value__clk = clk;
  assign clause_lit_with_value__reset = reset;
  assign clause_process_fsm__clk = clk;
  assign clause_process_fsm__reset = reset;
  assign temp_cr_size__clk = clk;
  assign temp_cr_size__reset = reset;
  assign temp_cr_addr__clk = clk;
  assign temp_cr_addr__reset = reset;
  assign cr_q__enq__en = cr_recv__en;
  assign cr_q__enq__msg = cr_recv__msg;
  assign cr_recv__rdy = cr_q__enq__rdy;
  assign clause_lit_queue__enq__en = clause_fetcher__data_out__en;
  assign clause_lit_queue__enq__msg = clause_fetcher__data_out__msg;
  assign clause_fetcher__data_out__rdy = clause_lit_queue__enq__rdy;
  assign to_trail__en = clause_process_fsm__generated_send__en;
  assign to_trail__msg = clause_process_fsm__generated_send__msg;
  assign clause_process_fsm__generated_send__rdy = to_trail__rdy;
  assign conf = clause_process_fsm__conflict;
  assign temp_lit__clk = clk;
  assign temp_lit__reset = reset;
  assign temp_value__clk = clk;
  assign temp_value__reset = reset;
  assign clause_fetcher__mem_in__en = fetcher_mem_in__en;
  assign clause_fetcher__mem_in__msg = fetcher_mem_in__msg;
  assign fetcher_mem_in__rdy = clause_fetcher__mem_in__rdy;
  assign fetcher_mem_out__en = clause_fetcher__mem_out__en;
  assign fetcher_mem_out__msg = clause_fetcher__mem_out__msg;
  assign clause_fetcher__mem_out__rdy = fetcher_mem_out__rdy;

endmodule


// PyMTL Component Clause Definition
// At /home/sjq/git/pymtl_project/satacc/clause/clause.py
module Clause__index_7
(
  input  logic [0:0]    clk,
  output logic [0:0]    conf,
  input  logic [0:0]    reset,
  input  logic [0:0]    cr_recv__en,
  input  logic [31:0]   cr_recv__msg,
  output logic [0:0]    cr_recv__rdy,
  input  logic [0:0]    fetcher_mem_in__en,
  input  logic [80:0]   fetcher_mem_in__msg,
  output logic [0:0]    fetcher_mem_in__rdy,
  output logic [0:0]    fetcher_mem_out__en,
  output logic [152:0]  fetcher_mem_out__msg,
  input  logic [0:0]    fetcher_mem_out__rdy,
  input  logic [0:0]    size_mem_recv__en,
  input  logic [47:0]   size_mem_recv__msg,
  output logic [0:0]    size_mem_recv__rdy,
  output logic [0:0]    size_mem_send__en,
  output logic [109:0]  size_mem_send__msg,
  input  logic [0:0]    size_mem_send__rdy,
  output logic [0:0]    to_trail__en,
  output logic [31:0]   to_trail__msg,
  input  logic [0:0]    to_trail__rdy,
  input  logic [0:0]    value_mem_recv__en,
  input  logic [16:0]   value_mem_recv__msg,
  output logic [0:0]    value_mem_recv__rdy,
  output logic [0:0]    value_mem_send__en,
  output logic [78:0]   value_mem_send__msg,
  input  logic [0:0]    value_mem_send__rdy
);
  // Sub-component declarations
  logic [0:0]    clause_fetcher__clk;
  logic [0:0]    clause_fetcher__reset;
  logic [0:0]    clause_fetcher__addr_recv__en;
  logic [63:0]   clause_fetcher__addr_recv__msg;
  logic [0:0]    clause_fetcher__addr_recv__rdy;
  logic [0:0]    clause_fetcher__data_out__en;
  logic [31:0]   clause_fetcher__data_out__msg;
  logic [0:0]    clause_fetcher__data_out__rdy;
  logic [0:0]    clause_fetcher__mem_in__en;
  logic [80:0]   clause_fetcher__mem_in__msg;
  logic [0:0]    clause_fetcher__mem_in__rdy;
  logic [0:0]    clause_fetcher__mem_out__en;
  logic [152:0]  clause_fetcher__mem_out__msg;
  logic [0:0]    clause_fetcher__mem_out__rdy;
  logic [0:0]    clause_fetcher__size_recv__en;
  logic [31:0]   clause_fetcher__size_recv__msg;
  logic [0:0]    clause_fetcher__size_recv__rdy;

  Sized_memory_sender_in_order__f102ad27562d9009 clause_fetcher
  (
    .clk            (    clause_fetcher__clk    ),
    .reset          (   clause_fetcher__reset   ),
    .addr_recv__en  ( clause_fetcher__addr_recv__en ),
    .addr_recv__msg ( clause_fetcher__addr_recv__msg ),
    .addr_recv__rdy ( clause_fetcher__addr_recv__rdy ),
    .data_out__en   ( clause_fetcher__data_out__en ),
    .data_out__msg  ( clause_fetcher__data_out__msg ),
    .data_out__rdy  ( clause_fetcher__data_out__rdy ),
    .mem_in__en     ( clause_fetcher__mem_in__en ),
    .mem_in__msg    ( clause_fetcher__mem_in__msg ),
    .mem_in__rdy    ( clause_fetcher__mem_in__rdy ),
    .mem_out__en    ( clause_fetcher__mem_out__en ),
    .mem_out__msg   ( clause_fetcher__mem_out__msg ),
    .mem_out__rdy   ( clause_fetcher__mem_out__rdy ),
    .size_recv__en  ( clause_fetcher__size_recv__en ),
    .size_recv__msg ( clause_fetcher__size_recv__msg ),
    .size_recv__rdy ( clause_fetcher__size_recv__rdy )
  );

  logic [0:0]    clause_lit_queue__clk;
  logic [3:0]    clause_lit_queue__count;
  logic [0:0]    clause_lit_queue__reset;
  logic [0:0]    clause_lit_queue__deq__en;
  logic [0:0]    clause_lit_queue__deq__rdy;
  logic [31:0]   clause_lit_queue__deq__ret;
  logic [0:0]    clause_lit_queue__enq__en;
  logic [31:0]   clause_lit_queue__enq__msg;
  logic [0:0]    clause_lit_queue__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_8 clause_lit_queue
  (
    .clk            (   clause_lit_queue__clk   ),
    .count          (  clause_lit_queue__count  ),
    .reset          (  clause_lit_queue__reset  ),
    .deq__en        ( clause_lit_queue__deq__en ),
    .deq__rdy       ( clause_lit_queue__deq__rdy ),
    .deq__ret       ( clause_lit_queue__deq__ret ),
    .enq__en        ( clause_lit_queue__enq__en ),
    .enq__msg       ( clause_lit_queue__enq__msg ),
    .enq__rdy       ( clause_lit_queue__enq__rdy )
  );

  logic [0:0]    clause_lit_with_value__clk;
  logic [3:0]    clause_lit_with_value__count;
  logic [0:0]    clause_lit_with_value__reset;
  logic [0:0]    clause_lit_with_value__deq__en;
  logic [0:0]    clause_lit_with_value__deq__rdy;
  logic [33:0]   clause_lit_with_value__deq__ret;
  logic [0:0]    clause_lit_with_value__enq__en;
  logic [33:0]   clause_lit_with_value__enq__msg;
  logic [0:0]    clause_lit_with_value__enq__rdy;

  PipeQueueRTL__EntryType_Bits34__num_entries_8 clause_lit_with_value
  (
    .clk            ( clause_lit_with_value__clk ),
    .count          ( clause_lit_with_value__count ),
    .reset          ( clause_lit_with_value__reset ),
    .deq__en        ( clause_lit_with_value__deq__en ),
    .deq__rdy       ( clause_lit_with_value__deq__rdy ),
    .deq__ret       ( clause_lit_with_value__deq__ret ),
    .enq__en        ( clause_lit_with_value__enq__en ),
    .enq__msg       ( clause_lit_with_value__enq__msg ),
    .enq__rdy       ( clause_lit_with_value__enq__rdy )
  );

  logic [0:0]    clause_process_fsm__clk;
  logic [0:0]    clause_process_fsm__conflict;
  logic [0:0]    clause_process_fsm__reset;
  logic [0:0]    clause_process_fsm__generated_send__en;
  logic [31:0]   clause_process_fsm__generated_send__msg;
  logic [0:0]    clause_process_fsm__generated_send__rdy;
  logic [0:0]    clause_process_fsm__value_recv__en;
  logic [33:0]   clause_process_fsm__value_recv__msg;
  logic [0:0]    clause_process_fsm__value_recv__rdy;

  Clause_fsm_noparam clause_process_fsm
  (
    .clk            (  clause_process_fsm__clk  ),
    .conflict       ( clause_process_fsm__conflict ),
    .reset          ( clause_process_fsm__reset ),
    .generated_send__en( clause_process_fsm__generated_send__en ),
    .generated_send__msg( clause_process_fsm__generated_send__msg ),
    .generated_send__rdy( clause_process_fsm__generated_send__rdy ),
    .value_recv__en ( clause_process_fsm__value_recv__en ),
    .value_recv__msg( clause_process_fsm__value_recv__msg ),
    .value_recv__rdy( clause_process_fsm__value_recv__rdy )
  );

  logic [0:0]    cr_q__clk;
  logic [2:0]    cr_q__count;
  logic [0:0]    cr_q__reset;
  logic [0:0]    cr_q__deq__en;
  logic [0:0]    cr_q__deq__rdy;
  logic [31:0]   cr_q__deq__ret;
  logic [0:0]    cr_q__enq__en;
  logic [31:0]   cr_q__enq__msg;
  logic [0:0]    cr_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_4 cr_q
  (
    .clk            (         cr_q__clk         ),
    .count          (        cr_q__count        ),
    .reset          (        cr_q__reset        ),
    .deq__en        (       cr_q__deq__en       ),
    .deq__rdy       (       cr_q__deq__rdy      ),
    .deq__ret       (       cr_q__deq__ret      ),
    .enq__en        (       cr_q__enq__en       ),
    .enq__msg       (       cr_q__enq__msg      ),
    .enq__rdy       (       cr_q__enq__rdy      )
  );

  logic [0:0]    size_addr_q__clk;
  logic [3:0]    size_addr_q__count;
  logic [0:0]    size_addr_q__reset;
  logic [0:0]    size_addr_q__deq__en;
  logic [0:0]    size_addr_q__deq__rdy;
  logic [95:0]   size_addr_q__deq__ret;
  logic [0:0]    size_addr_q__enq__en;
  logic [95:0]   size_addr_q__enq__msg;
  logic [0:0]    size_addr_q__enq__rdy;

  PipeQueueRTL__EntryType_Bits96__num_entries_8 size_addr_q
  (
    .clk            (      size_addr_q__clk     ),
    .count          (     size_addr_q__count    ),
    .reset          (     size_addr_q__reset    ),
    .deq__en        (    size_addr_q__deq__en   ),
    .deq__rdy       (   size_addr_q__deq__rdy   ),
    .deq__ret       (   size_addr_q__deq__ret   ),
    .enq__en        (    size_addr_q__enq__en   ),
    .enq__msg       (   size_addr_q__enq__msg   ),
    .enq__rdy       (   size_addr_q__enq__rdy   )
  );

  logic [0:0]    temp_cr_addr__clk;
  logic [0:0]    temp_cr_addr__count;
  logic [0:0]    temp_cr_addr__reset;
  logic [0:0]    temp_cr_addr__deq__en;
  logic [0:0]    temp_cr_addr__deq__rdy;
  logic [63:0]   temp_cr_addr__deq__ret;
  logic [0:0]    temp_cr_addr__enq__en;
  logic [63:0]   temp_cr_addr__enq__msg;
  logic [0:0]    temp_cr_addr__enq__rdy;

  BypassQueueRTL__EntryType_Bits64__num_entries_1 temp_cr_addr
  (
    .clk            (     temp_cr_addr__clk     ),
    .count          (    temp_cr_addr__count    ),
    .reset          (    temp_cr_addr__reset    ),
    .deq__en        (   temp_cr_addr__deq__en   ),
    .deq__rdy       (   temp_cr_addr__deq__rdy  ),
    .deq__ret       (   temp_cr_addr__deq__ret  ),
    .enq__en        (   temp_cr_addr__enq__en   ),
    .enq__msg       (   temp_cr_addr__enq__msg  ),
    .enq__rdy       (   temp_cr_addr__enq__rdy  )
  );

  logic [0:0]    temp_cr_size__clk;
  logic [0:0]    temp_cr_size__count;
  logic [0:0]    temp_cr_size__reset;
  logic [0:0]    temp_cr_size__deq__en;
  logic [0:0]    temp_cr_size__deq__rdy;
  logic [31:0]   temp_cr_size__deq__ret;
  logic [0:0]    temp_cr_size__enq__en;
  logic [31:0]   temp_cr_size__enq__msg;
  logic [0:0]    temp_cr_size__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_cr_size
  (
    .clk            (     temp_cr_size__clk     ),
    .count          (    temp_cr_size__count    ),
    .reset          (    temp_cr_size__reset    ),
    .deq__en        (   temp_cr_size__deq__en   ),
    .deq__rdy       (   temp_cr_size__deq__rdy  ),
    .deq__ret       (   temp_cr_size__deq__ret  ),
    .enq__en        (   temp_cr_size__enq__en   ),
    .enq__msg       (   temp_cr_size__enq__msg  ),
    .enq__rdy       (   temp_cr_size__enq__rdy  )
  );

  logic [0:0]    temp_lit__clk;
  logic [0:0]    temp_lit__count;
  logic [0:0]    temp_lit__reset;
  logic [0:0]    temp_lit__deq__en;
  logic [0:0]    temp_lit__deq__rdy;
  logic [31:0]   temp_lit__deq__ret;
  logic [0:0]    temp_lit__enq__en;
  logic [31:0]   temp_lit__enq__msg;
  logic [0:0]    temp_lit__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_lit
  (
    .clk            (       temp_lit__clk       ),
    .count          (      temp_lit__count      ),
    .reset          (      temp_lit__reset      ),
    .deq__en        (     temp_lit__deq__en     ),
    .deq__rdy       (     temp_lit__deq__rdy    ),
    .deq__ret       (     temp_lit__deq__ret    ),
    .enq__en        (     temp_lit__enq__en     ),
    .enq__msg       (     temp_lit__enq__msg    ),
    .enq__rdy       (     temp_lit__enq__rdy    )
  );

  logic [0:0]    temp_value__clk;
  logic [0:0]    temp_value__count;
  logic [0:0]    temp_value__reset;
  logic [0:0]    temp_value__deq__en;
  logic [0:0]    temp_value__deq__rdy;
  logic [1:0]    temp_value__deq__ret;
  logic [0:0]    temp_value__enq__en;
  logic [1:0]    temp_value__enq__msg;
  logic [0:0]    temp_value__enq__rdy;

  BypassQueueRTL__EntryType_Bits2__num_entries_1 temp_value
  (
    .clk            (      temp_value__clk      ),
    .count          (     temp_value__count     ),
    .reset          (     temp_value__reset     ),
    .deq__en        (    temp_value__deq__en    ),
    .deq__rdy       (    temp_value__deq__rdy   ),
    .deq__ret       (    temp_value__deq__ret   ),
    .enq__en        (    temp_value__enq__en    ),
    .enq__msg       (    temp_value__enq__msg   ),
    .enq__rdy       (    temp_value__enq__rdy   )
  );

  // Temporary wire definitions
  logic [109:0]  __tmpvar__comb_msg;

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/clause/clause.py:64
  //   @update
  //   def comb():
  //       s.value_mem_recv.rdy@=s.temp_value.enq.rdy
  //       s.size_mem_send.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       s.cr_q.deq.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       s.temp_cr_size.enq.en@=s.temp_cr_addr.enq.rdy & s.size_mem_recv.en
  //       s.size_mem_recv.rdy@=s.temp_cr_size.enq.rdy
  //       s.temp_cr_addr.enq.en@=s.size_mem_send.rdy & s.temp_cr_size.enq.rdy & s.temp_cr_addr.enq.rdy & s.cr_q.deq.rdy
  //       msg = Bits110()
  // 
  //       s.size_mem_send.msg@=msg
  //       s.temp_cr_size.enq.msg@=s.size_mem_recv.msg[48-32:48]
  //       # TODO: the real addr can be calculated immediately
  //       s.temp_cr_addr.enq.msg@=concat(Bits32(0), s.cr_q.deq.ret)
  // 
  //       s.size_addr_q.enq.en@=s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.temp_cr_size.deq.en@= s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.temp_cr_addr.deq.en@= s.size_addr_q.enq.rdy & s.temp_cr_size.deq.rdy & s.temp_cr_addr.deq.rdy
  //       s.size_addr_q.enq.msg@=concat(s.temp_cr_size.deq.ret,
  //                                     s.temp_cr_addr.deq.ret)
  //       s.clause_fetcher.size_recv.en@=s.clause_fetcher.size_recv.rdy & s.size_addr_q.deq.rdy
  //       s.clause_fetcher.addr_recv.en@=s.clause_fetcher.addr_recv.rdy & s.size_addr_q.deq.rdy
  //       s.size_addr_q.deq.en@=s.clause_fetcher.size_recv.rdy & s.clause_fetcher.addr_recv.rdy & s.size_addr_q.deq.rdy
  //       s.clause_fetcher.size_recv.msg@=s.size_addr_q.deq.ret[0:32]
  //       s.clause_fetcher.addr_recv.msg@=s.size_addr_q.deq.ret[32:96]
  //       #
  //       s.value_mem_send.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  //       s.clause_lit_queue.deq.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  //       s.temp_value.enq.en@=s.temp_lit.enq.rdy & s.size_mem_recv.en
  //       s.size_mem_recv.rdy@=s.temp_value.enq.rdy
  //       s.temp_lit.enq.en@=s.value_mem_send.rdy & s.temp_value.enq.rdy & s.temp_lit.enq.rdy & s.clause_lit_queue.deq.rdy
  // 
  //       s.value_mem_send.msg@=concat(Bits12(0), Bits32(
  //           0), s.clause_lit_queue.deq.ret, Bits3(0))
  // 
  //       s.temp_value.enq.msg@=s.value_mem_recv.msg[17-2:17]
  //       # TODO: the real addr can be calculated immediately
  //       s.temp_lit.enq.msg@= s.clause_lit_queue.deq.ret
  // 
  //       s.clause_lit_with_value.enq.en@=s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  //       s.temp_value.deq.en@= s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  //       s.temp_lit.deq.en@= s.clause_lit_with_value.enq.rdy & s.temp_value.deq.rdy & s.temp_lit.deq.rdy
  // 
  //       s.clause_lit_with_value.enq.msg@=concat(
  //           s.temp_lit.deq.ret, s.temp_value.deq.ret)
  // 
  //       s.clause_lit_with_value.deq.en@=s.clause_lit_with_value.deq.rdy & s.clause_process_fsm.value_recv.rdy
  //       s.clause_process_fsm.value_recv.en@=s.clause_lit_with_value.deq.rdy & s.clause_process_fsm.value_recv.rdy
  
  always_comb begin : comb
    value_mem_recv__rdy = temp_value__enq__rdy;
    size_mem_send__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    cr_q__deq__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    temp_cr_size__enq__en = temp_cr_addr__enq__rdy & size_mem_recv__en;
    size_mem_recv__rdy = temp_cr_size__enq__rdy;
    temp_cr_addr__enq__en = ( ( size_mem_send__rdy & temp_cr_size__enq__rdy ) & temp_cr_addr__enq__rdy ) & cr_q__deq__rdy;
    __tmpvar__comb_msg = 110'd0;
    size_mem_send__msg = __tmpvar__comb_msg;
    temp_cr_size__enq__msg = size_mem_recv__msg[6'd47:6'd48 - 6'd32];
    temp_cr_addr__enq__msg = { 32'd0, cr_q__deq__ret };
    size_addr_q__enq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    temp_cr_size__deq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    temp_cr_addr__deq__en = ( size_addr_q__enq__rdy & temp_cr_size__deq__rdy ) & temp_cr_addr__deq__rdy;
    size_addr_q__enq__msg = { temp_cr_size__deq__ret, temp_cr_addr__deq__ret };
    clause_fetcher__size_recv__en = clause_fetcher__size_recv__rdy & size_addr_q__deq__rdy;
    clause_fetcher__addr_recv__en = clause_fetcher__addr_recv__rdy & size_addr_q__deq__rdy;
    size_addr_q__deq__en = ( clause_fetcher__size_recv__rdy & clause_fetcher__addr_recv__rdy ) & size_addr_q__deq__rdy;
    clause_fetcher__size_recv__msg = size_addr_q__deq__ret[7'd31:7'd0];
    clause_fetcher__addr_recv__msg = size_addr_q__deq__ret[7'd95:7'd32];
    value_mem_send__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    clause_lit_queue__deq__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    temp_value__enq__en = temp_lit__enq__rdy & size_mem_recv__en;
    size_mem_recv__rdy = temp_value__enq__rdy;
    temp_lit__enq__en = ( ( value_mem_send__rdy & temp_value__enq__rdy ) & temp_lit__enq__rdy ) & clause_lit_queue__deq__rdy;
    value_mem_send__msg = { 12'd0, 32'd0, clause_lit_queue__deq__ret, 3'd0 };
    temp_value__enq__msg = value_mem_recv__msg[5'd16:5'd17 - 5'd2];
    temp_lit__enq__msg = clause_lit_queue__deq__ret;
    clause_lit_with_value__enq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    temp_value__deq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    temp_lit__deq__en = ( clause_lit_with_value__enq__rdy & temp_value__deq__rdy ) & temp_lit__deq__rdy;
    clause_lit_with_value__enq__msg = { temp_lit__deq__ret, temp_value__deq__ret };
    clause_lit_with_value__deq__en = clause_lit_with_value__deq__rdy & clause_process_fsm__value_recv__rdy;
    clause_process_fsm__value_recv__en = clause_lit_with_value__deq__rdy & clause_process_fsm__value_recv__rdy;
  end

  // Connections
  assign cr_q__clk = clk;
  assign cr_q__reset = reset;
  assign size_addr_q__clk = clk;
  assign size_addr_q__reset = reset;
  assign clause_fetcher__clk = clk;
  assign clause_fetcher__reset = reset;
  assign clause_lit_queue__clk = clk;
  assign clause_lit_queue__reset = reset;
  assign clause_lit_with_value__clk = clk;
  assign clause_lit_with_value__reset = reset;
  assign clause_process_fsm__clk = clk;
  assign clause_process_fsm__reset = reset;
  assign temp_cr_size__clk = clk;
  assign temp_cr_size__reset = reset;
  assign temp_cr_addr__clk = clk;
  assign temp_cr_addr__reset = reset;
  assign cr_q__enq__en = cr_recv__en;
  assign cr_q__enq__msg = cr_recv__msg;
  assign cr_recv__rdy = cr_q__enq__rdy;
  assign clause_lit_queue__enq__en = clause_fetcher__data_out__en;
  assign clause_lit_queue__enq__msg = clause_fetcher__data_out__msg;
  assign clause_fetcher__data_out__rdy = clause_lit_queue__enq__rdy;
  assign to_trail__en = clause_process_fsm__generated_send__en;
  assign to_trail__msg = clause_process_fsm__generated_send__msg;
  assign clause_process_fsm__generated_send__rdy = to_trail__rdy;
  assign conf = clause_process_fsm__conflict;
  assign temp_lit__clk = clk;
  assign temp_lit__reset = reset;
  assign temp_value__clk = clk;
  assign temp_value__reset = reset;
  assign clause_fetcher__mem_in__en = fetcher_mem_in__en;
  assign clause_fetcher__mem_in__msg = fetcher_mem_in__msg;
  assign fetcher_mem_in__rdy = clause_fetcher__mem_in__rdy;
  assign fetcher_mem_out__en = clause_fetcher__mem_out__en;
  assign fetcher_mem_out__msg = clause_fetcher__mem_out__msg;
  assign clause_fetcher__mem_out__rdy = fetcher_mem_out__rdy;

endmodule


// PyMTL Component Mux Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py
module Mux__Type_Bits1__ninputs_9
(
  input  logic [0:0]    clk,
  input  logic [0:0]    in___0,
  input  logic [0:0]    in___1,
  input  logic [0:0]    in___2,
  input  logic [0:0]    in___3,
  input  logic [0:0]    in___4,
  input  logic [0:0]    in___5,
  input  logic [0:0]    in___6,
  input  logic [0:0]    in___7,
  input  logic [0:0]    in___8,
  output logic [0:0]    out,
  input  logic [0:0]    reset,
  input  logic [3:0]    sel
);
  // Struct/Array ports in the form of wires
  logic [0:0]    in_ [0:8];

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py:13
  // @update
  // def up_mux():
  //   s.out @= s.in_[ s.sel ]
  
  always_comb begin : up_mux
    out = in_[sel];
  end

  // Connections
  assign in_[0] = in___0;
  assign in_[1] = in___1;
  assign in_[2] = in___2;
  assign in_[3] = in___3;
  assign in_[4] = in___4;
  assign in_[5] = in___5;
  assign in_[6] = in___6;
  assign in_[7] = in___7;
  assign in_[8] = in___8;

endmodule


// PyMTL Component PipeQueueCtrlRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module PipeQueueCtrlRTL__num_entries_16
(
  input  logic [0:0]    clk,
  output logic [4:0]    count,
  input  logic [0:0]    deq_en,
  output logic [0:0]    deq_rdy,
  input  logic [0:0]    enq_en,
  output logic [0:0]    enq_rdy,
  output logic [3:0]    raddr,
  input  logic [0:0]    reset,
  output logic [3:0]    waddr,
  output logic [0:0]    wen
);
  // Wire declarations
  logic [0:0]    deq_xfer;
  logic [0:0]    enq_xfer;
  logic [3:0]    head;
  logic [3:0]    tail;

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:202
  // s.deq_rdy //= lambda: ~s.reset & ( s.count > CountType(0) )
  
  always_comb begin : _lambda__s_n_to_trail_input_buffer_0__ctrl_deq_rdy
    deq_rdy = ( ~reset ) & ( count > 5'd0 );
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:206
  // s.deq_xfer //= lambda: s.deq_en & s.deq_rdy
  
  always_comb begin : _lambda__s_n_to_trail_input_buffer_0__ctrl_deq_xfer
    deq_xfer = deq_en & deq_rdy;
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:203
  // s.enq_rdy //= lambda: ~s.reset & ( ( s.count < s.num_entries ) | s.deq_en )
  
  always_comb begin : _lambda__s_n_to_trail_input_buffer_0__ctrl_enq_rdy
    enq_rdy = ( ~reset ) & ( ( count < 5'd16 ) | deq_en );
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:205
  // s.enq_xfer //= lambda: s.enq_en & s.enq_rdy
  
  always_comb begin : _lambda__s_n_to_trail_input_buffer_0__ctrl_enq_xfer
    enq_xfer = enq_en & enq_rdy;
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:208
  // @update_ff
  // def up_reg():
  // 
  //   if s.reset:
  //     s.head  <<= PtrType(0)
  //     s.tail  <<= PtrType(0)
  //     s.count <<= CountType(0)
  // 
  //   else:
  //     if s.deq_xfer:
  //       s.head <<= s.head + PtrType(1) if s.head < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer:
  //       s.tail <<= s.tail + PtrType(1) if s.tail < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer & ~s.deq_xfer:
  //       s.count <<= s.count + CountType(1)
  //     if ~s.enq_xfer & s.deq_xfer:
  //       s.count <<= s.count - CountType(1)
  
  always_ff @(posedge clk) begin : up_reg
    if ( reset ) begin
      head <= 4'd0;
      tail <= 4'd0;
      count <= 5'd0;
    end
    else begin
      if ( deq_xfer ) begin
        head <= ( head < 4'd15 ) ? head + 4'd1 : 4'd0;
      end
      if ( enq_xfer ) begin
        tail <= ( tail < 4'd15 ) ? tail + 4'd1 : 4'd0;
      end
      if ( enq_xfer & ( ~deq_xfer ) ) begin
        count <= count + 5'd1;
      end
      if ( ( ~enq_xfer ) & deq_xfer ) begin
        count <= count - 5'd1;
      end
    end
  end

  // Connections
  assign wen = enq_xfer;
  assign waddr = tail;
  assign raddr = head;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_32__nregs_16__rd_ports_1__wr_ports_1__const_zero_False
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py
module RegisterFile__ceb62950cd6b6757
(
  input  logic [0:0]    clk,
  input  logic [3:0]    raddr__0,
  output logic [31:0]   rdata__0,
  input  logic [0:0]    reset,
  input  logic [3:0]    waddr__0,
  input  logic [31:0]   wdata__0,
  input  logic [0:0]    wen__0
);
  // Struct/Array ports in the form of wires
  logic [3:0]    raddr [0:0];
  logic [31:0]   rdata [0:0];
  logic [3:0]    waddr [0:0];
  logic [31:0]   wdata [0:0];
  logic [0:0]    wen [0:0];

  // Wire declarations
  logic [31:0]   regs [0:15];

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  integer __loopvar__up_rf_read_i;
  
  always_comb begin : up_rf_read
    for ( __loopvar__up_rf_read_i = 1'd0; __loopvar__up_rf_read_i < 1'd1; __loopvar__up_rf_read_i = __loopvar__up_rf_read_i + 1'd1 )
      rdata[__loopvar__up_rf_read_i] = regs[raddr[__loopvar__up_rf_read_i]];
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  integer __loopvar__up_rf_write_i;
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( __loopvar__up_rf_write_i = 1'd0; __loopvar__up_rf_write_i < 1'd1; __loopvar__up_rf_write_i = __loopvar__up_rf_write_i + 1'd1 )
      if ( wen[__loopvar__up_rf_write_i] ) begin
        regs[waddr[__loopvar__up_rf_write_i]] <= wdata[__loopvar__up_rf_write_i];
      end
  end

  // Connections
  assign raddr[0] = raddr__0;
  assign rdata__0 = rdata[0];
  assign waddr[0] = waddr__0;
  assign wdata[0] = wdata__0;
  assign wen[0] = wen__0;

endmodule


// PyMTL Component NormalQueueDpathRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module NormalQueueDpathRTL__EntryType_32__num_entries_16
(
  input  logic [0:0]    clk,
  output logic [31:0]   deq_ret,
  input  logic [31:0]   enq_msg,
  input  logic [3:0]    raddr,
  input  logic [0:0]    reset,
  input  logic [3:0]    waddr,
  input  logic [0:0]    wen
);
  // Struct/Array ports of sub-components in the form of wires
  logic [3:0]    queue__raddr [0:0];
  logic [31:0]   queue__rdata [0:0];
  logic [3:0]    queue__waddr [0:0];
  logic [31:0]   queue__wdata [0:0];
  logic [0:0]    queue__wen [0:0];

  // Sub-component declarations
  logic [0:0]    queue__clk;
  logic [3:0]    queue__raddr__0;
  logic [31:0]   queue__rdata__0;
  logic [0:0]    queue__reset;
  logic [3:0]    queue__waddr__0;
  logic [31:0]   queue__wdata__0;
  logic [0:0]    queue__wen__0;

  RegisterFile__ceb62950cd6b6757 queue
  (
    .clk            (         queue__clk        ),
    .raddr__0       (      queue__raddr__0      ),
    .rdata__0       (      queue__rdata__0      ),
    .reset          (        queue__reset       ),
    .waddr__0       (      queue__waddr__0      ),
    .wdata__0       (      queue__wdata__0      ),
    .wen__0         (       queue__wen__0       )
  );

  // Connect struct/array ports and their wire forms
  assign queue__raddr__0 = queue__raddr[0];
  assign queue__rdata[0] = queue__rdata__0;
  assign queue__waddr__0 = queue__waddr[0];
  assign queue__wdata__0 = queue__wdata[0];
  assign queue__wen__0 = queue__wen[0];

  // Connections
  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_ret = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component PipeQueueRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module PipeQueueRTL__EntryType_32__num_entries_16
(
  input  logic [0:0]    clk,
  output logic [4:0]    count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [31:0]   deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [31:0]   enq__msg,
  output logic [0:0]    enq__rdy
);
  // Sub-component declarations
  logic [0:0]    ctrl__clk;
  logic [4:0]    ctrl__count;
  logic [0:0]    ctrl__deq_en;
  logic [0:0]    ctrl__deq_rdy;
  logic [0:0]    ctrl__enq_en;
  logic [0:0]    ctrl__enq_rdy;
  logic [3:0]    ctrl__raddr;
  logic [0:0]    ctrl__reset;
  logic [3:0]    ctrl__waddr;
  logic [0:0]    ctrl__wen;

  PipeQueueCtrlRTL__num_entries_16 ctrl
  (
    .clk            (         ctrl__clk         ),
    .count          (        ctrl__count        ),
    .deq_en         (        ctrl__deq_en       ),
    .deq_rdy        (       ctrl__deq_rdy       ),
    .enq_en         (        ctrl__enq_en       ),
    .enq_rdy        (       ctrl__enq_rdy       ),
    .raddr          (        ctrl__raddr        ),
    .reset          (        ctrl__reset        ),
    .waddr          (        ctrl__waddr        ),
    .wen            (         ctrl__wen         )
  );

  logic [0:0]    dpath__clk;
  logic [31:0]   dpath__deq_ret;
  logic [31:0]   dpath__enq_msg;
  logic [3:0]    dpath__raddr;
  logic [0:0]    dpath__reset;
  logic [3:0]    dpath__waddr;
  logic [0:0]    dpath__wen;

  NormalQueueDpathRTL__EntryType_32__num_entries_16 dpath
  (
    .clk            (         dpath__clk        ),
    .deq_ret        (       dpath__deq_ret      ),
    .enq_msg        (       dpath__enq_msg      ),
    .raddr          (        dpath__raddr       ),
    .reset          (        dpath__reset       ),
    .waddr          (        dpath__waddr       ),
    .wen            (         dpath__wen        )
  );

  // Connections
  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_en = enq__en;
  assign enq__rdy = ctrl__enq_rdy;
  assign ctrl__deq_en = deq__en;
  assign deq__rdy = ctrl__deq_rdy;
  assign count = ctrl__count;
  assign dpath__enq_msg = enq__msg;
  assign deq__ret = dpath__deq_ret;

endmodule


// PyMTL Component Mux Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py
module Mux__Type_32__ninputs_9
(
  input  logic [0:0]    clk,
  input  logic [31:0]   in___0,
  input  logic [31:0]   in___1,
  input  logic [31:0]   in___2,
  input  logic [31:0]   in___3,
  input  logic [31:0]   in___4,
  input  logic [31:0]   in___5,
  input  logic [31:0]   in___6,
  input  logic [31:0]   in___7,
  input  logic [31:0]   in___8,
  output logic [31:0]   out,
  input  logic [0:0]    reset,
  input  logic [3:0]    sel
);
  // Struct/Array ports in the form of wires
  logic [31:0]   in_ [0:8];

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py:13
  // @update
  // def up_mux():
  //   s.out @= s.in_[ s.sel ]
  
  always_comb begin : up_mux
    out = in_[sel];
  end

  // Connections
  assign in_[0] = in___0;
  assign in_[1] = in___1;
  assign in_[2] = in___2;
  assign in_[3] = in___3;
  assign in_[4] = in___4;
  assign in_[5] = in___5;
  assign in_[6] = in___6;
  assign in_[7] = in___7;
  assign in_[8] = in___8;

endmodule


// PyMTL Component NToOneDispWithBuffer Definition
// Full name: NToOneDispWithBuffer__data_type_32__num_in_9__input_buffer_size_16__out_put_buffer_size_16
// At /home/sjq/git/pymtl_project/satacc/utils/nToOneDisp.py
module NToOneDispWithBuffer__27f9eb57a4cda45a
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  input  logic [0:0]    recvs__0__en,
  input  logic [0:0]    recvs__1__en,
  input  logic [0:0]    recvs__2__en,
  input  logic [0:0]    recvs__3__en,
  input  logic [0:0]    recvs__4__en,
  input  logic [0:0]    recvs__5__en,
  input  logic [0:0]    recvs__6__en,
  input  logic [0:0]    recvs__7__en,
  input  logic [0:0]    recvs__8__en,
  input  logic [31:0]   recvs__0__msg,
  input  logic [31:0]   recvs__1__msg,
  input  logic [31:0]   recvs__2__msg,
  input  logic [31:0]   recvs__3__msg,
  input  logic [31:0]   recvs__4__msg,
  input  logic [31:0]   recvs__5__msg,
  input  logic [31:0]   recvs__6__msg,
  input  logic [31:0]   recvs__7__msg,
  input  logic [31:0]   recvs__8__msg,
  output logic [0:0]    recvs__0__rdy,
  output logic [0:0]    recvs__1__rdy,
  output logic [0:0]    recvs__2__rdy,
  output logic [0:0]    recvs__3__rdy,
  output logic [0:0]    recvs__4__rdy,
  output logic [0:0]    recvs__5__rdy,
  output logic [0:0]    recvs__6__rdy,
  output logic [0:0]    recvs__7__rdy,
  output logic [0:0]    recvs__8__rdy,
  output logic [0:0]    send__en,
  output logic [31:0]   send__msg,
  input  logic [0:0]    send__rdy
);
  // Struct/Array ports in the form of wires
  logic [0:0]    recvs__en [0:8];
  logic [31:0]   recvs__msg [0:8];
  logic [0:0]    recvs__rdy [0:8];

  // Wire declarations
  logic [3:0]    current_chose;

  // Struct/Array ports of sub-components in the form of wires
  logic [0:0]    choose__in_ [0:8];
  logic [0:0]    input_buffer__clk [0:8];
  logic [4:0]    input_buffer__count [0:8];
  logic [0:0]    input_buffer__reset [0:8];
  logic [0:0]    input_buffer__deq__en [0:8];
  logic [0:0]    input_buffer__deq__rdy [0:8];
  logic [31:0]   input_buffer__deq__ret [0:8];
  logic [0:0]    input_buffer__enq__en [0:8];
  logic [31:0]   input_buffer__enq__msg [0:8];
  logic [0:0]    input_buffer__enq__rdy [0:8];
  logic [31:0]   msg_choose__in_ [0:8];

  // Sub-component declarations
  logic [0:0]    choose__clk;
  logic [0:0]    choose__in___0;
  logic [0:0]    choose__in___1;
  logic [0:0]    choose__in___2;
  logic [0:0]    choose__in___3;
  logic [0:0]    choose__in___4;
  logic [0:0]    choose__in___5;
  logic [0:0]    choose__in___6;
  logic [0:0]    choose__in___7;
  logic [0:0]    choose__in___8;
  logic [0:0]    choose__out;
  logic [0:0]    choose__reset;
  logic [3:0]    choose__sel;

  Mux__Type_Bits1__ninputs_9 choose
  (
    .clk            (        choose__clk        ),
    .in___0         (       choose__in___0      ),
    .in___1         (       choose__in___1      ),
    .in___2         (       choose__in___2      ),
    .in___3         (       choose__in___3      ),
    .in___4         (       choose__in___4      ),
    .in___5         (       choose__in___5      ),
    .in___6         (       choose__in___6      ),
    .in___7         (       choose__in___7      ),
    .in___8         (       choose__in___8      ),
    .out            (        choose__out        ),
    .reset          (       choose__reset       ),
    .sel            (        choose__sel        )
  );

  logic [0:0]    input_buffer__0__clk;
  logic [4:0]    input_buffer__0__count;
  logic [0:0]    input_buffer__0__reset;
  logic [0:0]    input_buffer__0__deq__en;
  logic [0:0]    input_buffer__0__deq__rdy;
  logic [31:0]   input_buffer__0__deq__ret;
  logic [0:0]    input_buffer__0__enq__en;
  logic [31:0]   input_buffer__0__enq__msg;
  logic [0:0]    input_buffer__0__enq__rdy;

  PipeQueueRTL__EntryType_32__num_entries_16 input_buffer__0
  (
    .clk            (    input_buffer__0__clk   ),
    .count          (   input_buffer__0__count  ),
    .reset          (   input_buffer__0__reset  ),
    .deq__en        (  input_buffer__0__deq__en ),
    .deq__rdy       ( input_buffer__0__deq__rdy ),
    .deq__ret       ( input_buffer__0__deq__ret ),
    .enq__en        (  input_buffer__0__enq__en ),
    .enq__msg       ( input_buffer__0__enq__msg ),
    .enq__rdy       ( input_buffer__0__enq__rdy )
  );

  logic [0:0]    input_buffer__1__clk;
  logic [4:0]    input_buffer__1__count;
  logic [0:0]    input_buffer__1__reset;
  logic [0:0]    input_buffer__1__deq__en;
  logic [0:0]    input_buffer__1__deq__rdy;
  logic [31:0]   input_buffer__1__deq__ret;
  logic [0:0]    input_buffer__1__enq__en;
  logic [31:0]   input_buffer__1__enq__msg;
  logic [0:0]    input_buffer__1__enq__rdy;

  PipeQueueRTL__EntryType_32__num_entries_16 input_buffer__1
  (
    .clk            (    input_buffer__1__clk   ),
    .count          (   input_buffer__1__count  ),
    .reset          (   input_buffer__1__reset  ),
    .deq__en        (  input_buffer__1__deq__en ),
    .deq__rdy       ( input_buffer__1__deq__rdy ),
    .deq__ret       ( input_buffer__1__deq__ret ),
    .enq__en        (  input_buffer__1__enq__en ),
    .enq__msg       ( input_buffer__1__enq__msg ),
    .enq__rdy       ( input_buffer__1__enq__rdy )
  );

  logic [0:0]    input_buffer__2__clk;
  logic [4:0]    input_buffer__2__count;
  logic [0:0]    input_buffer__2__reset;
  logic [0:0]    input_buffer__2__deq__en;
  logic [0:0]    input_buffer__2__deq__rdy;
  logic [31:0]   input_buffer__2__deq__ret;
  logic [0:0]    input_buffer__2__enq__en;
  logic [31:0]   input_buffer__2__enq__msg;
  logic [0:0]    input_buffer__2__enq__rdy;

  PipeQueueRTL__EntryType_32__num_entries_16 input_buffer__2
  (
    .clk            (    input_buffer__2__clk   ),
    .count          (   input_buffer__2__count  ),
    .reset          (   input_buffer__2__reset  ),
    .deq__en        (  input_buffer__2__deq__en ),
    .deq__rdy       ( input_buffer__2__deq__rdy ),
    .deq__ret       ( input_buffer__2__deq__ret ),
    .enq__en        (  input_buffer__2__enq__en ),
    .enq__msg       ( input_buffer__2__enq__msg ),
    .enq__rdy       ( input_buffer__2__enq__rdy )
  );

  logic [0:0]    input_buffer__3__clk;
  logic [4:0]    input_buffer__3__count;
  logic [0:0]    input_buffer__3__reset;
  logic [0:0]    input_buffer__3__deq__en;
  logic [0:0]    input_buffer__3__deq__rdy;
  logic [31:0]   input_buffer__3__deq__ret;
  logic [0:0]    input_buffer__3__enq__en;
  logic [31:0]   input_buffer__3__enq__msg;
  logic [0:0]    input_buffer__3__enq__rdy;

  PipeQueueRTL__EntryType_32__num_entries_16 input_buffer__3
  (
    .clk            (    input_buffer__3__clk   ),
    .count          (   input_buffer__3__count  ),
    .reset          (   input_buffer__3__reset  ),
    .deq__en        (  input_buffer__3__deq__en ),
    .deq__rdy       ( input_buffer__3__deq__rdy ),
    .deq__ret       ( input_buffer__3__deq__ret ),
    .enq__en        (  input_buffer__3__enq__en ),
    .enq__msg       ( input_buffer__3__enq__msg ),
    .enq__rdy       ( input_buffer__3__enq__rdy )
  );

  logic [0:0]    input_buffer__4__clk;
  logic [4:0]    input_buffer__4__count;
  logic [0:0]    input_buffer__4__reset;
  logic [0:0]    input_buffer__4__deq__en;
  logic [0:0]    input_buffer__4__deq__rdy;
  logic [31:0]   input_buffer__4__deq__ret;
  logic [0:0]    input_buffer__4__enq__en;
  logic [31:0]   input_buffer__4__enq__msg;
  logic [0:0]    input_buffer__4__enq__rdy;

  PipeQueueRTL__EntryType_32__num_entries_16 input_buffer__4
  (
    .clk            (    input_buffer__4__clk   ),
    .count          (   input_buffer__4__count  ),
    .reset          (   input_buffer__4__reset  ),
    .deq__en        (  input_buffer__4__deq__en ),
    .deq__rdy       ( input_buffer__4__deq__rdy ),
    .deq__ret       ( input_buffer__4__deq__ret ),
    .enq__en        (  input_buffer__4__enq__en ),
    .enq__msg       ( input_buffer__4__enq__msg ),
    .enq__rdy       ( input_buffer__4__enq__rdy )
  );

  logic [0:0]    input_buffer__5__clk;
  logic [4:0]    input_buffer__5__count;
  logic [0:0]    input_buffer__5__reset;
  logic [0:0]    input_buffer__5__deq__en;
  logic [0:0]    input_buffer__5__deq__rdy;
  logic [31:0]   input_buffer__5__deq__ret;
  logic [0:0]    input_buffer__5__enq__en;
  logic [31:0]   input_buffer__5__enq__msg;
  logic [0:0]    input_buffer__5__enq__rdy;

  PipeQueueRTL__EntryType_32__num_entries_16 input_buffer__5
  (
    .clk            (    input_buffer__5__clk   ),
    .count          (   input_buffer__5__count  ),
    .reset          (   input_buffer__5__reset  ),
    .deq__en        (  input_buffer__5__deq__en ),
    .deq__rdy       ( input_buffer__5__deq__rdy ),
    .deq__ret       ( input_buffer__5__deq__ret ),
    .enq__en        (  input_buffer__5__enq__en ),
    .enq__msg       ( input_buffer__5__enq__msg ),
    .enq__rdy       ( input_buffer__5__enq__rdy )
  );

  logic [0:0]    input_buffer__6__clk;
  logic [4:0]    input_buffer__6__count;
  logic [0:0]    input_buffer__6__reset;
  logic [0:0]    input_buffer__6__deq__en;
  logic [0:0]    input_buffer__6__deq__rdy;
  logic [31:0]   input_buffer__6__deq__ret;
  logic [0:0]    input_buffer__6__enq__en;
  logic [31:0]   input_buffer__6__enq__msg;
  logic [0:0]    input_buffer__6__enq__rdy;

  PipeQueueRTL__EntryType_32__num_entries_16 input_buffer__6
  (
    .clk            (    input_buffer__6__clk   ),
    .count          (   input_buffer__6__count  ),
    .reset          (   input_buffer__6__reset  ),
    .deq__en        (  input_buffer__6__deq__en ),
    .deq__rdy       ( input_buffer__6__deq__rdy ),
    .deq__ret       ( input_buffer__6__deq__ret ),
    .enq__en        (  input_buffer__6__enq__en ),
    .enq__msg       ( input_buffer__6__enq__msg ),
    .enq__rdy       ( input_buffer__6__enq__rdy )
  );

  logic [0:0]    input_buffer__7__clk;
  logic [4:0]    input_buffer__7__count;
  logic [0:0]    input_buffer__7__reset;
  logic [0:0]    input_buffer__7__deq__en;
  logic [0:0]    input_buffer__7__deq__rdy;
  logic [31:0]   input_buffer__7__deq__ret;
  logic [0:0]    input_buffer__7__enq__en;
  logic [31:0]   input_buffer__7__enq__msg;
  logic [0:0]    input_buffer__7__enq__rdy;

  PipeQueueRTL__EntryType_32__num_entries_16 input_buffer__7
  (
    .clk            (    input_buffer__7__clk   ),
    .count          (   input_buffer__7__count  ),
    .reset          (   input_buffer__7__reset  ),
    .deq__en        (  input_buffer__7__deq__en ),
    .deq__rdy       ( input_buffer__7__deq__rdy ),
    .deq__ret       ( input_buffer__7__deq__ret ),
    .enq__en        (  input_buffer__7__enq__en ),
    .enq__msg       ( input_buffer__7__enq__msg ),
    .enq__rdy       ( input_buffer__7__enq__rdy )
  );

  logic [0:0]    input_buffer__8__clk;
  logic [4:0]    input_buffer__8__count;
  logic [0:0]    input_buffer__8__reset;
  logic [0:0]    input_buffer__8__deq__en;
  logic [0:0]    input_buffer__8__deq__rdy;
  logic [31:0]   input_buffer__8__deq__ret;
  logic [0:0]    input_buffer__8__enq__en;
  logic [31:0]   input_buffer__8__enq__msg;
  logic [0:0]    input_buffer__8__enq__rdy;

  PipeQueueRTL__EntryType_32__num_entries_16 input_buffer__8
  (
    .clk            (    input_buffer__8__clk   ),
    .count          (   input_buffer__8__count  ),
    .reset          (   input_buffer__8__reset  ),
    .deq__en        (  input_buffer__8__deq__en ),
    .deq__rdy       ( input_buffer__8__deq__rdy ),
    .deq__ret       ( input_buffer__8__deq__ret ),
    .enq__en        (  input_buffer__8__enq__en ),
    .enq__msg       ( input_buffer__8__enq__msg ),
    .enq__rdy       ( input_buffer__8__enq__rdy )
  );

  logic [0:0]    msg_choose__clk;
  logic [31:0]   msg_choose__in___0;
  logic [31:0]   msg_choose__in___1;
  logic [31:0]   msg_choose__in___2;
  logic [31:0]   msg_choose__in___3;
  logic [31:0]   msg_choose__in___4;
  logic [31:0]   msg_choose__in___5;
  logic [31:0]   msg_choose__in___6;
  logic [31:0]   msg_choose__in___7;
  logic [31:0]   msg_choose__in___8;
  logic [31:0]   msg_choose__out;
  logic [0:0]    msg_choose__reset;
  logic [3:0]    msg_choose__sel;

  Mux__Type_32__ninputs_9 msg_choose
  (
    .clk            (      msg_choose__clk      ),
    .in___0         (     msg_choose__in___0    ),
    .in___1         (     msg_choose__in___1    ),
    .in___2         (     msg_choose__in___2    ),
    .in___3         (     msg_choose__in___3    ),
    .in___4         (     msg_choose__in___4    ),
    .in___5         (     msg_choose__in___5    ),
    .in___6         (     msg_choose__in___6    ),
    .in___7         (     msg_choose__in___7    ),
    .in___8         (     msg_choose__in___8    ),
    .out            (      msg_choose__out      ),
    .reset          (     msg_choose__reset     ),
    .sel            (      msg_choose__sel      )
  );

  logic [0:0]    out_buffer__clk;
  logic [4:0]    out_buffer__count;
  logic [0:0]    out_buffer__reset;
  logic [0:0]    out_buffer__deq__en;
  logic [0:0]    out_buffer__deq__rdy;
  logic [31:0]   out_buffer__deq__ret;
  logic [0:0]    out_buffer__enq__en;
  logic [31:0]   out_buffer__enq__msg;
  logic [0:0]    out_buffer__enq__rdy;

  PipeQueueRTL__EntryType_32__num_entries_16 out_buffer
  (
    .clk            (      out_buffer__clk      ),
    .count          (     out_buffer__count     ),
    .reset          (     out_buffer__reset     ),
    .deq__en        (    out_buffer__deq__en    ),
    .deq__rdy       (    out_buffer__deq__rdy   ),
    .deq__ret       (    out_buffer__deq__ret   ),
    .enq__en        (    out_buffer__enq__en    ),
    .enq__msg       (    out_buffer__enq__msg   ),
    .enq__rdy       (    out_buffer__enq__rdy   )
  );

  // Connect struct/array ports and their wire forms
  assign choose__in___0 = choose__in_[0];
  assign choose__in___1 = choose__in_[1];
  assign choose__in___2 = choose__in_[2];
  assign choose__in___3 = choose__in_[3];
  assign choose__in___4 = choose__in_[4];
  assign choose__in___5 = choose__in_[5];
  assign choose__in___6 = choose__in_[6];
  assign choose__in___7 = choose__in_[7];
  assign choose__in___8 = choose__in_[8];
  assign input_buffer__0__clk = input_buffer__clk[0];
  assign input_buffer__1__clk = input_buffer__clk[1];
  assign input_buffer__2__clk = input_buffer__clk[2];
  assign input_buffer__3__clk = input_buffer__clk[3];
  assign input_buffer__4__clk = input_buffer__clk[4];
  assign input_buffer__5__clk = input_buffer__clk[5];
  assign input_buffer__6__clk = input_buffer__clk[6];
  assign input_buffer__7__clk = input_buffer__clk[7];
  assign input_buffer__8__clk = input_buffer__clk[8];
  assign input_buffer__count[0] = input_buffer__0__count;
  assign input_buffer__count[1] = input_buffer__1__count;
  assign input_buffer__count[2] = input_buffer__2__count;
  assign input_buffer__count[3] = input_buffer__3__count;
  assign input_buffer__count[4] = input_buffer__4__count;
  assign input_buffer__count[5] = input_buffer__5__count;
  assign input_buffer__count[6] = input_buffer__6__count;
  assign input_buffer__count[7] = input_buffer__7__count;
  assign input_buffer__count[8] = input_buffer__8__count;
  assign input_buffer__0__reset = input_buffer__reset[0];
  assign input_buffer__1__reset = input_buffer__reset[1];
  assign input_buffer__2__reset = input_buffer__reset[2];
  assign input_buffer__3__reset = input_buffer__reset[3];
  assign input_buffer__4__reset = input_buffer__reset[4];
  assign input_buffer__5__reset = input_buffer__reset[5];
  assign input_buffer__6__reset = input_buffer__reset[6];
  assign input_buffer__7__reset = input_buffer__reset[7];
  assign input_buffer__8__reset = input_buffer__reset[8];
  assign input_buffer__0__deq__en = input_buffer__deq__en[0];
  assign input_buffer__1__deq__en = input_buffer__deq__en[1];
  assign input_buffer__2__deq__en = input_buffer__deq__en[2];
  assign input_buffer__3__deq__en = input_buffer__deq__en[3];
  assign input_buffer__4__deq__en = input_buffer__deq__en[4];
  assign input_buffer__5__deq__en = input_buffer__deq__en[5];
  assign input_buffer__6__deq__en = input_buffer__deq__en[6];
  assign input_buffer__7__deq__en = input_buffer__deq__en[7];
  assign input_buffer__8__deq__en = input_buffer__deq__en[8];
  assign input_buffer__deq__rdy[0] = input_buffer__0__deq__rdy;
  assign input_buffer__deq__rdy[1] = input_buffer__1__deq__rdy;
  assign input_buffer__deq__rdy[2] = input_buffer__2__deq__rdy;
  assign input_buffer__deq__rdy[3] = input_buffer__3__deq__rdy;
  assign input_buffer__deq__rdy[4] = input_buffer__4__deq__rdy;
  assign input_buffer__deq__rdy[5] = input_buffer__5__deq__rdy;
  assign input_buffer__deq__rdy[6] = input_buffer__6__deq__rdy;
  assign input_buffer__deq__rdy[7] = input_buffer__7__deq__rdy;
  assign input_buffer__deq__rdy[8] = input_buffer__8__deq__rdy;
  assign input_buffer__deq__ret[0] = input_buffer__0__deq__ret;
  assign input_buffer__deq__ret[1] = input_buffer__1__deq__ret;
  assign input_buffer__deq__ret[2] = input_buffer__2__deq__ret;
  assign input_buffer__deq__ret[3] = input_buffer__3__deq__ret;
  assign input_buffer__deq__ret[4] = input_buffer__4__deq__ret;
  assign input_buffer__deq__ret[5] = input_buffer__5__deq__ret;
  assign input_buffer__deq__ret[6] = input_buffer__6__deq__ret;
  assign input_buffer__deq__ret[7] = input_buffer__7__deq__ret;
  assign input_buffer__deq__ret[8] = input_buffer__8__deq__ret;
  assign input_buffer__0__enq__en = input_buffer__enq__en[0];
  assign input_buffer__1__enq__en = input_buffer__enq__en[1];
  assign input_buffer__2__enq__en = input_buffer__enq__en[2];
  assign input_buffer__3__enq__en = input_buffer__enq__en[3];
  assign input_buffer__4__enq__en = input_buffer__enq__en[4];
  assign input_buffer__5__enq__en = input_buffer__enq__en[5];
  assign input_buffer__6__enq__en = input_buffer__enq__en[6];
  assign input_buffer__7__enq__en = input_buffer__enq__en[7];
  assign input_buffer__8__enq__en = input_buffer__enq__en[8];
  assign input_buffer__0__enq__msg = input_buffer__enq__msg[0];
  assign input_buffer__1__enq__msg = input_buffer__enq__msg[1];
  assign input_buffer__2__enq__msg = input_buffer__enq__msg[2];
  assign input_buffer__3__enq__msg = input_buffer__enq__msg[3];
  assign input_buffer__4__enq__msg = input_buffer__enq__msg[4];
  assign input_buffer__5__enq__msg = input_buffer__enq__msg[5];
  assign input_buffer__6__enq__msg = input_buffer__enq__msg[6];
  assign input_buffer__7__enq__msg = input_buffer__enq__msg[7];
  assign input_buffer__8__enq__msg = input_buffer__enq__msg[8];
  assign input_buffer__enq__rdy[0] = input_buffer__0__enq__rdy;
  assign input_buffer__enq__rdy[1] = input_buffer__1__enq__rdy;
  assign input_buffer__enq__rdy[2] = input_buffer__2__enq__rdy;
  assign input_buffer__enq__rdy[3] = input_buffer__3__enq__rdy;
  assign input_buffer__enq__rdy[4] = input_buffer__4__enq__rdy;
  assign input_buffer__enq__rdy[5] = input_buffer__5__enq__rdy;
  assign input_buffer__enq__rdy[6] = input_buffer__6__enq__rdy;
  assign input_buffer__enq__rdy[7] = input_buffer__7__enq__rdy;
  assign input_buffer__enq__rdy[8] = input_buffer__8__enq__rdy;
  assign msg_choose__in___0 = msg_choose__in_[0];
  assign msg_choose__in___1 = msg_choose__in_[1];
  assign msg_choose__in___2 = msg_choose__in_[2];
  assign msg_choose__in___3 = msg_choose__in_[3];
  assign msg_choose__in___4 = msg_choose__in_[4];
  assign msg_choose__in___5 = msg_choose__in_[5];
  assign msg_choose__in___6 = msg_choose__in_[6];
  assign msg_choose__in___7 = msg_choose__in_[7];
  assign msg_choose__in___8 = msg_choose__in_[8];

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/utils/nToOneDisp.py:129
  // @update
  // def comb():
  //     s.send.en @=s.send.rdy & s.out_buffer.deq.rdy
  //     s.out_buffer.deq.en@=s.send.rdy & s.out_buffer.deq.rdy
  //     s.send.msg@=s.out_buffer.deq.ret
  //     s.out_buffer.enq.en @= s.out_buffer.enq.rdy & s.choose.out
  //     for i in range(num_in):
  //         s.input_buffer[i].deq.en @= 1 if s.out_buffer.enq.rdy & s.input_buffer[i].deq.rdy & (
  //             choose_type(i) == s.current_chose) else 0
  
  integer __loopvar__comb_i;
  
  always_comb begin : comb
    send__en = send__rdy & out_buffer__deq__rdy;
    out_buffer__deq__en = send__rdy & out_buffer__deq__rdy;
    send__msg = out_buffer__deq__ret;
    out_buffer__enq__en = out_buffer__enq__rdy & choose__out;
    for ( __loopvar__comb_i = 1'd0; __loopvar__comb_i < 4'd9; __loopvar__comb_i = __loopvar__comb_i + 1'd1 )
      input_buffer__deq__en[__loopvar__comb_i] = ( ( out_buffer__enq__rdy & input_buffer__deq__rdy[__loopvar__comb_i] ) & ( __loopvar__comb_i == current_chose ) ) ? 1'd1 : 1'd0;
  end

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/utils/nToOneDisp.py:139
  // @update_ff
  // def seq():
  // 
  //     s.current_chose <<= (
  //         s.current_chose + 1) % (num_in-1) if ~(s.reset) else 0
  
  always_ff @(posedge clk) begin : seq
    current_chose <= ( ~reset ) ? ( current_chose + 4'd1 ) % ( 4'd9 - 4'd1 ) : 4'd0;
  end

  // Connections
  assign recvs__en[0] = recvs__0__en;
  assign recvs__en[1] = recvs__1__en;
  assign recvs__en[2] = recvs__2__en;
  assign recvs__en[3] = recvs__3__en;
  assign recvs__en[4] = recvs__4__en;
  assign recvs__en[5] = recvs__5__en;
  assign recvs__en[6] = recvs__6__en;
  assign recvs__en[7] = recvs__7__en;
  assign recvs__en[8] = recvs__8__en;
  assign recvs__msg[0] = recvs__0__msg;
  assign recvs__msg[1] = recvs__1__msg;
  assign recvs__msg[2] = recvs__2__msg;
  assign recvs__msg[3] = recvs__3__msg;
  assign recvs__msg[4] = recvs__4__msg;
  assign recvs__msg[5] = recvs__5__msg;
  assign recvs__msg[6] = recvs__6__msg;
  assign recvs__msg[7] = recvs__7__msg;
  assign recvs__msg[8] = recvs__8__msg;
  assign recvs__0__rdy = recvs__rdy[0];
  assign recvs__1__rdy = recvs__rdy[1];
  assign recvs__2__rdy = recvs__rdy[2];
  assign recvs__3__rdy = recvs__rdy[3];
  assign recvs__4__rdy = recvs__rdy[4];
  assign recvs__5__rdy = recvs__rdy[5];
  assign recvs__6__rdy = recvs__rdy[6];
  assign recvs__7__rdy = recvs__rdy[7];
  assign recvs__8__rdy = recvs__rdy[8];
  assign input_buffer__clk[0] = clk;
  assign input_buffer__reset[0] = reset;
  assign input_buffer__clk[1] = clk;
  assign input_buffer__reset[1] = reset;
  assign input_buffer__clk[2] = clk;
  assign input_buffer__reset[2] = reset;
  assign input_buffer__clk[3] = clk;
  assign input_buffer__reset[3] = reset;
  assign input_buffer__clk[4] = clk;
  assign input_buffer__reset[4] = reset;
  assign input_buffer__clk[5] = clk;
  assign input_buffer__reset[5] = reset;
  assign input_buffer__clk[6] = clk;
  assign input_buffer__reset[6] = reset;
  assign input_buffer__clk[7] = clk;
  assign input_buffer__reset[7] = reset;
  assign input_buffer__clk[8] = clk;
  assign input_buffer__reset[8] = reset;
  assign out_buffer__clk = clk;
  assign out_buffer__reset = reset;
  assign choose__clk = clk;
  assign choose__reset = reset;
  assign msg_choose__clk = clk;
  assign msg_choose__reset = reset;
  assign input_buffer__enq__en[0] = recvs__en[0];
  assign input_buffer__enq__msg[0] = recvs__msg[0];
  assign recvs__rdy[0] = input_buffer__enq__rdy[0];
  assign msg_choose__in_[0] = input_buffer__deq__ret[0];
  assign choose__in_[0] = input_buffer__deq__rdy[0];
  assign input_buffer__enq__en[1] = recvs__en[1];
  assign input_buffer__enq__msg[1] = recvs__msg[1];
  assign recvs__rdy[1] = input_buffer__enq__rdy[1];
  assign msg_choose__in_[1] = input_buffer__deq__ret[1];
  assign choose__in_[1] = input_buffer__deq__rdy[1];
  assign input_buffer__enq__en[2] = recvs__en[2];
  assign input_buffer__enq__msg[2] = recvs__msg[2];
  assign recvs__rdy[2] = input_buffer__enq__rdy[2];
  assign msg_choose__in_[2] = input_buffer__deq__ret[2];
  assign choose__in_[2] = input_buffer__deq__rdy[2];
  assign input_buffer__enq__en[3] = recvs__en[3];
  assign input_buffer__enq__msg[3] = recvs__msg[3];
  assign recvs__rdy[3] = input_buffer__enq__rdy[3];
  assign msg_choose__in_[3] = input_buffer__deq__ret[3];
  assign choose__in_[3] = input_buffer__deq__rdy[3];
  assign input_buffer__enq__en[4] = recvs__en[4];
  assign input_buffer__enq__msg[4] = recvs__msg[4];
  assign recvs__rdy[4] = input_buffer__enq__rdy[4];
  assign msg_choose__in_[4] = input_buffer__deq__ret[4];
  assign choose__in_[4] = input_buffer__deq__rdy[4];
  assign input_buffer__enq__en[5] = recvs__en[5];
  assign input_buffer__enq__msg[5] = recvs__msg[5];
  assign recvs__rdy[5] = input_buffer__enq__rdy[5];
  assign msg_choose__in_[5] = input_buffer__deq__ret[5];
  assign choose__in_[5] = input_buffer__deq__rdy[5];
  assign input_buffer__enq__en[6] = recvs__en[6];
  assign input_buffer__enq__msg[6] = recvs__msg[6];
  assign recvs__rdy[6] = input_buffer__enq__rdy[6];
  assign msg_choose__in_[6] = input_buffer__deq__ret[6];
  assign choose__in_[6] = input_buffer__deq__rdy[6];
  assign input_buffer__enq__en[7] = recvs__en[7];
  assign input_buffer__enq__msg[7] = recvs__msg[7];
  assign recvs__rdy[7] = input_buffer__enq__rdy[7];
  assign msg_choose__in_[7] = input_buffer__deq__ret[7];
  assign choose__in_[7] = input_buffer__deq__rdy[7];
  assign input_buffer__enq__en[8] = recvs__en[8];
  assign input_buffer__enq__msg[8] = recvs__msg[8];
  assign recvs__rdy[8] = input_buffer__enq__rdy[8];
  assign msg_choose__in_[8] = input_buffer__deq__ret[8];
  assign choose__in_[8] = input_buffer__deq__rdy[8];
  assign out_buffer__enq__msg = msg_choose__out;
  assign choose__sel = current_chose;
  assign msg_choose__sel = current_chose;

endmodule


// PyMTL Component PipeQueueCtrlRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module PipeQueueCtrlRTL__num_entries_1024
(
  input  logic [0:0]    clk,
  output logic [10:0]   count,
  input  logic [0:0]    deq_en,
  output logic [0:0]    deq_rdy,
  input  logic [0:0]    enq_en,
  output logic [0:0]    enq_rdy,
  output logic [9:0]    raddr,
  input  logic [0:0]    reset,
  output logic [9:0]    waddr,
  output logic [0:0]    wen
);
  // Wire declarations
  logic [0:0]    deq_xfer;
  logic [0:0]    enq_xfer;
  logic [9:0]    head;
  logic [9:0]    tail;

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:202
  // s.deq_rdy //= lambda: ~s.reset & ( s.count > CountType(0) )
  
  always_comb begin : _lambda__s_trail_trail_ctrl_deq_rdy
    deq_rdy = ( ~reset ) & ( count > 11'd0 );
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:206
  // s.deq_xfer //= lambda: s.deq_en & s.deq_rdy
  
  always_comb begin : _lambda__s_trail_trail_ctrl_deq_xfer
    deq_xfer = deq_en & deq_rdy;
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:203
  // s.enq_rdy //= lambda: ~s.reset & ( ( s.count < s.num_entries ) | s.deq_en )
  
  always_comb begin : _lambda__s_trail_trail_ctrl_enq_rdy
    enq_rdy = ( ~reset ) & ( ( count < 11'd1024 ) | deq_en );
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:205
  // s.enq_xfer //= lambda: s.enq_en & s.enq_rdy
  
  always_comb begin : _lambda__s_trail_trail_ctrl_enq_xfer
    enq_xfer = enq_en & enq_rdy;
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:208
  // @update_ff
  // def up_reg():
  // 
  //   if s.reset:
  //     s.head  <<= PtrType(0)
  //     s.tail  <<= PtrType(0)
  //     s.count <<= CountType(0)
  // 
  //   else:
  //     if s.deq_xfer:
  //       s.head <<= s.head + PtrType(1) if s.head < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer:
  //       s.tail <<= s.tail + PtrType(1) if s.tail < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer & ~s.deq_xfer:
  //       s.count <<= s.count + CountType(1)
  //     if ~s.enq_xfer & s.deq_xfer:
  //       s.count <<= s.count - CountType(1)
  
  always_ff @(posedge clk) begin : up_reg
    if ( reset ) begin
      head <= 10'd0;
      tail <= 10'd0;
      count <= 11'd0;
    end
    else begin
      if ( deq_xfer ) begin
        head <= ( head < 10'd1023 ) ? head + 10'd1 : 10'd0;
      end
      if ( enq_xfer ) begin
        tail <= ( tail < 10'd1023 ) ? tail + 10'd1 : 10'd0;
      end
      if ( enq_xfer & ( ~deq_xfer ) ) begin
        count <= count + 11'd1;
      end
      if ( ( ~enq_xfer ) & deq_xfer ) begin
        count <= count - 11'd1;
      end
    end
  end

  // Connections
  assign wen = enq_xfer;
  assign waddr = tail;
  assign raddr = head;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_Bits32__nregs_1024__rd_ports_1__wr_ports_1__const_zero_False
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py
module RegisterFile__fe9dd4e1161d2f99
(
  input  logic [0:0]    clk,
  input  logic [9:0]    raddr__0,
  output logic [31:0]   rdata__0,
  input  logic [0:0]    reset,
  input  logic [9:0]    waddr__0,
  input  logic [31:0]   wdata__0,
  input  logic [0:0]    wen__0
);
  // Struct/Array ports in the form of wires
  logic [9:0]    raddr [0:0];
  logic [31:0]   rdata [0:0];
  logic [9:0]    waddr [0:0];
  logic [31:0]   wdata [0:0];
  logic [0:0]    wen [0:0];

  // Wire declarations
  logic [31:0]   regs [0:1023];

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  integer __loopvar__up_rf_read_i;
  
  always_comb begin : up_rf_read
    for ( __loopvar__up_rf_read_i = 1'd0; __loopvar__up_rf_read_i < 1'd1; __loopvar__up_rf_read_i = __loopvar__up_rf_read_i + 1'd1 )
      rdata[__loopvar__up_rf_read_i] = regs[raddr[__loopvar__up_rf_read_i]];
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  integer __loopvar__up_rf_write_i;
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( __loopvar__up_rf_write_i = 1'd0; __loopvar__up_rf_write_i < 1'd1; __loopvar__up_rf_write_i = __loopvar__up_rf_write_i + 1'd1 )
      if ( wen[__loopvar__up_rf_write_i] ) begin
        regs[waddr[__loopvar__up_rf_write_i]] <= wdata[__loopvar__up_rf_write_i];
      end
  end

  // Connections
  assign raddr[0] = raddr__0;
  assign rdata__0 = rdata[0];
  assign waddr[0] = waddr__0;
  assign wdata[0] = wdata__0;
  assign wen[0] = wen__0;

endmodule


// PyMTL Component NormalQueueDpathRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module NormalQueueDpathRTL__EntryType_Bits32__num_entries_1024
(
  input  logic [0:0]    clk,
  output logic [31:0]   deq_ret,
  input  logic [31:0]   enq_msg,
  input  logic [9:0]    raddr,
  input  logic [0:0]    reset,
  input  logic [9:0]    waddr,
  input  logic [0:0]    wen
);
  // Struct/Array ports of sub-components in the form of wires
  logic [9:0]    queue__raddr [0:0];
  logic [31:0]   queue__rdata [0:0];
  logic [9:0]    queue__waddr [0:0];
  logic [31:0]   queue__wdata [0:0];
  logic [0:0]    queue__wen [0:0];

  // Sub-component declarations
  logic [0:0]    queue__clk;
  logic [9:0]    queue__raddr__0;
  logic [31:0]   queue__rdata__0;
  logic [0:0]    queue__reset;
  logic [9:0]    queue__waddr__0;
  logic [31:0]   queue__wdata__0;
  logic [0:0]    queue__wen__0;

  RegisterFile__fe9dd4e1161d2f99 queue
  (
    .clk            (         queue__clk        ),
    .raddr__0       (      queue__raddr__0      ),
    .rdata__0       (      queue__rdata__0      ),
    .reset          (        queue__reset       ),
    .waddr__0       (      queue__waddr__0      ),
    .wdata__0       (      queue__wdata__0      ),
    .wen__0         (       queue__wen__0       )
  );

  // Connect struct/array ports and their wire forms
  assign queue__raddr__0 = queue__raddr[0];
  assign queue__rdata[0] = queue__rdata__0;
  assign queue__waddr__0 = queue__waddr[0];
  assign queue__wdata__0 = queue__wdata[0];
  assign queue__wen__0 = queue__wen[0];

  // Connections
  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_ret = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component PipeQueueRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module PipeQueueRTL__EntryType_Bits32__num_entries_1024
(
  input  logic [0:0]    clk,
  output logic [10:0]   count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [31:0]   deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [31:0]   enq__msg,
  output logic [0:0]    enq__rdy
);
  // Sub-component declarations
  logic [0:0]    ctrl__clk;
  logic [10:0]   ctrl__count;
  logic [0:0]    ctrl__deq_en;
  logic [0:0]    ctrl__deq_rdy;
  logic [0:0]    ctrl__enq_en;
  logic [0:0]    ctrl__enq_rdy;
  logic [9:0]    ctrl__raddr;
  logic [0:0]    ctrl__reset;
  logic [9:0]    ctrl__waddr;
  logic [0:0]    ctrl__wen;

  PipeQueueCtrlRTL__num_entries_1024 ctrl
  (
    .clk            (         ctrl__clk         ),
    .count          (        ctrl__count        ),
    .deq_en         (        ctrl__deq_en       ),
    .deq_rdy        (       ctrl__deq_rdy       ),
    .enq_en         (        ctrl__enq_en       ),
    .enq_rdy        (       ctrl__enq_rdy       ),
    .raddr          (        ctrl__raddr        ),
    .reset          (        ctrl__reset        ),
    .waddr          (        ctrl__waddr        ),
    .wen            (         ctrl__wen         )
  );

  logic [0:0]    dpath__clk;
  logic [31:0]   dpath__deq_ret;
  logic [31:0]   dpath__enq_msg;
  logic [9:0]    dpath__raddr;
  logic [0:0]    dpath__reset;
  logic [9:0]    dpath__waddr;
  logic [0:0]    dpath__wen;

  NormalQueueDpathRTL__EntryType_Bits32__num_entries_1024 dpath
  (
    .clk            (         dpath__clk        ),
    .deq_ret        (       dpath__deq_ret      ),
    .enq_msg        (       dpath__enq_msg      ),
    .raddr          (        dpath__raddr       ),
    .reset          (        dpath__reset       ),
    .waddr          (        dpath__waddr       ),
    .wen            (         dpath__wen        )
  );

  // Connections
  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_en = enq__en;
  assign enq__rdy = ctrl__enq_rdy;
  assign ctrl__deq_en = deq__en;
  assign deq__rdy = ctrl__deq_rdy;
  assign count = ctrl__count;
  assign dpath__enq_msg = enq__msg;
  assign deq__ret = dpath__deq_ret;

endmodule


// PyMTL Component Trail Definition
// At /home/sjq/git/pymtl_project/satacc/utils/trail.py
module Trail__data_bits_32__trail_size_1024
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  input  logic [0:0]    recv__en,
  input  logic [31:0]   recv__msg,
  output logic [0:0]    recv__rdy,
  output logic [0:0]    send__en,
  output logic [31:0]   send__msg,
  input  logic [0:0]    send__rdy
);
  // Sub-component declarations
  logic [0:0]    trail__clk;
  logic [10:0]   trail__count;
  logic [0:0]    trail__reset;
  logic [0:0]    trail__deq__en;
  logic [0:0]    trail__deq__rdy;
  logic [31:0]   trail__deq__ret;
  logic [0:0]    trail__enq__en;
  logic [31:0]   trail__enq__msg;
  logic [0:0]    trail__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_1024 trail
  (
    .clk            (         trail__clk        ),
    .count          (        trail__count       ),
    .reset          (        trail__reset       ),
    .deq__en        (       trail__deq__en      ),
    .deq__rdy       (      trail__deq__rdy      ),
    .deq__ret       (      trail__deq__ret      ),
    .enq__en        (       trail__enq__en      ),
    .enq__msg       (      trail__enq__msg      ),
    .enq__rdy       (      trail__enq__rdy      )
  );

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/utils/trail.py:35
  // @update
  // def comb():
  //     s.send.en@=s.send.rdy & s.trail.deq.rdy
  //     s.trail.deq.en @= s.send.rdy & s.trail.deq.rdy
  
  always_comb begin : comb
    send__en = send__rdy & trail__deq__rdy;
    trail__deq__en = send__rdy & trail__deq__rdy;
  end

  // Connections
  assign trail__clk = clk;
  assign trail__reset = reset;
  assign trail__enq__en = recv__en;
  assign trail__enq__msg = recv__msg;
  assign recv__rdy = trail__enq__rdy;
  assign send__msg = trail__deq__ret;

endmodule


// PyMTL Component Mux Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py
module Mux__Type_Bits1__ninputs_8
(
  input  logic [0:0]    clk,
  input  logic [0:0]    in___0,
  input  logic [0:0]    in___1,
  input  logic [0:0]    in___2,
  input  logic [0:0]    in___3,
  input  logic [0:0]    in___4,
  input  logic [0:0]    in___5,
  input  logic [0:0]    in___6,
  input  logic [0:0]    in___7,
  output logic [0:0]    out,
  input  logic [0:0]    reset,
  input  logic [2:0]    sel
);
  // Struct/Array ports in the form of wires
  logic [0:0]    in_ [0:7];

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py:13
  // @update
  // def up_mux():
  //   s.out @= s.in_[ s.sel ]
  
  always_comb begin : up_mux
    out = in_[sel];
  end

  // Connections
  assign in_[0] = in___0;
  assign in_[1] = in___1;
  assign in_[2] = in___2;
  assign in_[3] = in___3;
  assign in_[4] = in___4;
  assign in_[5] = in___5;
  assign in_[6] = in___6;
  assign in_[7] = in___7;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_32__nregs_2__rd_ports_1__wr_ports_1__const_zero_False
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py
module RegisterFile__da6dbc204f7803e6
(
  input  logic [0:0]    clk,
  input  logic [0:0]    raddr__0,
  output logic [31:0]   rdata__0,
  input  logic [0:0]    reset,
  input  logic [0:0]    waddr__0,
  input  logic [31:0]   wdata__0,
  input  logic [0:0]    wen__0
);
  // Struct/Array ports in the form of wires
  logic [0:0]    raddr [0:0];
  logic [31:0]   rdata [0:0];
  logic [0:0]    waddr [0:0];
  logic [31:0]   wdata [0:0];
  logic [0:0]    wen [0:0];

  // Wire declarations
  logic [31:0]   regs [0:1];

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  integer __loopvar__up_rf_read_i;
  
  always_comb begin : up_rf_read
    for ( __loopvar__up_rf_read_i = 1'd0; __loopvar__up_rf_read_i < 1'd1; __loopvar__up_rf_read_i = __loopvar__up_rf_read_i + 1'd1 )
      rdata[__loopvar__up_rf_read_i] = regs[raddr[__loopvar__up_rf_read_i]];
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  integer __loopvar__up_rf_write_i;
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( __loopvar__up_rf_write_i = 1'd0; __loopvar__up_rf_write_i < 1'd1; __loopvar__up_rf_write_i = __loopvar__up_rf_write_i + 1'd1 )
      if ( wen[__loopvar__up_rf_write_i] ) begin
        regs[waddr[__loopvar__up_rf_write_i]] <= wdata[__loopvar__up_rf_write_i];
      end
  end

  // Connections
  assign raddr[0] = raddr__0;
  assign rdata__0 = rdata[0];
  assign waddr[0] = waddr__0;
  assign wdata[0] = wdata__0;
  assign wen[0] = wen__0;

endmodule


// PyMTL Component NormalQueueDpathRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module NormalQueueDpathRTL__EntryType_32__num_entries_2
(
  input  logic [0:0]    clk,
  output logic [31:0]   deq_ret,
  input  logic [31:0]   enq_msg,
  input  logic [0:0]    raddr,
  input  logic [0:0]    reset,
  input  logic [0:0]    waddr,
  input  logic [0:0]    wen
);
  // Struct/Array ports of sub-components in the form of wires
  logic [0:0]    queue__raddr [0:0];
  logic [31:0]   queue__rdata [0:0];
  logic [0:0]    queue__waddr [0:0];
  logic [31:0]   queue__wdata [0:0];
  logic [0:0]    queue__wen [0:0];

  // Sub-component declarations
  logic [0:0]    queue__clk;
  logic [0:0]    queue__raddr__0;
  logic [31:0]   queue__rdata__0;
  logic [0:0]    queue__reset;
  logic [0:0]    queue__waddr__0;
  logic [31:0]   queue__wdata__0;
  logic [0:0]    queue__wen__0;

  RegisterFile__da6dbc204f7803e6 queue
  (
    .clk            (         queue__clk        ),
    .raddr__0       (      queue__raddr__0      ),
    .rdata__0       (      queue__rdata__0      ),
    .reset          (        queue__reset       ),
    .waddr__0       (      queue__waddr__0      ),
    .wdata__0       (      queue__wdata__0      ),
    .wen__0         (       queue__wen__0       )
  );

  // Connect struct/array ports and their wire forms
  assign queue__raddr__0 = queue__raddr[0];
  assign queue__rdata[0] = queue__rdata__0;
  assign queue__waddr__0 = queue__waddr[0];
  assign queue__wdata__0 = queue__wdata[0];
  assign queue__wen__0 = queue__wen[0];

  // Connections
  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_ret = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component PipeQueueRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module PipeQueueRTL__EntryType_32__num_entries_2
(
  input  logic [0:0]    clk,
  output logic [1:0]    count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [31:0]   deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [31:0]   enq__msg,
  output logic [0:0]    enq__rdy
);
  // Sub-component declarations
  logic [0:0]    ctrl__clk;
  logic [1:0]    ctrl__count;
  logic [0:0]    ctrl__deq_en;
  logic [0:0]    ctrl__deq_rdy;
  logic [0:0]    ctrl__enq_en;
  logic [0:0]    ctrl__enq_rdy;
  logic [0:0]    ctrl__raddr;
  logic [0:0]    ctrl__reset;
  logic [0:0]    ctrl__waddr;
  logic [0:0]    ctrl__wen;

  PipeQueueCtrlRTL__num_entries_2 ctrl
  (
    .clk            (         ctrl__clk         ),
    .count          (        ctrl__count        ),
    .deq_en         (        ctrl__deq_en       ),
    .deq_rdy        (       ctrl__deq_rdy       ),
    .enq_en         (        ctrl__enq_en       ),
    .enq_rdy        (       ctrl__enq_rdy       ),
    .raddr          (        ctrl__raddr        ),
    .reset          (        ctrl__reset        ),
    .waddr          (        ctrl__waddr        ),
    .wen            (         ctrl__wen         )
  );

  logic [0:0]    dpath__clk;
  logic [31:0]   dpath__deq_ret;
  logic [31:0]   dpath__enq_msg;
  logic [0:0]    dpath__raddr;
  logic [0:0]    dpath__reset;
  logic [0:0]    dpath__waddr;
  logic [0:0]    dpath__wen;

  NormalQueueDpathRTL__EntryType_32__num_entries_2 dpath
  (
    .clk            (         dpath__clk        ),
    .deq_ret        (       dpath__deq_ret      ),
    .enq_msg        (       dpath__enq_msg      ),
    .raddr          (        dpath__raddr       ),
    .reset          (        dpath__reset       ),
    .waddr          (        dpath__waddr       ),
    .wen            (         dpath__wen        )
  );

  // Connections
  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_en = enq__en;
  assign enq__rdy = ctrl__enq_rdy;
  assign ctrl__deq_en = deq__en;
  assign deq__rdy = ctrl__deq_rdy;
  assign count = ctrl__count;
  assign dpath__enq_msg = enq__msg;
  assign deq__ret = dpath__deq_ret;

endmodule


// PyMTL Component OneToNDispWithBuffer Definition
// Full name: OneToNDispWithBuffer__data_type_32__num_outs_8__input_buffer_size_2__out_put_buffer_size_16
// At /home/sjq/git/pymtl_project/satacc/utils/oneToNDisp.py
module OneToNDispWithBuffer__58703c261c09dfe5
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  input  logic [0:0]    recv__en,
  input  logic [31:0]   recv__msg,
  output logic [0:0]    recv__rdy,
  output logic [0:0]    sends__0__en,
  output logic [0:0]    sends__1__en,
  output logic [0:0]    sends__2__en,
  output logic [0:0]    sends__3__en,
  output logic [0:0]    sends__4__en,
  output logic [0:0]    sends__5__en,
  output logic [0:0]    sends__6__en,
  output logic [0:0]    sends__7__en,
  output logic [31:0]   sends__0__msg,
  output logic [31:0]   sends__1__msg,
  output logic [31:0]   sends__2__msg,
  output logic [31:0]   sends__3__msg,
  output logic [31:0]   sends__4__msg,
  output logic [31:0]   sends__5__msg,
  output logic [31:0]   sends__6__msg,
  output logic [31:0]   sends__7__msg,
  input  logic [0:0]    sends__0__rdy,
  input  logic [0:0]    sends__1__rdy,
  input  logic [0:0]    sends__2__rdy,
  input  logic [0:0]    sends__3__rdy,
  input  logic [0:0]    sends__4__rdy,
  input  logic [0:0]    sends__5__rdy,
  input  logic [0:0]    sends__6__rdy,
  input  logic [0:0]    sends__7__rdy
);
  // Struct/Array ports in the form of wires
  logic [0:0]    sends__en [0:7];
  logic [31:0]   sends__msg [0:7];
  logic [0:0]    sends__rdy [0:7];

  // Wire declarations
  logic [2:0]    current_chose;

  // Struct/Array ports of sub-components in the form of wires
  logic [0:0]    choose__in_ [0:7];
  logic [0:0]    out_buffer__clk [0:7];
  logic [4:0]    out_buffer__count [0:7];
  logic [0:0]    out_buffer__reset [0:7];
  logic [0:0]    out_buffer__deq__en [0:7];
  logic [0:0]    out_buffer__deq__rdy [0:7];
  logic [31:0]   out_buffer__deq__ret [0:7];
  logic [0:0]    out_buffer__enq__en [0:7];
  logic [31:0]   out_buffer__enq__msg [0:7];
  logic [0:0]    out_buffer__enq__rdy [0:7];

  // Sub-component declarations
  logic [0:0]    choose__clk;
  logic [0:0]    choose__in___0;
  logic [0:0]    choose__in___1;
  logic [0:0]    choose__in___2;
  logic [0:0]    choose__in___3;
  logic [0:0]    choose__in___4;
  logic [0:0]    choose__in___5;
  logic [0:0]    choose__in___6;
  logic [0:0]    choose__in___7;
  logic [0:0]    choose__out;
  logic [0:0]    choose__reset;
  logic [2:0]    choose__sel;

  Mux__Type_Bits1__ninputs_8 choose
  (
    .clk            (        choose__clk        ),
    .in___0         (       choose__in___0      ),
    .in___1         (       choose__in___1      ),
    .in___2         (       choose__in___2      ),
    .in___3         (       choose__in___3      ),
    .in___4         (       choose__in___4      ),
    .in___5         (       choose__in___5      ),
    .in___6         (       choose__in___6      ),
    .in___7         (       choose__in___7      ),
    .out            (        choose__out        ),
    .reset          (       choose__reset       ),
    .sel            (        choose__sel        )
  );

  logic [0:0]    input_buffer__clk;
  logic [1:0]    input_buffer__count;
  logic [0:0]    input_buffer__reset;
  logic [0:0]    input_buffer__deq__en;
  logic [0:0]    input_buffer__deq__rdy;
  logic [31:0]   input_buffer__deq__ret;
  logic [0:0]    input_buffer__enq__en;
  logic [31:0]   input_buffer__enq__msg;
  logic [0:0]    input_buffer__enq__rdy;

  PipeQueueRTL__EntryType_32__num_entries_2 input_buffer
  (
    .clk            (     input_buffer__clk     ),
    .count          (    input_buffer__count    ),
    .reset          (    input_buffer__reset    ),
    .deq__en        (   input_buffer__deq__en   ),
    .deq__rdy       (   input_buffer__deq__rdy  ),
    .deq__ret       (   input_buffer__deq__ret  ),
    .enq__en        (   input_buffer__enq__en   ),
    .enq__msg       (   input_buffer__enq__msg  ),
    .enq__rdy       (   input_buffer__enq__rdy  )
  );

  logic [0:0]    out_buffer__0__clk;
  logic [4:0]    out_buffer__0__count;
  logic [0:0]    out_buffer__0__reset;
  logic [0:0]    out_buffer__0__deq__en;
  logic [0:0]    out_buffer__0__deq__rdy;
  logic [31:0]   out_buffer__0__deq__ret;
  logic [0:0]    out_buffer__0__enq__en;
  logic [31:0]   out_buffer__0__enq__msg;
  logic [0:0]    out_buffer__0__enq__rdy;

  PipeQueueRTL__EntryType_32__num_entries_16 out_buffer__0
  (
    .clk            (     out_buffer__0__clk    ),
    .count          (    out_buffer__0__count   ),
    .reset          (    out_buffer__0__reset   ),
    .deq__en        (   out_buffer__0__deq__en  ),
    .deq__rdy       (  out_buffer__0__deq__rdy  ),
    .deq__ret       (  out_buffer__0__deq__ret  ),
    .enq__en        (   out_buffer__0__enq__en  ),
    .enq__msg       (  out_buffer__0__enq__msg  ),
    .enq__rdy       (  out_buffer__0__enq__rdy  )
  );

  logic [0:0]    out_buffer__1__clk;
  logic [4:0]    out_buffer__1__count;
  logic [0:0]    out_buffer__1__reset;
  logic [0:0]    out_buffer__1__deq__en;
  logic [0:0]    out_buffer__1__deq__rdy;
  logic [31:0]   out_buffer__1__deq__ret;
  logic [0:0]    out_buffer__1__enq__en;
  logic [31:0]   out_buffer__1__enq__msg;
  logic [0:0]    out_buffer__1__enq__rdy;

  PipeQueueRTL__EntryType_32__num_entries_16 out_buffer__1
  (
    .clk            (     out_buffer__1__clk    ),
    .count          (    out_buffer__1__count   ),
    .reset          (    out_buffer__1__reset   ),
    .deq__en        (   out_buffer__1__deq__en  ),
    .deq__rdy       (  out_buffer__1__deq__rdy  ),
    .deq__ret       (  out_buffer__1__deq__ret  ),
    .enq__en        (   out_buffer__1__enq__en  ),
    .enq__msg       (  out_buffer__1__enq__msg  ),
    .enq__rdy       (  out_buffer__1__enq__rdy  )
  );

  logic [0:0]    out_buffer__2__clk;
  logic [4:0]    out_buffer__2__count;
  logic [0:0]    out_buffer__2__reset;
  logic [0:0]    out_buffer__2__deq__en;
  logic [0:0]    out_buffer__2__deq__rdy;
  logic [31:0]   out_buffer__2__deq__ret;
  logic [0:0]    out_buffer__2__enq__en;
  logic [31:0]   out_buffer__2__enq__msg;
  logic [0:0]    out_buffer__2__enq__rdy;

  PipeQueueRTL__EntryType_32__num_entries_16 out_buffer__2
  (
    .clk            (     out_buffer__2__clk    ),
    .count          (    out_buffer__2__count   ),
    .reset          (    out_buffer__2__reset   ),
    .deq__en        (   out_buffer__2__deq__en  ),
    .deq__rdy       (  out_buffer__2__deq__rdy  ),
    .deq__ret       (  out_buffer__2__deq__ret  ),
    .enq__en        (   out_buffer__2__enq__en  ),
    .enq__msg       (  out_buffer__2__enq__msg  ),
    .enq__rdy       (  out_buffer__2__enq__rdy  )
  );

  logic [0:0]    out_buffer__3__clk;
  logic [4:0]    out_buffer__3__count;
  logic [0:0]    out_buffer__3__reset;
  logic [0:0]    out_buffer__3__deq__en;
  logic [0:0]    out_buffer__3__deq__rdy;
  logic [31:0]   out_buffer__3__deq__ret;
  logic [0:0]    out_buffer__3__enq__en;
  logic [31:0]   out_buffer__3__enq__msg;
  logic [0:0]    out_buffer__3__enq__rdy;

  PipeQueueRTL__EntryType_32__num_entries_16 out_buffer__3
  (
    .clk            (     out_buffer__3__clk    ),
    .count          (    out_buffer__3__count   ),
    .reset          (    out_buffer__3__reset   ),
    .deq__en        (   out_buffer__3__deq__en  ),
    .deq__rdy       (  out_buffer__3__deq__rdy  ),
    .deq__ret       (  out_buffer__3__deq__ret  ),
    .enq__en        (   out_buffer__3__enq__en  ),
    .enq__msg       (  out_buffer__3__enq__msg  ),
    .enq__rdy       (  out_buffer__3__enq__rdy  )
  );

  logic [0:0]    out_buffer__4__clk;
  logic [4:0]    out_buffer__4__count;
  logic [0:0]    out_buffer__4__reset;
  logic [0:0]    out_buffer__4__deq__en;
  logic [0:0]    out_buffer__4__deq__rdy;
  logic [31:0]   out_buffer__4__deq__ret;
  logic [0:0]    out_buffer__4__enq__en;
  logic [31:0]   out_buffer__4__enq__msg;
  logic [0:0]    out_buffer__4__enq__rdy;

  PipeQueueRTL__EntryType_32__num_entries_16 out_buffer__4
  (
    .clk            (     out_buffer__4__clk    ),
    .count          (    out_buffer__4__count   ),
    .reset          (    out_buffer__4__reset   ),
    .deq__en        (   out_buffer__4__deq__en  ),
    .deq__rdy       (  out_buffer__4__deq__rdy  ),
    .deq__ret       (  out_buffer__4__deq__ret  ),
    .enq__en        (   out_buffer__4__enq__en  ),
    .enq__msg       (  out_buffer__4__enq__msg  ),
    .enq__rdy       (  out_buffer__4__enq__rdy  )
  );

  logic [0:0]    out_buffer__5__clk;
  logic [4:0]    out_buffer__5__count;
  logic [0:0]    out_buffer__5__reset;
  logic [0:0]    out_buffer__5__deq__en;
  logic [0:0]    out_buffer__5__deq__rdy;
  logic [31:0]   out_buffer__5__deq__ret;
  logic [0:0]    out_buffer__5__enq__en;
  logic [31:0]   out_buffer__5__enq__msg;
  logic [0:0]    out_buffer__5__enq__rdy;

  PipeQueueRTL__EntryType_32__num_entries_16 out_buffer__5
  (
    .clk            (     out_buffer__5__clk    ),
    .count          (    out_buffer__5__count   ),
    .reset          (    out_buffer__5__reset   ),
    .deq__en        (   out_buffer__5__deq__en  ),
    .deq__rdy       (  out_buffer__5__deq__rdy  ),
    .deq__ret       (  out_buffer__5__deq__ret  ),
    .enq__en        (   out_buffer__5__enq__en  ),
    .enq__msg       (  out_buffer__5__enq__msg  ),
    .enq__rdy       (  out_buffer__5__enq__rdy  )
  );

  logic [0:0]    out_buffer__6__clk;
  logic [4:0]    out_buffer__6__count;
  logic [0:0]    out_buffer__6__reset;
  logic [0:0]    out_buffer__6__deq__en;
  logic [0:0]    out_buffer__6__deq__rdy;
  logic [31:0]   out_buffer__6__deq__ret;
  logic [0:0]    out_buffer__6__enq__en;
  logic [31:0]   out_buffer__6__enq__msg;
  logic [0:0]    out_buffer__6__enq__rdy;

  PipeQueueRTL__EntryType_32__num_entries_16 out_buffer__6
  (
    .clk            (     out_buffer__6__clk    ),
    .count          (    out_buffer__6__count   ),
    .reset          (    out_buffer__6__reset   ),
    .deq__en        (   out_buffer__6__deq__en  ),
    .deq__rdy       (  out_buffer__6__deq__rdy  ),
    .deq__ret       (  out_buffer__6__deq__ret  ),
    .enq__en        (   out_buffer__6__enq__en  ),
    .enq__msg       (  out_buffer__6__enq__msg  ),
    .enq__rdy       (  out_buffer__6__enq__rdy  )
  );

  logic [0:0]    out_buffer__7__clk;
  logic [4:0]    out_buffer__7__count;
  logic [0:0]    out_buffer__7__reset;
  logic [0:0]    out_buffer__7__deq__en;
  logic [0:0]    out_buffer__7__deq__rdy;
  logic [31:0]   out_buffer__7__deq__ret;
  logic [0:0]    out_buffer__7__enq__en;
  logic [31:0]   out_buffer__7__enq__msg;
  logic [0:0]    out_buffer__7__enq__rdy;

  PipeQueueRTL__EntryType_32__num_entries_16 out_buffer__7
  (
    .clk            (     out_buffer__7__clk    ),
    .count          (    out_buffer__7__count   ),
    .reset          (    out_buffer__7__reset   ),
    .deq__en        (   out_buffer__7__deq__en  ),
    .deq__rdy       (  out_buffer__7__deq__rdy  ),
    .deq__ret       (  out_buffer__7__deq__ret  ),
    .enq__en        (   out_buffer__7__enq__en  ),
    .enq__msg       (  out_buffer__7__enq__msg  ),
    .enq__rdy       (  out_buffer__7__enq__rdy  )
  );

  // Connect struct/array ports and their wire forms
  assign choose__in___0 = choose__in_[0];
  assign choose__in___1 = choose__in_[1];
  assign choose__in___2 = choose__in_[2];
  assign choose__in___3 = choose__in_[3];
  assign choose__in___4 = choose__in_[4];
  assign choose__in___5 = choose__in_[5];
  assign choose__in___6 = choose__in_[6];
  assign choose__in___7 = choose__in_[7];
  assign out_buffer__0__clk = out_buffer__clk[0];
  assign out_buffer__1__clk = out_buffer__clk[1];
  assign out_buffer__2__clk = out_buffer__clk[2];
  assign out_buffer__3__clk = out_buffer__clk[3];
  assign out_buffer__4__clk = out_buffer__clk[4];
  assign out_buffer__5__clk = out_buffer__clk[5];
  assign out_buffer__6__clk = out_buffer__clk[6];
  assign out_buffer__7__clk = out_buffer__clk[7];
  assign out_buffer__count[0] = out_buffer__0__count;
  assign out_buffer__count[1] = out_buffer__1__count;
  assign out_buffer__count[2] = out_buffer__2__count;
  assign out_buffer__count[3] = out_buffer__3__count;
  assign out_buffer__count[4] = out_buffer__4__count;
  assign out_buffer__count[5] = out_buffer__5__count;
  assign out_buffer__count[6] = out_buffer__6__count;
  assign out_buffer__count[7] = out_buffer__7__count;
  assign out_buffer__0__reset = out_buffer__reset[0];
  assign out_buffer__1__reset = out_buffer__reset[1];
  assign out_buffer__2__reset = out_buffer__reset[2];
  assign out_buffer__3__reset = out_buffer__reset[3];
  assign out_buffer__4__reset = out_buffer__reset[4];
  assign out_buffer__5__reset = out_buffer__reset[5];
  assign out_buffer__6__reset = out_buffer__reset[6];
  assign out_buffer__7__reset = out_buffer__reset[7];
  assign out_buffer__0__deq__en = out_buffer__deq__en[0];
  assign out_buffer__1__deq__en = out_buffer__deq__en[1];
  assign out_buffer__2__deq__en = out_buffer__deq__en[2];
  assign out_buffer__3__deq__en = out_buffer__deq__en[3];
  assign out_buffer__4__deq__en = out_buffer__deq__en[4];
  assign out_buffer__5__deq__en = out_buffer__deq__en[5];
  assign out_buffer__6__deq__en = out_buffer__deq__en[6];
  assign out_buffer__7__deq__en = out_buffer__deq__en[7];
  assign out_buffer__deq__rdy[0] = out_buffer__0__deq__rdy;
  assign out_buffer__deq__rdy[1] = out_buffer__1__deq__rdy;
  assign out_buffer__deq__rdy[2] = out_buffer__2__deq__rdy;
  assign out_buffer__deq__rdy[3] = out_buffer__3__deq__rdy;
  assign out_buffer__deq__rdy[4] = out_buffer__4__deq__rdy;
  assign out_buffer__deq__rdy[5] = out_buffer__5__deq__rdy;
  assign out_buffer__deq__rdy[6] = out_buffer__6__deq__rdy;
  assign out_buffer__deq__rdy[7] = out_buffer__7__deq__rdy;
  assign out_buffer__deq__ret[0] = out_buffer__0__deq__ret;
  assign out_buffer__deq__ret[1] = out_buffer__1__deq__ret;
  assign out_buffer__deq__ret[2] = out_buffer__2__deq__ret;
  assign out_buffer__deq__ret[3] = out_buffer__3__deq__ret;
  assign out_buffer__deq__ret[4] = out_buffer__4__deq__ret;
  assign out_buffer__deq__ret[5] = out_buffer__5__deq__ret;
  assign out_buffer__deq__ret[6] = out_buffer__6__deq__ret;
  assign out_buffer__deq__ret[7] = out_buffer__7__deq__ret;
  assign out_buffer__0__enq__en = out_buffer__enq__en[0];
  assign out_buffer__1__enq__en = out_buffer__enq__en[1];
  assign out_buffer__2__enq__en = out_buffer__enq__en[2];
  assign out_buffer__3__enq__en = out_buffer__enq__en[3];
  assign out_buffer__4__enq__en = out_buffer__enq__en[4];
  assign out_buffer__5__enq__en = out_buffer__enq__en[5];
  assign out_buffer__6__enq__en = out_buffer__enq__en[6];
  assign out_buffer__7__enq__en = out_buffer__enq__en[7];
  assign out_buffer__0__enq__msg = out_buffer__enq__msg[0];
  assign out_buffer__1__enq__msg = out_buffer__enq__msg[1];
  assign out_buffer__2__enq__msg = out_buffer__enq__msg[2];
  assign out_buffer__3__enq__msg = out_buffer__enq__msg[3];
  assign out_buffer__4__enq__msg = out_buffer__enq__msg[4];
  assign out_buffer__5__enq__msg = out_buffer__enq__msg[5];
  assign out_buffer__6__enq__msg = out_buffer__enq__msg[6];
  assign out_buffer__7__enq__msg = out_buffer__enq__msg[7];
  assign out_buffer__enq__rdy[0] = out_buffer__0__enq__rdy;
  assign out_buffer__enq__rdy[1] = out_buffer__1__enq__rdy;
  assign out_buffer__enq__rdy[2] = out_buffer__2__enq__rdy;
  assign out_buffer__enq__rdy[3] = out_buffer__3__enq__rdy;
  assign out_buffer__enq__rdy[4] = out_buffer__4__enq__rdy;
  assign out_buffer__enq__rdy[5] = out_buffer__5__enq__rdy;
  assign out_buffer__enq__rdy[6] = out_buffer__6__enq__rdy;
  assign out_buffer__enq__rdy[7] = out_buffer__7__enq__rdy;

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/utils/oneToNDisp.py:191
  // @update
  // def comb():
  // 
  //     s.input_buffer.deq.en @= s.input_buffer.deq.rdy & s.choose.out
  //     for i in range(num_outs):
  //         s.sends[i].en @= s.sends[i].rdy & s.out_buffer[i].deq.rdy
  //         s.out_buffer[i].deq.en @= s.out_buffer[i].deq.rdy & s.sends[i].rdy
  // 
  //         s.out_buffer[i].enq.en @= 1 if s.input_buffer.deq.rdy & s.out_buffer[i].enq.rdy & (choose_type(
  //             i) == s.current_chose) else 0
  //         s.sends[i].msg @=s.out_buffer[i].deq.ret
  
  integer __loopvar__comb_i;
  
  always_comb begin : comb
    input_buffer__deq__en = input_buffer__deq__rdy & choose__out;
    for ( __loopvar__comb_i = 1'd0; __loopvar__comb_i < 4'd8; __loopvar__comb_i = __loopvar__comb_i + 1'd1 ) begin
      sends__en[__loopvar__comb_i] = sends__rdy[__loopvar__comb_i] & out_buffer__deq__rdy[__loopvar__comb_i];
      out_buffer__deq__en[__loopvar__comb_i] = out_buffer__deq__rdy[__loopvar__comb_i] & sends__rdy[__loopvar__comb_i];
      out_buffer__enq__en[__loopvar__comb_i] = ( ( input_buffer__deq__rdy & out_buffer__enq__rdy[__loopvar__comb_i] ) & ( __loopvar__comb_i == current_chose ) ) ? 1'd1 : 1'd0;
      sends__msg[__loopvar__comb_i] = out_buffer__deq__ret[__loopvar__comb_i];
    end
  end

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/utils/oneToNDisp.py:203
  // @update_ff
  // def seq():
  // 
  //     s.current_chose <<= (
  //         s.current_chose + 1) % (num_outs-1) if ~(s.reset) else 0
  
  always_ff @(posedge clk) begin : seq
    current_chose <= ( ~reset ) ? ( current_chose + 3'd1 ) % ( 3'd8 - 3'd1 ) : 3'd0;
  end

  // Connections
  assign sends__0__en = sends__en[0];
  assign sends__1__en = sends__en[1];
  assign sends__2__en = sends__en[2];
  assign sends__3__en = sends__en[3];
  assign sends__4__en = sends__en[4];
  assign sends__5__en = sends__en[5];
  assign sends__6__en = sends__en[6];
  assign sends__7__en = sends__en[7];
  assign sends__0__msg = sends__msg[0];
  assign sends__1__msg = sends__msg[1];
  assign sends__2__msg = sends__msg[2];
  assign sends__3__msg = sends__msg[3];
  assign sends__4__msg = sends__msg[4];
  assign sends__5__msg = sends__msg[5];
  assign sends__6__msg = sends__msg[6];
  assign sends__7__msg = sends__msg[7];
  assign sends__rdy[0] = sends__0__rdy;
  assign sends__rdy[1] = sends__1__rdy;
  assign sends__rdy[2] = sends__2__rdy;
  assign sends__rdy[3] = sends__3__rdy;
  assign sends__rdy[4] = sends__4__rdy;
  assign sends__rdy[5] = sends__5__rdy;
  assign sends__rdy[6] = sends__6__rdy;
  assign sends__rdy[7] = sends__7__rdy;
  assign input_buffer__clk = clk;
  assign input_buffer__reset = reset;
  assign out_buffer__clk[0] = clk;
  assign out_buffer__reset[0] = reset;
  assign out_buffer__clk[1] = clk;
  assign out_buffer__reset[1] = reset;
  assign out_buffer__clk[2] = clk;
  assign out_buffer__reset[2] = reset;
  assign out_buffer__clk[3] = clk;
  assign out_buffer__reset[3] = reset;
  assign out_buffer__clk[4] = clk;
  assign out_buffer__reset[4] = reset;
  assign out_buffer__clk[5] = clk;
  assign out_buffer__reset[5] = reset;
  assign out_buffer__clk[6] = clk;
  assign out_buffer__reset[6] = reset;
  assign out_buffer__clk[7] = clk;
  assign out_buffer__reset[7] = reset;
  assign choose__clk = clk;
  assign choose__reset = reset;
  assign input_buffer__enq__en = recv__en;
  assign input_buffer__enq__msg = recv__msg;
  assign recv__rdy = input_buffer__enq__rdy;
  assign out_buffer__enq__msg[0] = input_buffer__deq__ret;
  assign choose__in_[0] = out_buffer__enq__rdy[0];
  assign out_buffer__enq__msg[1] = input_buffer__deq__ret;
  assign choose__in_[1] = out_buffer__enq__rdy[1];
  assign out_buffer__enq__msg[2] = input_buffer__deq__ret;
  assign choose__in_[2] = out_buffer__enq__rdy[2];
  assign out_buffer__enq__msg[3] = input_buffer__deq__ret;
  assign choose__in_[3] = out_buffer__enq__rdy[3];
  assign out_buffer__enq__msg[4] = input_buffer__deq__ret;
  assign choose__in_[4] = out_buffer__enq__rdy[4];
  assign out_buffer__enq__msg[5] = input_buffer__deq__ret;
  assign choose__in_[5] = out_buffer__enq__rdy[5];
  assign out_buffer__enq__msg[6] = input_buffer__deq__ret;
  assign choose__in_[6] = out_buffer__enq__rdy[6];
  assign out_buffer__enq__msg[7] = input_buffer__deq__ret;
  assign choose__in_[7] = out_buffer__enq__rdy[7];
  assign choose__sel = current_chose;

endmodule


// PyMTL Component PipeQueueCtrlRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module PipeQueueCtrlRTL__num_entries_4
(
  input  logic [0:0]    clk,
  output logic [2:0]    count,
  input  logic [0:0]    deq_en,
  output logic [0:0]    deq_rdy,
  input  logic [0:0]    enq_en,
  output logic [0:0]    enq_rdy,
  output logic [1:0]    raddr,
  input  logic [0:0]    reset,
  output logic [1:0]    waddr,
  output logic [0:0]    wen
);
  // Wire declarations
  logic [0:0]    deq_xfer;
  logic [0:0]    enq_xfer;
  logic [1:0]    head;
  logic [1:0]    tail;

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:202
  // s.deq_rdy //= lambda: ~s.reset & ( s.count > CountType(0) )
  
  always_comb begin : _lambda__s_watchers_0__cr_send_buffer_ctrl_deq_rdy
    deq_rdy = ( ~reset ) & ( count > 3'd0 );
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:206
  // s.deq_xfer //= lambda: s.deq_en & s.deq_rdy
  
  always_comb begin : _lambda__s_watchers_0__cr_send_buffer_ctrl_deq_xfer
    deq_xfer = deq_en & deq_rdy;
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:203
  // s.enq_rdy //= lambda: ~s.reset & ( ( s.count < s.num_entries ) | s.deq_en )
  
  always_comb begin : _lambda__s_watchers_0__cr_send_buffer_ctrl_enq_rdy
    enq_rdy = ( ~reset ) & ( ( count < 3'd4 ) | deq_en );
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:205
  // s.enq_xfer //= lambda: s.enq_en & s.enq_rdy
  
  always_comb begin : _lambda__s_watchers_0__cr_send_buffer_ctrl_enq_xfer
    enq_xfer = enq_en & enq_rdy;
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:208
  // @update_ff
  // def up_reg():
  // 
  //   if s.reset:
  //     s.head  <<= PtrType(0)
  //     s.tail  <<= PtrType(0)
  //     s.count <<= CountType(0)
  // 
  //   else:
  //     if s.deq_xfer:
  //       s.head <<= s.head + PtrType(1) if s.head < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer:
  //       s.tail <<= s.tail + PtrType(1) if s.tail < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer & ~s.deq_xfer:
  //       s.count <<= s.count + CountType(1)
  //     if ~s.enq_xfer & s.deq_xfer:
  //       s.count <<= s.count - CountType(1)
  
  always_ff @(posedge clk) begin : up_reg
    if ( reset ) begin
      head <= 2'd0;
      tail <= 2'd0;
      count <= 3'd0;
    end
    else begin
      if ( deq_xfer ) begin
        head <= ( head < 2'd3 ) ? head + 2'd1 : 2'd0;
      end
      if ( enq_xfer ) begin
        tail <= ( tail < 2'd3 ) ? tail + 2'd1 : 2'd0;
      end
      if ( enq_xfer & ( ~deq_xfer ) ) begin
        count <= count + 3'd1;
      end
      if ( ( ~enq_xfer ) & deq_xfer ) begin
        count <= count - 3'd1;
      end
    end
  end

  // Connections
  assign wen = enq_xfer;
  assign waddr = tail;
  assign raddr = head;

endmodule


// PyMTL Component NormalQueueDpathRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module NormalQueueDpathRTL__EntryType_Bits32__num_entries_4
(
  input  logic [0:0]    clk,
  output logic [31:0]   deq_ret,
  input  logic [31:0]   enq_msg,
  input  logic [1:0]    raddr,
  input  logic [0:0]    reset,
  input  logic [1:0]    waddr,
  input  logic [0:0]    wen
);
  // Struct/Array ports of sub-components in the form of wires
  logic [1:0]    queue__raddr [0:0];
  logic [31:0]   queue__rdata [0:0];
  logic [1:0]    queue__waddr [0:0];
  logic [31:0]   queue__wdata [0:0];
  logic [0:0]    queue__wen [0:0];

  // Sub-component declarations
  logic [0:0]    queue__clk;
  logic [1:0]    queue__raddr__0;
  logic [31:0]   queue__rdata__0;
  logic [0:0]    queue__reset;
  logic [1:0]    queue__waddr__0;
  logic [31:0]   queue__wdata__0;
  logic [0:0]    queue__wen__0;

  RegisterFile__1714b9df89e3c838 queue
  (
    .clk            (         queue__clk        ),
    .raddr__0       (      queue__raddr__0      ),
    .rdata__0       (      queue__rdata__0      ),
    .reset          (        queue__reset       ),
    .waddr__0       (      queue__waddr__0      ),
    .wdata__0       (      queue__wdata__0      ),
    .wen__0         (       queue__wen__0       )
  );

  // Connect struct/array ports and their wire forms
  assign queue__raddr__0 = queue__raddr[0];
  assign queue__rdata[0] = queue__rdata__0;
  assign queue__waddr__0 = queue__waddr[0];
  assign queue__wdata__0 = queue__wdata[0];
  assign queue__wen__0 = queue__wen[0];

  // Connections
  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_ret = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component PipeQueueRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module PipeQueueRTL__EntryType_Bits32__num_entries_4
(
  input  logic [0:0]    clk,
  output logic [2:0]    count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [31:0]   deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [31:0]   enq__msg,
  output logic [0:0]    enq__rdy
);
  // Sub-component declarations
  logic [0:0]    ctrl__clk;
  logic [2:0]    ctrl__count;
  logic [0:0]    ctrl__deq_en;
  logic [0:0]    ctrl__deq_rdy;
  logic [0:0]    ctrl__enq_en;
  logic [0:0]    ctrl__enq_rdy;
  logic [1:0]    ctrl__raddr;
  logic [0:0]    ctrl__reset;
  logic [1:0]    ctrl__waddr;
  logic [0:0]    ctrl__wen;

  PipeQueueCtrlRTL__num_entries_4 ctrl
  (
    .clk            (         ctrl__clk         ),
    .count          (        ctrl__count        ),
    .deq_en         (        ctrl__deq_en       ),
    .deq_rdy        (       ctrl__deq_rdy       ),
    .enq_en         (        ctrl__enq_en       ),
    .enq_rdy        (       ctrl__enq_rdy       ),
    .raddr          (        ctrl__raddr        ),
    .reset          (        ctrl__reset        ),
    .waddr          (        ctrl__waddr        ),
    .wen            (         ctrl__wen         )
  );

  logic [0:0]    dpath__clk;
  logic [31:0]   dpath__deq_ret;
  logic [31:0]   dpath__enq_msg;
  logic [1:0]    dpath__raddr;
  logic [0:0]    dpath__reset;
  logic [1:0]    dpath__waddr;
  logic [0:0]    dpath__wen;

  NormalQueueDpathRTL__EntryType_Bits32__num_entries_4 dpath
  (
    .clk            (         dpath__clk        ),
    .deq_ret        (       dpath__deq_ret      ),
    .enq_msg        (       dpath__enq_msg      ),
    .raddr          (        dpath__raddr       ),
    .reset          (        dpath__reset       ),
    .waddr          (        dpath__waddr       ),
    .wen            (         dpath__wen        )
  );

  // Connections
  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_en = enq__en;
  assign enq__rdy = ctrl__enq_rdy;
  assign ctrl__deq_en = deq__en;
  assign deq__rdy = ctrl__deq_rdy;
  assign count = ctrl__count;
  assign dpath__enq_msg = enq__msg;
  assign deq__ret = dpath__deq_ret;

endmodule


// PyMTL Component Mux Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py
module Mux__Type_Bits8__ninputs_2
(
  input  logic [0:0]    clk,
  input  logic [7:0]    in___0,
  input  logic [7:0]    in___1,
  output logic [7:0]    out,
  input  logic [0:0]    reset,
  input  logic [0:0]    sel
);
  // Struct/Array ports in the form of wires
  logic [7:0]    in_ [0:1];

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/arithmetics.py:13
  // @update
  // def up_mux():
  //   s.out @= s.in_[ s.sel ]
  
  always_comb begin : up_mux
    out = in_[sel];
  end

  // Connections
  assign in_[0] = in___0;
  assign in_[1] = in___1;

endmodule


// PyMTL Component BypassQueue1EntryRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module BypassQueue1EntryRTL__EntryType_Bits8
(
  input  logic [0:0]    clk,
  output logic [0:0]    count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [7:0]    deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [7:0]    enq__msg,
  output logic [0:0]    enq__rdy
);
  // Wire declarations
  logic [7:0]    entry;
  logic [0:0]    full;

  // Struct/Array ports of sub-components in the form of wires
  logic [7:0]    bypass_mux__in_ [0:1];

  // Sub-component declarations
  logic [0:0]    bypass_mux__clk;
  logic [7:0]    bypass_mux__in___0;
  logic [7:0]    bypass_mux__in___1;
  logic [7:0]    bypass_mux__out;
  logic [0:0]    bypass_mux__reset;
  logic [0:0]    bypass_mux__sel;

  Mux__Type_Bits8__ninputs_2 bypass_mux
  (
    .clk            (      bypass_mux__clk      ),
    .in___0         (     bypass_mux__in___0    ),
    .in___1         (     bypass_mux__in___1    ),
    .out            (      bypass_mux__out      ),
    .reset          (     bypass_mux__reset     ),
    .sel            (      bypass_mux__sel      )
  );

  // Connect struct/array ports and their wire forms
  assign bypass_mux__in___0 = bypass_mux__in_[0];
  assign bypass_mux__in___1 = bypass_mux__in_[1];

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:532
  // s.deq.rdy //= lambda: ~s.reset & ( s.full | s.enq.en )
  
  always_comb begin : _lambda__s_watchers_0__temp_value_q_q_deq_rdy
    deq__rdy = ( ~reset ) & ( full | enq__en );
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:531
  // s.enq.rdy //= lambda: ~s.reset & ~s.full
  
  always_comb begin : _lambda__s_watchers_0__temp_value_q_q_enq_rdy
    enq__rdy = ( ~reset ) & ( ~full );
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:534
  // @update_ff
  // def ff_bypass1():
  //   s.full <<= ~s.reset & ( ~s.deq.en & (s.enq.en | s.full) )
  // 
  //   if s.enq.en & ~s.deq.en:
  //     s.entry <<= s.enq.msg
  
  always_ff @(posedge clk) begin : ff_bypass1
    full <= ( ~reset ) & ( ( ~deq__en ) & ( enq__en | full ) );
    if ( enq__en & ( ~deq__en ) ) begin
      entry <= enq__msg;
    end
  end

  // Connections
  assign bypass_mux__clk = clk;
  assign bypass_mux__reset = reset;
  assign bypass_mux__in_[0] = enq__msg;
  assign bypass_mux__in_[1] = entry;
  assign deq__ret = bypass_mux__out;
  assign bypass_mux__sel = full;
  assign count = full;

endmodule


// PyMTL Component BypassQueueRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module BypassQueueRTL__EntryType_Bits8__num_entries_1
(
  input  logic [0:0]    clk,
  output logic [0:0]    count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [7:0]    deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [7:0]    enq__msg,
  output logic [0:0]    enq__rdy
);
  // Sub-component declarations
  logic [0:0]    q__clk;
  logic [0:0]    q__count;
  logic [0:0]    q__reset;
  logic [0:0]    q__deq__en;
  logic [0:0]    q__deq__rdy;
  logic [7:0]    q__deq__ret;
  logic [0:0]    q__enq__en;
  logic [7:0]    q__enq__msg;
  logic [0:0]    q__enq__rdy;

  BypassQueue1EntryRTL__EntryType_Bits8 q
  (
    .clk            (           q__clk          ),
    .count          (          q__count         ),
    .reset          (          q__reset         ),
    .deq__en        (         q__deq__en        ),
    .deq__rdy       (        q__deq__rdy        ),
    .deq__ret       (        q__deq__ret        ),
    .enq__en        (         q__enq__en        ),
    .enq__msg       (        q__enq__msg        ),
    .enq__rdy       (        q__enq__rdy        )
  );

  // Connections
  assign q__clk = clk;
  assign q__reset = reset;
  assign q__enq__en = enq__en;
  assign q__enq__msg = enq__msg;
  assign enq__rdy = q__enq__rdy;
  assign q__deq__en = deq__en;
  assign deq__rdy = q__deq__rdy;
  assign deq__ret = q__deq__ret;
  assign count = q__count;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_Bits40__nregs_8__rd_ports_1__wr_ports_1__const_zero_False
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py
module RegisterFile__3a498ef3b8776f23
(
  input  logic [0:0]    clk,
  input  logic [2:0]    raddr__0,
  output logic [39:0]   rdata__0,
  input  logic [0:0]    reset,
  input  logic [2:0]    waddr__0,
  input  logic [39:0]   wdata__0,
  input  logic [0:0]    wen__0
);
  // Struct/Array ports in the form of wires
  logic [2:0]    raddr [0:0];
  logic [39:0]   rdata [0:0];
  logic [2:0]    waddr [0:0];
  logic [39:0]   wdata [0:0];
  logic [0:0]    wen [0:0];

  // Wire declarations
  logic [39:0]   regs [0:7];

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  integer __loopvar__up_rf_read_i;
  
  always_comb begin : up_rf_read
    for ( __loopvar__up_rf_read_i = 1'd0; __loopvar__up_rf_read_i < 1'd1; __loopvar__up_rf_read_i = __loopvar__up_rf_read_i + 1'd1 )
      rdata[__loopvar__up_rf_read_i] = regs[raddr[__loopvar__up_rf_read_i]];
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  integer __loopvar__up_rf_write_i;
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( __loopvar__up_rf_write_i = 1'd0; __loopvar__up_rf_write_i < 1'd1; __loopvar__up_rf_write_i = __loopvar__up_rf_write_i + 1'd1 )
      if ( wen[__loopvar__up_rf_write_i] ) begin
        regs[waddr[__loopvar__up_rf_write_i]] <= wdata[__loopvar__up_rf_write_i];
      end
  end

  // Connections
  assign raddr[0] = raddr__0;
  assign rdata__0 = rdata[0];
  assign waddr[0] = waddr__0;
  assign wdata[0] = wdata__0;
  assign wen[0] = wen__0;

endmodule


// PyMTL Component NormalQueueDpathRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module NormalQueueDpathRTL__EntryType_Bits40__num_entries_8
(
  input  logic [0:0]    clk,
  output logic [39:0]   deq_ret,
  input  logic [39:0]   enq_msg,
  input  logic [2:0]    raddr,
  input  logic [0:0]    reset,
  input  logic [2:0]    waddr,
  input  logic [0:0]    wen
);
  // Struct/Array ports of sub-components in the form of wires
  logic [2:0]    queue__raddr [0:0];
  logic [39:0]   queue__rdata [0:0];
  logic [2:0]    queue__waddr [0:0];
  logic [39:0]   queue__wdata [0:0];
  logic [0:0]    queue__wen [0:0];

  // Sub-component declarations
  logic [0:0]    queue__clk;
  logic [2:0]    queue__raddr__0;
  logic [39:0]   queue__rdata__0;
  logic [0:0]    queue__reset;
  logic [2:0]    queue__waddr__0;
  logic [39:0]   queue__wdata__0;
  logic [0:0]    queue__wen__0;

  RegisterFile__3a498ef3b8776f23 queue
  (
    .clk            (         queue__clk        ),
    .raddr__0       (      queue__raddr__0      ),
    .rdata__0       (      queue__rdata__0      ),
    .reset          (        queue__reset       ),
    .waddr__0       (      queue__waddr__0      ),
    .wdata__0       (      queue__wdata__0      ),
    .wen__0         (       queue__wen__0       )
  );

  // Connect struct/array ports and their wire forms
  assign queue__raddr__0 = queue__raddr[0];
  assign queue__rdata[0] = queue__rdata__0;
  assign queue__waddr__0 = queue__waddr[0];
  assign queue__wdata__0 = queue__wdata[0];
  assign queue__wen__0 = queue__wen[0];

  // Connections
  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_ret = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component PipeQueueRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module PipeQueueRTL__EntryType_Bits40__num_entries_8
(
  input  logic [0:0]    clk,
  output logic [3:0]    count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [39:0]   deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [39:0]   enq__msg,
  output logic [0:0]    enq__rdy
);
  // Sub-component declarations
  logic [0:0]    ctrl__clk;
  logic [3:0]    ctrl__count;
  logic [0:0]    ctrl__deq_en;
  logic [0:0]    ctrl__deq_rdy;
  logic [0:0]    ctrl__enq_en;
  logic [0:0]    ctrl__enq_rdy;
  logic [2:0]    ctrl__raddr;
  logic [0:0]    ctrl__reset;
  logic [2:0]    ctrl__waddr;
  logic [0:0]    ctrl__wen;

  PipeQueueCtrlRTL__num_entries_8 ctrl
  (
    .clk            (         ctrl__clk         ),
    .count          (        ctrl__count        ),
    .deq_en         (        ctrl__deq_en       ),
    .deq_rdy        (       ctrl__deq_rdy       ),
    .enq_en         (        ctrl__enq_en       ),
    .enq_rdy        (       ctrl__enq_rdy       ),
    .raddr          (        ctrl__raddr        ),
    .reset          (        ctrl__reset        ),
    .waddr          (        ctrl__waddr        ),
    .wen            (         ctrl__wen         )
  );

  logic [0:0]    dpath__clk;
  logic [39:0]   dpath__deq_ret;
  logic [39:0]   dpath__enq_msg;
  logic [2:0]    dpath__raddr;
  logic [0:0]    dpath__reset;
  logic [2:0]    dpath__waddr;
  logic [0:0]    dpath__wen;

  NormalQueueDpathRTL__EntryType_Bits40__num_entries_8 dpath
  (
    .clk            (         dpath__clk        ),
    .deq_ret        (       dpath__deq_ret      ),
    .enq_msg        (       dpath__enq_msg      ),
    .raddr          (        dpath__raddr       ),
    .reset          (        dpath__reset       ),
    .waddr          (        dpath__waddr       ),
    .wen            (         dpath__wen        )
  );

  // Connections
  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_en = enq__en;
  assign enq__rdy = ctrl__enq_rdy;
  assign ctrl__deq_en = deq__en;
  assign deq__rdy = ctrl__deq_rdy;
  assign count = ctrl__count;
  assign dpath__enq_msg = enq__msg;
  assign deq__ret = dpath__deq_ret;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_Bits64__nregs_8__rd_ports_1__wr_ports_1__const_zero_False
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py
module RegisterFile__3d5d8e3f45ba6a60
(
  input  logic [0:0]    clk,
  input  logic [2:0]    raddr__0,
  output logic [63:0]   rdata__0,
  input  logic [0:0]    reset,
  input  logic [2:0]    waddr__0,
  input  logic [63:0]   wdata__0,
  input  logic [0:0]    wen__0
);
  // Struct/Array ports in the form of wires
  logic [2:0]    raddr [0:0];
  logic [63:0]   rdata [0:0];
  logic [2:0]    waddr [0:0];
  logic [63:0]   wdata [0:0];
  logic [0:0]    wen [0:0];

  // Wire declarations
  logic [63:0]   regs [0:7];

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  integer __loopvar__up_rf_read_i;
  
  always_comb begin : up_rf_read
    for ( __loopvar__up_rf_read_i = 1'd0; __loopvar__up_rf_read_i < 1'd1; __loopvar__up_rf_read_i = __loopvar__up_rf_read_i + 1'd1 )
      rdata[__loopvar__up_rf_read_i] = regs[raddr[__loopvar__up_rf_read_i]];
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  integer __loopvar__up_rf_write_i;
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( __loopvar__up_rf_write_i = 1'd0; __loopvar__up_rf_write_i < 1'd1; __loopvar__up_rf_write_i = __loopvar__up_rf_write_i + 1'd1 )
      if ( wen[__loopvar__up_rf_write_i] ) begin
        regs[waddr[__loopvar__up_rf_write_i]] <= wdata[__loopvar__up_rf_write_i];
      end
  end

  // Connections
  assign raddr[0] = raddr__0;
  assign rdata__0 = rdata[0];
  assign waddr[0] = waddr__0;
  assign wdata[0] = wdata__0;
  assign wen[0] = wen__0;

endmodule


// PyMTL Component NormalQueueDpathRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module NormalQueueDpathRTL__EntryType_Bits64__num_entries_8
(
  input  logic [0:0]    clk,
  output logic [63:0]   deq_ret,
  input  logic [63:0]   enq_msg,
  input  logic [2:0]    raddr,
  input  logic [0:0]    reset,
  input  logic [2:0]    waddr,
  input  logic [0:0]    wen
);
  // Struct/Array ports of sub-components in the form of wires
  logic [2:0]    queue__raddr [0:0];
  logic [63:0]   queue__rdata [0:0];
  logic [2:0]    queue__waddr [0:0];
  logic [63:0]   queue__wdata [0:0];
  logic [0:0]    queue__wen [0:0];

  // Sub-component declarations
  logic [0:0]    queue__clk;
  logic [2:0]    queue__raddr__0;
  logic [63:0]   queue__rdata__0;
  logic [0:0]    queue__reset;
  logic [2:0]    queue__waddr__0;
  logic [63:0]   queue__wdata__0;
  logic [0:0]    queue__wen__0;

  RegisterFile__3d5d8e3f45ba6a60 queue
  (
    .clk            (         queue__clk        ),
    .raddr__0       (      queue__raddr__0      ),
    .rdata__0       (      queue__rdata__0      ),
    .reset          (        queue__reset       ),
    .waddr__0       (      queue__waddr__0      ),
    .wdata__0       (      queue__wdata__0      ),
    .wen__0         (       queue__wen__0       )
  );

  // Connect struct/array ports and their wire forms
  assign queue__raddr__0 = queue__raddr[0];
  assign queue__rdata[0] = queue__rdata__0;
  assign queue__waddr__0 = queue__waddr[0];
  assign queue__wdata__0 = queue__wdata[0];
  assign queue__wen__0 = queue__wen[0];

  // Connections
  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_ret = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component PipeQueueRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module PipeQueueRTL__EntryType_Bits64__num_entries_8
(
  input  logic [0:0]    clk,
  output logic [3:0]    count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [63:0]   deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [63:0]   enq__msg,
  output logic [0:0]    enq__rdy
);
  // Sub-component declarations
  logic [0:0]    ctrl__clk;
  logic [3:0]    ctrl__count;
  logic [0:0]    ctrl__deq_en;
  logic [0:0]    ctrl__deq_rdy;
  logic [0:0]    ctrl__enq_en;
  logic [0:0]    ctrl__enq_rdy;
  logic [2:0]    ctrl__raddr;
  logic [0:0]    ctrl__reset;
  logic [2:0]    ctrl__waddr;
  logic [0:0]    ctrl__wen;

  PipeQueueCtrlRTL__num_entries_8 ctrl
  (
    .clk            (         ctrl__clk         ),
    .count          (        ctrl__count        ),
    .deq_en         (        ctrl__deq_en       ),
    .deq_rdy        (       ctrl__deq_rdy       ),
    .enq_en         (        ctrl__enq_en       ),
    .enq_rdy        (       ctrl__enq_rdy       ),
    .raddr          (        ctrl__raddr        ),
    .reset          (        ctrl__reset        ),
    .waddr          (        ctrl__waddr        ),
    .wen            (         ctrl__wen         )
  );

  logic [0:0]    dpath__clk;
  logic [63:0]   dpath__deq_ret;
  logic [63:0]   dpath__enq_msg;
  logic [2:0]    dpath__raddr;
  logic [0:0]    dpath__reset;
  logic [2:0]    dpath__waddr;
  logic [0:0]    dpath__wen;

  NormalQueueDpathRTL__EntryType_Bits64__num_entries_8 dpath
  (
    .clk            (         dpath__clk        ),
    .deq_ret        (       dpath__deq_ret      ),
    .enq_msg        (       dpath__enq_msg      ),
    .raddr          (        dpath__raddr       ),
    .reset          (        dpath__reset       ),
    .waddr          (        dpath__waddr       ),
    .wen            (         dpath__wen        )
  );

  // Connections
  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_en = enq__en;
  assign enq__rdy = ctrl__enq_rdy;
  assign ctrl__deq_en = deq__en;
  assign deq__rdy = ctrl__deq_rdy;
  assign count = ctrl__count;
  assign dpath__enq_msg = enq__msg;
  assign deq__ret = dpath__deq_ret;

endmodule


// PyMTL Component Sized_memory_sender Definition
// Full name: Sized_memory_sender__size_type_Bits32__addr_type_Bits64__item_size_64__mem_request_dest_1
// At /home/sjq/git/pymtl_project/satacc/utils/mem_oparator.py
module Sized_memory_sender__a7711154fdf68f43
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  input  logic [0:0]    addr_recv__en,
  input  logic [63:0]   addr_recv__msg,
  output logic [0:0]    addr_recv__rdy,
  output logic [0:0]    mem_out__en,
  output logic [143:0]  mem_out__msg,
  input  logic [0:0]    mem_out__rdy,
  input  logic [0:0]    size_recv__en,
  input  logic [31:0]   size_recv__msg,
  output logic [0:0]    size_recv__rdy
);
  // Struct/Array ports of sub-components in the form of wires
  logic [63:0]   addr_data_mux__in_ [0:1];
  logic [0:0]    addr_en_mux__in_ [0:1];
  logic [31:0]   size_data_mux__in_ [0:1];
  logic [0:0]    size_en_mux__in_ [0:1];

  // Sub-component declarations
  logic [0:0]    addr_data_mux__clk;
  logic [63:0]   addr_data_mux__in___0;
  logic [63:0]   addr_data_mux__in___1;
  logic [63:0]   addr_data_mux__out;
  logic [0:0]    addr_data_mux__reset;
  logic [0:0]    addr_data_mux__sel;

  Mux__Type_Bits64__ninputs_2 addr_data_mux
  (
    .clk            (     addr_data_mux__clk    ),
    .in___0         (   addr_data_mux__in___0   ),
    .in___1         (   addr_data_mux__in___1   ),
    .out            (     addr_data_mux__out    ),
    .reset          (    addr_data_mux__reset   ),
    .sel            (     addr_data_mux__sel    )
  );

  logic [0:0]    addr_en_mux__clk;
  logic [0:0]    addr_en_mux__in___0;
  logic [0:0]    addr_en_mux__in___1;
  logic [0:0]    addr_en_mux__out;
  logic [0:0]    addr_en_mux__reset;
  logic [0:0]    addr_en_mux__sel;

  Mux__Type_Bits1__ninputs_2 addr_en_mux
  (
    .clk            (      addr_en_mux__clk     ),
    .in___0         (    addr_en_mux__in___0    ),
    .in___1         (    addr_en_mux__in___1    ),
    .out            (      addr_en_mux__out     ),
    .reset          (     addr_en_mux__reset    ),
    .sel            (      addr_en_mux__sel     )
  );

  logic [0:0]    addr_reg__clk;
  logic [0:0]    addr_reg__en;
  logic [63:0]   addr_reg__in_;
  logic [63:0]   addr_reg__out;
  logic [0:0]    addr_reg__reset;

  RegEnRst__Type_Bits64__reset_value_0 addr_reg
  (
    .clk            (       addr_reg__clk       ),
    .en             (        addr_reg__en       ),
    .in_            (       addr_reg__in_       ),
    .out            (       addr_reg__out       ),
    .reset          (      addr_reg__reset      )
  );

  logic [0:0]    size_data_mux__clk;
  logic [31:0]   size_data_mux__in___0;
  logic [31:0]   size_data_mux__in___1;
  logic [31:0]   size_data_mux__out;
  logic [0:0]    size_data_mux__reset;
  logic [0:0]    size_data_mux__sel;

  Mux__Type_Bits32__ninputs_2 size_data_mux
  (
    .clk            (     size_data_mux__clk    ),
    .in___0         (   size_data_mux__in___0   ),
    .in___1         (   size_data_mux__in___1   ),
    .out            (     size_data_mux__out    ),
    .reset          (    size_data_mux__reset   ),
    .sel            (     size_data_mux__sel    )
  );

  logic [0:0]    size_en_mux__clk;
  logic [0:0]    size_en_mux__in___0;
  logic [0:0]    size_en_mux__in___1;
  logic [0:0]    size_en_mux__out;
  logic [0:0]    size_en_mux__reset;
  logic [0:0]    size_en_mux__sel;

  Mux__Type_Bits1__ninputs_2 size_en_mux
  (
    .clk            (      size_en_mux__clk     ),
    .in___0         (    size_en_mux__in___0    ),
    .in___1         (    size_en_mux__in___1    ),
    .out            (      size_en_mux__out     ),
    .reset          (     size_en_mux__reset    ),
    .sel            (      size_en_mux__sel     )
  );

  logic [0:0]    size_reg__clk;
  logic [0:0]    size_reg__en;
  logic [31:0]   size_reg__in_;
  logic [31:0]   size_reg__out;
  logic [0:0]    size_reg__reset;

  RegEnRst__Type_Bits32__reset_value_0 size_reg
  (
    .clk            (       size_reg__clk       ),
    .en             (        size_reg__en       ),
    .in_            (       size_reg__in_       ),
    .out            (       size_reg__out       ),
    .reset          (      size_reg__reset      )
  );

  // Connect struct/array ports and their wire forms
  assign addr_data_mux__in___0 = addr_data_mux__in_[0];
  assign addr_data_mux__in___1 = addr_data_mux__in_[1];
  assign addr_en_mux__in___0 = addr_en_mux__in_[0];
  assign addr_en_mux__in___1 = addr_en_mux__in_[1];
  assign size_data_mux__in___0 = size_data_mux__in_[0];
  assign size_data_mux__in___1 = size_data_mux__in_[1];
  assign size_en_mux__in___0 = size_en_mux__in_[0];
  assign size_en_mux__in___1 = size_en_mux__in_[1];

  // Temporary wire definitions
  logic [143:0]  __tmpvar__comb_message;

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/utils/mem_oparator.py:46
  // @update
  // def comb():
  //     s.size_recv.rdy @= s.size_reg.out != 0
  //     s.addr_recv.rdy @= s.size_reg.out != 0
  // 
  //     # if the size is zero, listen to outsize sigal, else listen to my self
  //     s.size_en_mux.sel @= 0 if s.size_reg.out == 0 else 1
  //     s.size_data_mux.sel @=0 if s.size_reg.out == 0 else 1
  //     # build the request.
  //     message = req()
  // 
  //     s.mem_out.msg @= message
  //     s.size_data_mux.in_[1] @= s.size_data_mux.out - 1
  //     # addr will change every round
  //     s.addr_data_mux.in_[
  //         1]@=s.addr_reg.out + item_size  # addr offset
  // 
  //     if s.mem_out.rdy & (s.size_reg.out != 0):
  //         # send the request and deduce the size
  //         s.size_en_mux.in_[1] @= 1
  //         s.mem_out.en @=1
  //         s.addr_en_mux.in_[1]@=1
  // 
  //     else:
  //         s.size_en_mux.in_[1]@=0
  //         s.addr_en_mux.in_[1]@=0
  //         s.mem_out.en@=0
  
  always_comb begin : comb
    size_recv__rdy = size_reg__out != 32'd0;
    addr_recv__rdy = size_reg__out != 32'd0;
    size_en_mux__sel = ( size_reg__out == 32'd0 ) ? 1'd0 : 1'd1;
    size_data_mux__sel = ( size_reg__out == 32'd0 ) ? 1'd0 : 1'd1;
    __tmpvar__comb_message = 144'd0;
    mem_out__msg = __tmpvar__comb_message;
    size_data_mux__in_[1'd1] = size_data_mux__out - 32'd1;
    addr_data_mux__in_[1'd1] = addr_reg__out + 64'd64;
    if ( mem_out__rdy & ( size_reg__out != 32'd0 ) ) begin
      size_en_mux__in_[1'd1] = 1'd1;
      mem_out__en = 1'd1;
      addr_en_mux__in_[1'd1] = 1'd1;
    end
    else begin
      size_en_mux__in_[1'd1] = 1'd0;
      addr_en_mux__in_[1'd1] = 1'd0;
      mem_out__en = 1'd0;
    end
  end

  // Connections
  assign size_reg__clk = clk;
  assign size_reg__reset = reset;
  assign addr_reg__clk = clk;
  assign addr_reg__reset = reset;
  assign size_en_mux__clk = clk;
  assign size_en_mux__reset = reset;
  assign size_data_mux__clk = clk;
  assign size_data_mux__reset = reset;
  assign addr_en_mux__clk = clk;
  assign addr_en_mux__reset = reset;
  assign addr_data_mux__clk = clk;
  assign addr_data_mux__reset = reset;
  assign size_reg__en = size_en_mux__out;
  assign size_reg__in_ = size_data_mux__out;
  assign addr_reg__en = addr_en_mux__out;
  assign addr_reg__in_ = addr_data_mux__out;
  assign addr_en_mux__in_[0] = addr_recv__en;
  assign addr_data_mux__in_[0] = addr_recv__msg;
  assign size_en_mux__in_[0] = size_recv__en;
  assign size_data_mux__in_[0] = size_recv__msg;

endmodule


// PyMTL Component Watcher Definition
// At /home/sjq/git/pymtl_project/satacc/watcher/watcher.py
module Watcher__index_0
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  output logic [0:0]    cr_send__en,
  output logic [31:0]   cr_send__msg,
  input  logic [0:0]    cr_send__rdy,
  input  logic [0:0]    from_trail_recv__en,
  input  logic [31:0]   from_trail_recv__msg,
  output logic [0:0]    from_trail_recv__rdy,
  input  logic [0:0]    lit_to_size_addr_mem_recv__en,
  input  logic [113:0]  lit_to_size_addr_mem_recv__msg,
  output logic [0:0]    lit_to_size_addr_mem_recv__rdy,
  output logic [0:0]    lit_to_size_addr_mem_send__en,
  output logic [175:0]  lit_to_size_addr_mem_send__msg,
  input  logic [0:0]    lit_to_size_addr_mem_send__rdy,
  input  logic [0:0]    value_recv__en,
  input  logic [23:0]   value_recv__msg,
  output logic [0:0]    value_recv__rdy,
  output logic [0:0]    value_send__en,
  output logic [85:0]   value_send__msg,
  input  logic [0:0]    value_send__rdy,
  input  logic [0:0]    watcher_recv__en,
  input  logic [81:0]   watcher_recv__msg,
  output logic [0:0]    watcher_recv__rdy,
  output logic [0:0]    watcher_send_mem_send__en,
  output logic [143:0]  watcher_send_mem_send__msg,
  input  logic [0:0]    watcher_send_mem_send__rdy
);
  // Sub-component declarations
  logic [0:0]    cr_send_buffer__clk;
  logic [2:0]    cr_send_buffer__count;
  logic [0:0]    cr_send_buffer__reset;
  logic [0:0]    cr_send_buffer__deq__en;
  logic [0:0]    cr_send_buffer__deq__rdy;
  logic [31:0]   cr_send_buffer__deq__ret;
  logic [0:0]    cr_send_buffer__enq__en;
  logic [31:0]   cr_send_buffer__enq__msg;
  logic [0:0]    cr_send_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_4 cr_send_buffer
  (
    .clk            (    cr_send_buffer__clk    ),
    .count          (   cr_send_buffer__count   ),
    .reset          (   cr_send_buffer__reset   ),
    .deq__en        (  cr_send_buffer__deq__en  ),
    .deq__rdy       (  cr_send_buffer__deq__rdy ),
    .deq__ret       (  cr_send_buffer__deq__ret ),
    .enq__en        (  cr_send_buffer__enq__en  ),
    .enq__msg       (  cr_send_buffer__enq__msg ),
    .enq__rdy       (  cr_send_buffer__enq__rdy )
  );

  logic [0:0]    lit_recv_buffer__clk;
  logic [2:0]    lit_recv_buffer__count;
  logic [0:0]    lit_recv_buffer__reset;
  logic [0:0]    lit_recv_buffer__deq__en;
  logic [0:0]    lit_recv_buffer__deq__rdy;
  logic [31:0]   lit_recv_buffer__deq__ret;
  logic [0:0]    lit_recv_buffer__enq__en;
  logic [31:0]   lit_recv_buffer__enq__msg;
  logic [0:0]    lit_recv_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_4 lit_recv_buffer
  (
    .clk            (    lit_recv_buffer__clk   ),
    .count          (   lit_recv_buffer__count  ),
    .reset          (   lit_recv_buffer__reset  ),
    .deq__en        (  lit_recv_buffer__deq__en ),
    .deq__rdy       ( lit_recv_buffer__deq__rdy ),
    .deq__ret       ( lit_recv_buffer__deq__ret ),
    .enq__en        (  lit_recv_buffer__enq__en ),
    .enq__msg       ( lit_recv_buffer__enq__msg ),
    .enq__rdy       ( lit_recv_buffer__enq__rdy )
  );

  logic [0:0]    size_addr_buffer__clk;
  logic [3:0]    size_addr_buffer__count;
  logic [0:0]    size_addr_buffer__reset;
  logic [0:0]    size_addr_buffer__deq__en;
  logic [0:0]    size_addr_buffer__deq__rdy;
  logic [95:0]   size_addr_buffer__deq__ret;
  logic [0:0]    size_addr_buffer__enq__en;
  logic [95:0]   size_addr_buffer__enq__msg;
  logic [0:0]    size_addr_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits96__num_entries_8 size_addr_buffer
  (
    .clk            (   size_addr_buffer__clk   ),
    .count          (  size_addr_buffer__count  ),
    .reset          (  size_addr_buffer__reset  ),
    .deq__en        ( size_addr_buffer__deq__en ),
    .deq__rdy       ( size_addr_buffer__deq__rdy ),
    .deq__ret       ( size_addr_buffer__deq__ret ),
    .enq__en        ( size_addr_buffer__enq__en ),
    .enq__msg       ( size_addr_buffer__enq__msg ),
    .enq__rdy       ( size_addr_buffer__enq__rdy )
  );

  logic [0:0]    temp_cr_q__clk;
  logic [0:0]    temp_cr_q__count;
  logic [0:0]    temp_cr_q__reset;
  logic [0:0]    temp_cr_q__deq__en;
  logic [0:0]    temp_cr_q__deq__rdy;
  logic [31:0]   temp_cr_q__deq__ret;
  logic [0:0]    temp_cr_q__enq__en;
  logic [31:0]   temp_cr_q__enq__msg;
  logic [0:0]    temp_cr_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_cr_q
  (
    .clk            (       temp_cr_q__clk      ),
    .count          (      temp_cr_q__count     ),
    .reset          (      temp_cr_q__reset     ),
    .deq__en        (     temp_cr_q__deq__en    ),
    .deq__rdy       (    temp_cr_q__deq__rdy    ),
    .deq__ret       (    temp_cr_q__deq__ret    ),
    .enq__en        (     temp_cr_q__enq__en    ),
    .enq__msg       (    temp_cr_q__enq__msg    ),
    .enq__rdy       (    temp_cr_q__enq__rdy    )
  );

  logic [0:0]    temp_value_q__clk;
  logic [0:0]    temp_value_q__count;
  logic [0:0]    temp_value_q__reset;
  logic [0:0]    temp_value_q__deq__en;
  logic [0:0]    temp_value_q__deq__rdy;
  logic [7:0]    temp_value_q__deq__ret;
  logic [0:0]    temp_value_q__enq__en;
  logic [7:0]    temp_value_q__enq__msg;
  logic [0:0]    temp_value_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits8__num_entries_1 temp_value_q
  (
    .clk            (     temp_value_q__clk     ),
    .count          (    temp_value_q__count    ),
    .reset          (    temp_value_q__reset    ),
    .deq__en        (   temp_value_q__deq__en   ),
    .deq__rdy       (   temp_value_q__deq__rdy  ),
    .deq__ret       (   temp_value_q__deq__ret  ),
    .enq__en        (   temp_value_q__enq__en   ),
    .enq__msg       (   temp_value_q__enq__msg  ),
    .enq__rdy       (   temp_value_q__enq__rdy  )
  );

  logic [0:0]    value_buffer__clk;
  logic [3:0]    value_buffer__count;
  logic [0:0]    value_buffer__reset;
  logic [0:0]    value_buffer__deq__en;
  logic [0:0]    value_buffer__deq__rdy;
  logic [39:0]   value_buffer__deq__ret;
  logic [0:0]    value_buffer__enq__en;
  logic [39:0]   value_buffer__enq__msg;
  logic [0:0]    value_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits40__num_entries_8 value_buffer
  (
    .clk            (     value_buffer__clk     ),
    .count          (    value_buffer__count    ),
    .reset          (    value_buffer__reset    ),
    .deq__en        (   value_buffer__deq__en   ),
    .deq__rdy       (   value_buffer__deq__rdy  ),
    .deq__ret       (   value_buffer__deq__ret  ),
    .enq__en        (   value_buffer__enq__en   ),
    .enq__msg       (   value_buffer__enq__msg  ),
    .enq__rdy       (   value_buffer__enq__rdy  )
  );

  logic [0:0]    watcher_buffer__clk;
  logic [3:0]    watcher_buffer__count;
  logic [0:0]    watcher_buffer__reset;
  logic [0:0]    watcher_buffer__deq__en;
  logic [0:0]    watcher_buffer__deq__rdy;
  logic [63:0]   watcher_buffer__deq__ret;
  logic [0:0]    watcher_buffer__enq__en;
  logic [63:0]   watcher_buffer__enq__msg;
  logic [0:0]    watcher_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits64__num_entries_8 watcher_buffer
  (
    .clk            (    watcher_buffer__clk    ),
    .count          (   watcher_buffer__count   ),
    .reset          (   watcher_buffer__reset   ),
    .deq__en        (  watcher_buffer__deq__en  ),
    .deq__rdy       (  watcher_buffer__deq__rdy ),
    .deq__ret       (  watcher_buffer__deq__ret ),
    .enq__en        (  watcher_buffer__enq__en  ),
    .enq__msg       (  watcher_buffer__enq__msg ),
    .enq__rdy       (  watcher_buffer__enq__rdy )
  );

  logic [0:0]    watcher_fetch_unit__clk;
  logic [0:0]    watcher_fetch_unit__reset;
  logic [0:0]    watcher_fetch_unit__addr_recv__en;
  logic [63:0]   watcher_fetch_unit__addr_recv__msg;
  logic [0:0]    watcher_fetch_unit__addr_recv__rdy;
  logic [0:0]    watcher_fetch_unit__mem_out__en;
  logic [143:0]  watcher_fetch_unit__mem_out__msg;
  logic [0:0]    watcher_fetch_unit__mem_out__rdy;
  logic [0:0]    watcher_fetch_unit__size_recv__en;
  logic [31:0]   watcher_fetch_unit__size_recv__msg;
  logic [0:0]    watcher_fetch_unit__size_recv__rdy;

  Sized_memory_sender__a7711154fdf68f43 watcher_fetch_unit
  (
    .clk            (  watcher_fetch_unit__clk  ),
    .reset          ( watcher_fetch_unit__reset ),
    .addr_recv__en  ( watcher_fetch_unit__addr_recv__en ),
    .addr_recv__msg ( watcher_fetch_unit__addr_recv__msg ),
    .addr_recv__rdy ( watcher_fetch_unit__addr_recv__rdy ),
    .mem_out__en    ( watcher_fetch_unit__mem_out__en ),
    .mem_out__msg   ( watcher_fetch_unit__mem_out__msg ),
    .mem_out__rdy   ( watcher_fetch_unit__mem_out__rdy ),
    .size_recv__en  ( watcher_fetch_unit__size_recv__en ),
    .size_recv__msg ( watcher_fetch_unit__size_recv__msg ),
    .size_recv__rdy ( watcher_fetch_unit__size_recv__rdy )
  );

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/watcher/watcher.py:50
  // @update
  // def comb():
  //     # send litral:
  //     s.temp_value_q.deq.en@=s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  //     s.temp_cr_q.deq.en@=s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  //     s.temp_cr_q.enq.msg@=s.watcher_buffer.deq.ret[32:64]
  //     s.temp_value_q.enq.en@=s.value_recv.en
  //     s.value_recv.rdy@=s.temp_value_q.enq.rdy
  //     s.temp_value_q.enq.msg@=s.value_recv.msg[24-8:24]
  // 
  //     s.watcher_buffer.enq.en@=s.watcher_recv.en
  //     s.watcher_recv.rdy@=s.watcher_buffer.enq.rdy
  //     s.watcher_buffer.enq.msg@=s.watcher_recv.msg[82-64:82]
  // 
  //     s.size_addr_buffer.enq.en@=s.lit_to_size_addr_mem_recv.en
  //     s.lit_to_size_addr_mem_recv.rdy @=s.size_addr_buffer.enq.rdy
  //     s.size_addr_buffer.enq.msg@=s.lit_to_size_addr_mem_recv.msg[114-96:114]
  // 
  //     s.size_addr_buffer.deq.en@=s.watcher_fetch_unit.size_recv.rdy & s.watcher_fetch_unit.addr_recv.rdy
  // 
  //     s.value_buffer.enq.msg@=concat(s.temp_value_q.deq.ret,
  //                                    s.temp_cr_q.deq.ret)
  //     s.value_buffer.enq.en@= s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  // 
  //     s.lit_to_size_addr_mem_send.en@=s.lit_to_size_addr_mem_send.rdy & s.lit_recv_buffer.deq.rdy
  //     s.lit_recv_buffer.deq.en@=s.lit_to_size_addr_mem_send.rdy & s.lit_recv_buffer.deq.rdy
  // 
  //     # TODO: set the message
  //     s.lit_to_size_addr_mem_send.msg@=concat(
  //         Bits12(0), Bits32(0), s.lit_recv_buffer.deq.ret, Bits100(0))
  // 
  //     s.watcher_fetch_unit.size_recv.en @=s.watcher_fetch_unit.size_recv.rdy & s.size_addr_buffer.deq.rdy
  //     s.watcher_fetch_unit.addr_recv.en @=s.watcher_fetch_unit.addr_recv.rdy & s.size_addr_buffer.deq.rdy
  //     s.watcher_fetch_unit.size_recv.msg@=s.size_addr_buffer.deq.ret[18:50]
  //     s.watcher_fetch_unit.addr_recv.msg@=s.size_addr_buffer.deq.ret[96-64:96]
  // 
  //     # send value request
  //     s.value_send.en@=s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  //     s.watcher_buffer.deq.en@=s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  //     s.temp_cr_q.enq.en@= s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  // 
  //     s.value_send.msg @= concat(Bits12(0), Bits32(0),
  //                                s.watcher_buffer.deq.ret[0:32], Bits10(0))
  // 
  //     s.temp_value_q.enq.en@= s.value_recv.en
  //     s.value_recv.rdy@=s.temp_value_q.enq.rdy
  //     s.temp_value_q.enq.msg@=s.value_recv.msg[16:24]
  // 
  //     s.value_buffer.deq.en@=((s.value_buffer.deq.ret[0:8] != 0) & s.value_buffer.deq.rdy &
  //                             s.cr_send_buffer.enq.rdy) | (s.value_buffer.deq.ret[0:8] == 0)
  //     s.cr_send_buffer.enq.en@= (
  //         s.value_buffer.deq.ret[0:8] != 0) & s.value_buffer.deq.rdy & s.cr_send_buffer.enq.rdy
  // 
  //     s.cr_send.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.deq.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.enq.msg@=s.value_buffer.deq.ret[8:40]
  // 
  //     s.cr_send.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.deq.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send.msg @=s.cr_send_buffer.deq.ret
  
  always_comb begin : comb
    temp_value_q__deq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    temp_cr_q__deq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    temp_cr_q__enq__msg = watcher_buffer__deq__ret[6'd63:6'd32];
    temp_value_q__enq__en = value_recv__en;
    value_recv__rdy = temp_value_q__enq__rdy;
    temp_value_q__enq__msg = value_recv__msg[5'd23:5'd24 - 5'd8];
    watcher_buffer__enq__en = watcher_recv__en;
    watcher_recv__rdy = watcher_buffer__enq__rdy;
    watcher_buffer__enq__msg = watcher_recv__msg[7'd81:7'd82 - 7'd64];
    size_addr_buffer__enq__en = lit_to_size_addr_mem_recv__en;
    lit_to_size_addr_mem_recv__rdy = size_addr_buffer__enq__rdy;
    size_addr_buffer__enq__msg = lit_to_size_addr_mem_recv__msg[7'd113:7'd114 - 7'd96];
    size_addr_buffer__deq__en = watcher_fetch_unit__size_recv__rdy & watcher_fetch_unit__addr_recv__rdy;
    value_buffer__enq__msg = { temp_value_q__deq__ret, temp_cr_q__deq__ret };
    value_buffer__enq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    lit_to_size_addr_mem_send__en = lit_to_size_addr_mem_send__rdy & lit_recv_buffer__deq__rdy;
    lit_recv_buffer__deq__en = lit_to_size_addr_mem_send__rdy & lit_recv_buffer__deq__rdy;
    lit_to_size_addr_mem_send__msg = { 12'd0, 32'd0, lit_recv_buffer__deq__ret, 100'd0 };
    watcher_fetch_unit__size_recv__en = watcher_fetch_unit__size_recv__rdy & size_addr_buffer__deq__rdy;
    watcher_fetch_unit__addr_recv__en = watcher_fetch_unit__addr_recv__rdy & size_addr_buffer__deq__rdy;
    watcher_fetch_unit__size_recv__msg = size_addr_buffer__deq__ret[7'd49:7'd18];
    watcher_fetch_unit__addr_recv__msg = size_addr_buffer__deq__ret[7'd95:7'd96 - 7'd64];
    value_send__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    watcher_buffer__deq__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    temp_cr_q__enq__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    value_send__msg = { 12'd0, 32'd0, watcher_buffer__deq__ret[6'd31:6'd0], 10'd0 };
    temp_value_q__enq__en = value_recv__en;
    value_recv__rdy = temp_value_q__enq__rdy;
    temp_value_q__enq__msg = value_recv__msg[5'd23:5'd16];
    value_buffer__deq__en = ( ( ( value_buffer__deq__ret[6'd7:6'd0] != 8'd0 ) & value_buffer__deq__rdy ) & cr_send_buffer__enq__rdy ) | ( value_buffer__deq__ret[6'd7:6'd0] == 8'd0 );
    cr_send_buffer__enq__en = ( ( value_buffer__deq__ret[6'd7:6'd0] != 8'd0 ) & value_buffer__deq__rdy ) & cr_send_buffer__enq__rdy;
    cr_send__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__deq__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__enq__msg = value_buffer__deq__ret[6'd39:6'd8];
    cr_send__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__deq__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send__msg = cr_send_buffer__deq__ret;
  end

  // Connections
  assign lit_recv_buffer__clk = clk;
  assign lit_recv_buffer__reset = reset;
  assign size_addr_buffer__clk = clk;
  assign size_addr_buffer__reset = reset;
  assign watcher_buffer__clk = clk;
  assign watcher_buffer__reset = reset;
  assign value_buffer__clk = clk;
  assign value_buffer__reset = reset;
  assign cr_send_buffer__clk = clk;
  assign cr_send_buffer__reset = reset;
  assign temp_cr_q__clk = clk;
  assign temp_cr_q__reset = reset;
  assign temp_value_q__clk = clk;
  assign temp_value_q__reset = reset;
  assign watcher_fetch_unit__clk = clk;
  assign watcher_fetch_unit__reset = reset;
  assign lit_recv_buffer__enq__en = from_trail_recv__en;
  assign lit_recv_buffer__enq__msg = from_trail_recv__msg;
  assign from_trail_recv__rdy = lit_recv_buffer__enq__rdy;
  assign watcher_send_mem_send__en = watcher_fetch_unit__mem_out__en;
  assign watcher_send_mem_send__msg = watcher_fetch_unit__mem_out__msg;
  assign watcher_fetch_unit__mem_out__rdy = watcher_send_mem_send__rdy;

endmodule


// PyMTL Component Sized_memory_sender Definition
// Full name: Sized_memory_sender__size_type_Bits32__addr_type_Bits64__item_size_64__mem_request_dest_9
// At /home/sjq/git/pymtl_project/satacc/utils/mem_oparator.py
module Sized_memory_sender__cf46d990ac2ba893
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  input  logic [0:0]    addr_recv__en,
  input  logic [63:0]   addr_recv__msg,
  output logic [0:0]    addr_recv__rdy,
  output logic [0:0]    mem_out__en,
  output logic [143:0]  mem_out__msg,
  input  logic [0:0]    mem_out__rdy,
  input  logic [0:0]    size_recv__en,
  input  logic [31:0]   size_recv__msg,
  output logic [0:0]    size_recv__rdy
);
  // Struct/Array ports of sub-components in the form of wires
  logic [63:0]   addr_data_mux__in_ [0:1];
  logic [0:0]    addr_en_mux__in_ [0:1];
  logic [31:0]   size_data_mux__in_ [0:1];
  logic [0:0]    size_en_mux__in_ [0:1];

  // Sub-component declarations
  logic [0:0]    addr_data_mux__clk;
  logic [63:0]   addr_data_mux__in___0;
  logic [63:0]   addr_data_mux__in___1;
  logic [63:0]   addr_data_mux__out;
  logic [0:0]    addr_data_mux__reset;
  logic [0:0]    addr_data_mux__sel;

  Mux__Type_Bits64__ninputs_2 addr_data_mux
  (
    .clk            (     addr_data_mux__clk    ),
    .in___0         (   addr_data_mux__in___0   ),
    .in___1         (   addr_data_mux__in___1   ),
    .out            (     addr_data_mux__out    ),
    .reset          (    addr_data_mux__reset   ),
    .sel            (     addr_data_mux__sel    )
  );

  logic [0:0]    addr_en_mux__clk;
  logic [0:0]    addr_en_mux__in___0;
  logic [0:0]    addr_en_mux__in___1;
  logic [0:0]    addr_en_mux__out;
  logic [0:0]    addr_en_mux__reset;
  logic [0:0]    addr_en_mux__sel;

  Mux__Type_Bits1__ninputs_2 addr_en_mux
  (
    .clk            (      addr_en_mux__clk     ),
    .in___0         (    addr_en_mux__in___0    ),
    .in___1         (    addr_en_mux__in___1    ),
    .out            (      addr_en_mux__out     ),
    .reset          (     addr_en_mux__reset    ),
    .sel            (      addr_en_mux__sel     )
  );

  logic [0:0]    addr_reg__clk;
  logic [0:0]    addr_reg__en;
  logic [63:0]   addr_reg__in_;
  logic [63:0]   addr_reg__out;
  logic [0:0]    addr_reg__reset;

  RegEnRst__Type_Bits64__reset_value_0 addr_reg
  (
    .clk            (       addr_reg__clk       ),
    .en             (        addr_reg__en       ),
    .in_            (       addr_reg__in_       ),
    .out            (       addr_reg__out       ),
    .reset          (      addr_reg__reset      )
  );

  logic [0:0]    size_data_mux__clk;
  logic [31:0]   size_data_mux__in___0;
  logic [31:0]   size_data_mux__in___1;
  logic [31:0]   size_data_mux__out;
  logic [0:0]    size_data_mux__reset;
  logic [0:0]    size_data_mux__sel;

  Mux__Type_Bits32__ninputs_2 size_data_mux
  (
    .clk            (     size_data_mux__clk    ),
    .in___0         (   size_data_mux__in___0   ),
    .in___1         (   size_data_mux__in___1   ),
    .out            (     size_data_mux__out    ),
    .reset          (    size_data_mux__reset   ),
    .sel            (     size_data_mux__sel    )
  );

  logic [0:0]    size_en_mux__clk;
  logic [0:0]    size_en_mux__in___0;
  logic [0:0]    size_en_mux__in___1;
  logic [0:0]    size_en_mux__out;
  logic [0:0]    size_en_mux__reset;
  logic [0:0]    size_en_mux__sel;

  Mux__Type_Bits1__ninputs_2 size_en_mux
  (
    .clk            (      size_en_mux__clk     ),
    .in___0         (    size_en_mux__in___0    ),
    .in___1         (    size_en_mux__in___1    ),
    .out            (      size_en_mux__out     ),
    .reset          (     size_en_mux__reset    ),
    .sel            (      size_en_mux__sel     )
  );

  logic [0:0]    size_reg__clk;
  logic [0:0]    size_reg__en;
  logic [31:0]   size_reg__in_;
  logic [31:0]   size_reg__out;
  logic [0:0]    size_reg__reset;

  RegEnRst__Type_Bits32__reset_value_0 size_reg
  (
    .clk            (       size_reg__clk       ),
    .en             (        size_reg__en       ),
    .in_            (       size_reg__in_       ),
    .out            (       size_reg__out       ),
    .reset          (      size_reg__reset      )
  );

  // Connect struct/array ports and their wire forms
  assign addr_data_mux__in___0 = addr_data_mux__in_[0];
  assign addr_data_mux__in___1 = addr_data_mux__in_[1];
  assign addr_en_mux__in___0 = addr_en_mux__in_[0];
  assign addr_en_mux__in___1 = addr_en_mux__in_[1];
  assign size_data_mux__in___0 = size_data_mux__in_[0];
  assign size_data_mux__in___1 = size_data_mux__in_[1];
  assign size_en_mux__in___0 = size_en_mux__in_[0];
  assign size_en_mux__in___1 = size_en_mux__in_[1];

  // Temporary wire definitions
  logic [143:0]  __tmpvar__comb_message;

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/utils/mem_oparator.py:46
  // @update
  // def comb():
  //     s.size_recv.rdy @= s.size_reg.out != 0
  //     s.addr_recv.rdy @= s.size_reg.out != 0
  // 
  //     # if the size is zero, listen to outsize sigal, else listen to my self
  //     s.size_en_mux.sel @= 0 if s.size_reg.out == 0 else 1
  //     s.size_data_mux.sel @=0 if s.size_reg.out == 0 else 1
  //     # build the request.
  //     message = req()
  // 
  //     s.mem_out.msg @= message
  //     s.size_data_mux.in_[1] @= s.size_data_mux.out - 1
  //     # addr will change every round
  //     s.addr_data_mux.in_[
  //         1]@=s.addr_reg.out + item_size  # addr offset
  // 
  //     if s.mem_out.rdy & (s.size_reg.out != 0):
  //         # send the request and deduce the size
  //         s.size_en_mux.in_[1] @= 1
  //         s.mem_out.en @=1
  //         s.addr_en_mux.in_[1]@=1
  // 
  //     else:
  //         s.size_en_mux.in_[1]@=0
  //         s.addr_en_mux.in_[1]@=0
  //         s.mem_out.en@=0
  
  always_comb begin : comb
    size_recv__rdy = size_reg__out != 32'd0;
    addr_recv__rdy = size_reg__out != 32'd0;
    size_en_mux__sel = ( size_reg__out == 32'd0 ) ? 1'd0 : 1'd1;
    size_data_mux__sel = ( size_reg__out == 32'd0 ) ? 1'd0 : 1'd1;
    __tmpvar__comb_message = 144'd0;
    mem_out__msg = __tmpvar__comb_message;
    size_data_mux__in_[1'd1] = size_data_mux__out - 32'd1;
    addr_data_mux__in_[1'd1] = addr_reg__out + 64'd64;
    if ( mem_out__rdy & ( size_reg__out != 32'd0 ) ) begin
      size_en_mux__in_[1'd1] = 1'd1;
      mem_out__en = 1'd1;
      addr_en_mux__in_[1'd1] = 1'd1;
    end
    else begin
      size_en_mux__in_[1'd1] = 1'd0;
      addr_en_mux__in_[1'd1] = 1'd0;
      mem_out__en = 1'd0;
    end
  end

  // Connections
  assign size_reg__clk = clk;
  assign size_reg__reset = reset;
  assign addr_reg__clk = clk;
  assign addr_reg__reset = reset;
  assign size_en_mux__clk = clk;
  assign size_en_mux__reset = reset;
  assign size_data_mux__clk = clk;
  assign size_data_mux__reset = reset;
  assign addr_en_mux__clk = clk;
  assign addr_en_mux__reset = reset;
  assign addr_data_mux__clk = clk;
  assign addr_data_mux__reset = reset;
  assign size_reg__en = size_en_mux__out;
  assign size_reg__in_ = size_data_mux__out;
  assign addr_reg__en = addr_en_mux__out;
  assign addr_reg__in_ = addr_data_mux__out;
  assign addr_en_mux__in_[0] = addr_recv__en;
  assign addr_data_mux__in_[0] = addr_recv__msg;
  assign size_en_mux__in_[0] = size_recv__en;
  assign size_data_mux__in_[0] = size_recv__msg;

endmodule


// PyMTL Component Watcher Definition
// At /home/sjq/git/pymtl_project/satacc/watcher/watcher.py
module Watcher__index_1
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  output logic [0:0]    cr_send__en,
  output logic [31:0]   cr_send__msg,
  input  logic [0:0]    cr_send__rdy,
  input  logic [0:0]    from_trail_recv__en,
  input  logic [31:0]   from_trail_recv__msg,
  output logic [0:0]    from_trail_recv__rdy,
  input  logic [0:0]    lit_to_size_addr_mem_recv__en,
  input  logic [113:0]  lit_to_size_addr_mem_recv__msg,
  output logic [0:0]    lit_to_size_addr_mem_recv__rdy,
  output logic [0:0]    lit_to_size_addr_mem_send__en,
  output logic [175:0]  lit_to_size_addr_mem_send__msg,
  input  logic [0:0]    lit_to_size_addr_mem_send__rdy,
  input  logic [0:0]    value_recv__en,
  input  logic [23:0]   value_recv__msg,
  output logic [0:0]    value_recv__rdy,
  output logic [0:0]    value_send__en,
  output logic [85:0]   value_send__msg,
  input  logic [0:0]    value_send__rdy,
  input  logic [0:0]    watcher_recv__en,
  input  logic [81:0]   watcher_recv__msg,
  output logic [0:0]    watcher_recv__rdy,
  output logic [0:0]    watcher_send_mem_send__en,
  output logic [143:0]  watcher_send_mem_send__msg,
  input  logic [0:0]    watcher_send_mem_send__rdy
);
  // Sub-component declarations
  logic [0:0]    cr_send_buffer__clk;
  logic [2:0]    cr_send_buffer__count;
  logic [0:0]    cr_send_buffer__reset;
  logic [0:0]    cr_send_buffer__deq__en;
  logic [0:0]    cr_send_buffer__deq__rdy;
  logic [31:0]   cr_send_buffer__deq__ret;
  logic [0:0]    cr_send_buffer__enq__en;
  logic [31:0]   cr_send_buffer__enq__msg;
  logic [0:0]    cr_send_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_4 cr_send_buffer
  (
    .clk            (    cr_send_buffer__clk    ),
    .count          (   cr_send_buffer__count   ),
    .reset          (   cr_send_buffer__reset   ),
    .deq__en        (  cr_send_buffer__deq__en  ),
    .deq__rdy       (  cr_send_buffer__deq__rdy ),
    .deq__ret       (  cr_send_buffer__deq__ret ),
    .enq__en        (  cr_send_buffer__enq__en  ),
    .enq__msg       (  cr_send_buffer__enq__msg ),
    .enq__rdy       (  cr_send_buffer__enq__rdy )
  );

  logic [0:0]    lit_recv_buffer__clk;
  logic [2:0]    lit_recv_buffer__count;
  logic [0:0]    lit_recv_buffer__reset;
  logic [0:0]    lit_recv_buffer__deq__en;
  logic [0:0]    lit_recv_buffer__deq__rdy;
  logic [31:0]   lit_recv_buffer__deq__ret;
  logic [0:0]    lit_recv_buffer__enq__en;
  logic [31:0]   lit_recv_buffer__enq__msg;
  logic [0:0]    lit_recv_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_4 lit_recv_buffer
  (
    .clk            (    lit_recv_buffer__clk   ),
    .count          (   lit_recv_buffer__count  ),
    .reset          (   lit_recv_buffer__reset  ),
    .deq__en        (  lit_recv_buffer__deq__en ),
    .deq__rdy       ( lit_recv_buffer__deq__rdy ),
    .deq__ret       ( lit_recv_buffer__deq__ret ),
    .enq__en        (  lit_recv_buffer__enq__en ),
    .enq__msg       ( lit_recv_buffer__enq__msg ),
    .enq__rdy       ( lit_recv_buffer__enq__rdy )
  );

  logic [0:0]    size_addr_buffer__clk;
  logic [3:0]    size_addr_buffer__count;
  logic [0:0]    size_addr_buffer__reset;
  logic [0:0]    size_addr_buffer__deq__en;
  logic [0:0]    size_addr_buffer__deq__rdy;
  logic [95:0]   size_addr_buffer__deq__ret;
  logic [0:0]    size_addr_buffer__enq__en;
  logic [95:0]   size_addr_buffer__enq__msg;
  logic [0:0]    size_addr_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits96__num_entries_8 size_addr_buffer
  (
    .clk            (   size_addr_buffer__clk   ),
    .count          (  size_addr_buffer__count  ),
    .reset          (  size_addr_buffer__reset  ),
    .deq__en        ( size_addr_buffer__deq__en ),
    .deq__rdy       ( size_addr_buffer__deq__rdy ),
    .deq__ret       ( size_addr_buffer__deq__ret ),
    .enq__en        ( size_addr_buffer__enq__en ),
    .enq__msg       ( size_addr_buffer__enq__msg ),
    .enq__rdy       ( size_addr_buffer__enq__rdy )
  );

  logic [0:0]    temp_cr_q__clk;
  logic [0:0]    temp_cr_q__count;
  logic [0:0]    temp_cr_q__reset;
  logic [0:0]    temp_cr_q__deq__en;
  logic [0:0]    temp_cr_q__deq__rdy;
  logic [31:0]   temp_cr_q__deq__ret;
  logic [0:0]    temp_cr_q__enq__en;
  logic [31:0]   temp_cr_q__enq__msg;
  logic [0:0]    temp_cr_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_cr_q
  (
    .clk            (       temp_cr_q__clk      ),
    .count          (      temp_cr_q__count     ),
    .reset          (      temp_cr_q__reset     ),
    .deq__en        (     temp_cr_q__deq__en    ),
    .deq__rdy       (    temp_cr_q__deq__rdy    ),
    .deq__ret       (    temp_cr_q__deq__ret    ),
    .enq__en        (     temp_cr_q__enq__en    ),
    .enq__msg       (    temp_cr_q__enq__msg    ),
    .enq__rdy       (    temp_cr_q__enq__rdy    )
  );

  logic [0:0]    temp_value_q__clk;
  logic [0:0]    temp_value_q__count;
  logic [0:0]    temp_value_q__reset;
  logic [0:0]    temp_value_q__deq__en;
  logic [0:0]    temp_value_q__deq__rdy;
  logic [7:0]    temp_value_q__deq__ret;
  logic [0:0]    temp_value_q__enq__en;
  logic [7:0]    temp_value_q__enq__msg;
  logic [0:0]    temp_value_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits8__num_entries_1 temp_value_q
  (
    .clk            (     temp_value_q__clk     ),
    .count          (    temp_value_q__count    ),
    .reset          (    temp_value_q__reset    ),
    .deq__en        (   temp_value_q__deq__en   ),
    .deq__rdy       (   temp_value_q__deq__rdy  ),
    .deq__ret       (   temp_value_q__deq__ret  ),
    .enq__en        (   temp_value_q__enq__en   ),
    .enq__msg       (   temp_value_q__enq__msg  ),
    .enq__rdy       (   temp_value_q__enq__rdy  )
  );

  logic [0:0]    value_buffer__clk;
  logic [3:0]    value_buffer__count;
  logic [0:0]    value_buffer__reset;
  logic [0:0]    value_buffer__deq__en;
  logic [0:0]    value_buffer__deq__rdy;
  logic [39:0]   value_buffer__deq__ret;
  logic [0:0]    value_buffer__enq__en;
  logic [39:0]   value_buffer__enq__msg;
  logic [0:0]    value_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits40__num_entries_8 value_buffer
  (
    .clk            (     value_buffer__clk     ),
    .count          (    value_buffer__count    ),
    .reset          (    value_buffer__reset    ),
    .deq__en        (   value_buffer__deq__en   ),
    .deq__rdy       (   value_buffer__deq__rdy  ),
    .deq__ret       (   value_buffer__deq__ret  ),
    .enq__en        (   value_buffer__enq__en   ),
    .enq__msg       (   value_buffer__enq__msg  ),
    .enq__rdy       (   value_buffer__enq__rdy  )
  );

  logic [0:0]    watcher_buffer__clk;
  logic [3:0]    watcher_buffer__count;
  logic [0:0]    watcher_buffer__reset;
  logic [0:0]    watcher_buffer__deq__en;
  logic [0:0]    watcher_buffer__deq__rdy;
  logic [63:0]   watcher_buffer__deq__ret;
  logic [0:0]    watcher_buffer__enq__en;
  logic [63:0]   watcher_buffer__enq__msg;
  logic [0:0]    watcher_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits64__num_entries_8 watcher_buffer
  (
    .clk            (    watcher_buffer__clk    ),
    .count          (   watcher_buffer__count   ),
    .reset          (   watcher_buffer__reset   ),
    .deq__en        (  watcher_buffer__deq__en  ),
    .deq__rdy       (  watcher_buffer__deq__rdy ),
    .deq__ret       (  watcher_buffer__deq__ret ),
    .enq__en        (  watcher_buffer__enq__en  ),
    .enq__msg       (  watcher_buffer__enq__msg ),
    .enq__rdy       (  watcher_buffer__enq__rdy )
  );

  logic [0:0]    watcher_fetch_unit__clk;
  logic [0:0]    watcher_fetch_unit__reset;
  logic [0:0]    watcher_fetch_unit__addr_recv__en;
  logic [63:0]   watcher_fetch_unit__addr_recv__msg;
  logic [0:0]    watcher_fetch_unit__addr_recv__rdy;
  logic [0:0]    watcher_fetch_unit__mem_out__en;
  logic [143:0]  watcher_fetch_unit__mem_out__msg;
  logic [0:0]    watcher_fetch_unit__mem_out__rdy;
  logic [0:0]    watcher_fetch_unit__size_recv__en;
  logic [31:0]   watcher_fetch_unit__size_recv__msg;
  logic [0:0]    watcher_fetch_unit__size_recv__rdy;

  Sized_memory_sender__cf46d990ac2ba893 watcher_fetch_unit
  (
    .clk            (  watcher_fetch_unit__clk  ),
    .reset          ( watcher_fetch_unit__reset ),
    .addr_recv__en  ( watcher_fetch_unit__addr_recv__en ),
    .addr_recv__msg ( watcher_fetch_unit__addr_recv__msg ),
    .addr_recv__rdy ( watcher_fetch_unit__addr_recv__rdy ),
    .mem_out__en    ( watcher_fetch_unit__mem_out__en ),
    .mem_out__msg   ( watcher_fetch_unit__mem_out__msg ),
    .mem_out__rdy   ( watcher_fetch_unit__mem_out__rdy ),
    .size_recv__en  ( watcher_fetch_unit__size_recv__en ),
    .size_recv__msg ( watcher_fetch_unit__size_recv__msg ),
    .size_recv__rdy ( watcher_fetch_unit__size_recv__rdy )
  );

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/watcher/watcher.py:50
  // @update
  // def comb():
  //     # send litral:
  //     s.temp_value_q.deq.en@=s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  //     s.temp_cr_q.deq.en@=s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  //     s.temp_cr_q.enq.msg@=s.watcher_buffer.deq.ret[32:64]
  //     s.temp_value_q.enq.en@=s.value_recv.en
  //     s.value_recv.rdy@=s.temp_value_q.enq.rdy
  //     s.temp_value_q.enq.msg@=s.value_recv.msg[24-8:24]
  // 
  //     s.watcher_buffer.enq.en@=s.watcher_recv.en
  //     s.watcher_recv.rdy@=s.watcher_buffer.enq.rdy
  //     s.watcher_buffer.enq.msg@=s.watcher_recv.msg[82-64:82]
  // 
  //     s.size_addr_buffer.enq.en@=s.lit_to_size_addr_mem_recv.en
  //     s.lit_to_size_addr_mem_recv.rdy @=s.size_addr_buffer.enq.rdy
  //     s.size_addr_buffer.enq.msg@=s.lit_to_size_addr_mem_recv.msg[114-96:114]
  // 
  //     s.size_addr_buffer.deq.en@=s.watcher_fetch_unit.size_recv.rdy & s.watcher_fetch_unit.addr_recv.rdy
  // 
  //     s.value_buffer.enq.msg@=concat(s.temp_value_q.deq.ret,
  //                                    s.temp_cr_q.deq.ret)
  //     s.value_buffer.enq.en@= s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  // 
  //     s.lit_to_size_addr_mem_send.en@=s.lit_to_size_addr_mem_send.rdy & s.lit_recv_buffer.deq.rdy
  //     s.lit_recv_buffer.deq.en@=s.lit_to_size_addr_mem_send.rdy & s.lit_recv_buffer.deq.rdy
  // 
  //     # TODO: set the message
  //     s.lit_to_size_addr_mem_send.msg@=concat(
  //         Bits12(0), Bits32(0), s.lit_recv_buffer.deq.ret, Bits100(0))
  // 
  //     s.watcher_fetch_unit.size_recv.en @=s.watcher_fetch_unit.size_recv.rdy & s.size_addr_buffer.deq.rdy
  //     s.watcher_fetch_unit.addr_recv.en @=s.watcher_fetch_unit.addr_recv.rdy & s.size_addr_buffer.deq.rdy
  //     s.watcher_fetch_unit.size_recv.msg@=s.size_addr_buffer.deq.ret[18:50]
  //     s.watcher_fetch_unit.addr_recv.msg@=s.size_addr_buffer.deq.ret[96-64:96]
  // 
  //     # send value request
  //     s.value_send.en@=s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  //     s.watcher_buffer.deq.en@=s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  //     s.temp_cr_q.enq.en@= s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  // 
  //     s.value_send.msg @= concat(Bits12(0), Bits32(0),
  //                                s.watcher_buffer.deq.ret[0:32], Bits10(0))
  // 
  //     s.temp_value_q.enq.en@= s.value_recv.en
  //     s.value_recv.rdy@=s.temp_value_q.enq.rdy
  //     s.temp_value_q.enq.msg@=s.value_recv.msg[16:24]
  // 
  //     s.value_buffer.deq.en@=((s.value_buffer.deq.ret[0:8] != 0) & s.value_buffer.deq.rdy &
  //                             s.cr_send_buffer.enq.rdy) | (s.value_buffer.deq.ret[0:8] == 0)
  //     s.cr_send_buffer.enq.en@= (
  //         s.value_buffer.deq.ret[0:8] != 0) & s.value_buffer.deq.rdy & s.cr_send_buffer.enq.rdy
  // 
  //     s.cr_send.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.deq.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.enq.msg@=s.value_buffer.deq.ret[8:40]
  // 
  //     s.cr_send.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.deq.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send.msg @=s.cr_send_buffer.deq.ret
  
  always_comb begin : comb
    temp_value_q__deq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    temp_cr_q__deq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    temp_cr_q__enq__msg = watcher_buffer__deq__ret[6'd63:6'd32];
    temp_value_q__enq__en = value_recv__en;
    value_recv__rdy = temp_value_q__enq__rdy;
    temp_value_q__enq__msg = value_recv__msg[5'd23:5'd24 - 5'd8];
    watcher_buffer__enq__en = watcher_recv__en;
    watcher_recv__rdy = watcher_buffer__enq__rdy;
    watcher_buffer__enq__msg = watcher_recv__msg[7'd81:7'd82 - 7'd64];
    size_addr_buffer__enq__en = lit_to_size_addr_mem_recv__en;
    lit_to_size_addr_mem_recv__rdy = size_addr_buffer__enq__rdy;
    size_addr_buffer__enq__msg = lit_to_size_addr_mem_recv__msg[7'd113:7'd114 - 7'd96];
    size_addr_buffer__deq__en = watcher_fetch_unit__size_recv__rdy & watcher_fetch_unit__addr_recv__rdy;
    value_buffer__enq__msg = { temp_value_q__deq__ret, temp_cr_q__deq__ret };
    value_buffer__enq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    lit_to_size_addr_mem_send__en = lit_to_size_addr_mem_send__rdy & lit_recv_buffer__deq__rdy;
    lit_recv_buffer__deq__en = lit_to_size_addr_mem_send__rdy & lit_recv_buffer__deq__rdy;
    lit_to_size_addr_mem_send__msg = { 12'd0, 32'd0, lit_recv_buffer__deq__ret, 100'd0 };
    watcher_fetch_unit__size_recv__en = watcher_fetch_unit__size_recv__rdy & size_addr_buffer__deq__rdy;
    watcher_fetch_unit__addr_recv__en = watcher_fetch_unit__addr_recv__rdy & size_addr_buffer__deq__rdy;
    watcher_fetch_unit__size_recv__msg = size_addr_buffer__deq__ret[7'd49:7'd18];
    watcher_fetch_unit__addr_recv__msg = size_addr_buffer__deq__ret[7'd95:7'd96 - 7'd64];
    value_send__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    watcher_buffer__deq__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    temp_cr_q__enq__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    value_send__msg = { 12'd0, 32'd0, watcher_buffer__deq__ret[6'd31:6'd0], 10'd0 };
    temp_value_q__enq__en = value_recv__en;
    value_recv__rdy = temp_value_q__enq__rdy;
    temp_value_q__enq__msg = value_recv__msg[5'd23:5'd16];
    value_buffer__deq__en = ( ( ( value_buffer__deq__ret[6'd7:6'd0] != 8'd0 ) & value_buffer__deq__rdy ) & cr_send_buffer__enq__rdy ) | ( value_buffer__deq__ret[6'd7:6'd0] == 8'd0 );
    cr_send_buffer__enq__en = ( ( value_buffer__deq__ret[6'd7:6'd0] != 8'd0 ) & value_buffer__deq__rdy ) & cr_send_buffer__enq__rdy;
    cr_send__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__deq__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__enq__msg = value_buffer__deq__ret[6'd39:6'd8];
    cr_send__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__deq__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send__msg = cr_send_buffer__deq__ret;
  end

  // Connections
  assign lit_recv_buffer__clk = clk;
  assign lit_recv_buffer__reset = reset;
  assign size_addr_buffer__clk = clk;
  assign size_addr_buffer__reset = reset;
  assign watcher_buffer__clk = clk;
  assign watcher_buffer__reset = reset;
  assign value_buffer__clk = clk;
  assign value_buffer__reset = reset;
  assign cr_send_buffer__clk = clk;
  assign cr_send_buffer__reset = reset;
  assign temp_cr_q__clk = clk;
  assign temp_cr_q__reset = reset;
  assign temp_value_q__clk = clk;
  assign temp_value_q__reset = reset;
  assign watcher_fetch_unit__clk = clk;
  assign watcher_fetch_unit__reset = reset;
  assign lit_recv_buffer__enq__en = from_trail_recv__en;
  assign lit_recv_buffer__enq__msg = from_trail_recv__msg;
  assign from_trail_recv__rdy = lit_recv_buffer__enq__rdy;
  assign watcher_send_mem_send__en = watcher_fetch_unit__mem_out__en;
  assign watcher_send_mem_send__msg = watcher_fetch_unit__mem_out__msg;
  assign watcher_fetch_unit__mem_out__rdy = watcher_send_mem_send__rdy;

endmodule


// PyMTL Component Sized_memory_sender Definition
// Full name: Sized_memory_sender__size_type_Bits32__addr_type_Bits64__item_size_64__mem_request_dest_17
// At /home/sjq/git/pymtl_project/satacc/utils/mem_oparator.py
module Sized_memory_sender__f972c05f20f528cf
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  input  logic [0:0]    addr_recv__en,
  input  logic [63:0]   addr_recv__msg,
  output logic [0:0]    addr_recv__rdy,
  output logic [0:0]    mem_out__en,
  output logic [143:0]  mem_out__msg,
  input  logic [0:0]    mem_out__rdy,
  input  logic [0:0]    size_recv__en,
  input  logic [31:0]   size_recv__msg,
  output logic [0:0]    size_recv__rdy
);
  // Struct/Array ports of sub-components in the form of wires
  logic [63:0]   addr_data_mux__in_ [0:1];
  logic [0:0]    addr_en_mux__in_ [0:1];
  logic [31:0]   size_data_mux__in_ [0:1];
  logic [0:0]    size_en_mux__in_ [0:1];

  // Sub-component declarations
  logic [0:0]    addr_data_mux__clk;
  logic [63:0]   addr_data_mux__in___0;
  logic [63:0]   addr_data_mux__in___1;
  logic [63:0]   addr_data_mux__out;
  logic [0:0]    addr_data_mux__reset;
  logic [0:0]    addr_data_mux__sel;

  Mux__Type_Bits64__ninputs_2 addr_data_mux
  (
    .clk            (     addr_data_mux__clk    ),
    .in___0         (   addr_data_mux__in___0   ),
    .in___1         (   addr_data_mux__in___1   ),
    .out            (     addr_data_mux__out    ),
    .reset          (    addr_data_mux__reset   ),
    .sel            (     addr_data_mux__sel    )
  );

  logic [0:0]    addr_en_mux__clk;
  logic [0:0]    addr_en_mux__in___0;
  logic [0:0]    addr_en_mux__in___1;
  logic [0:0]    addr_en_mux__out;
  logic [0:0]    addr_en_mux__reset;
  logic [0:0]    addr_en_mux__sel;

  Mux__Type_Bits1__ninputs_2 addr_en_mux
  (
    .clk            (      addr_en_mux__clk     ),
    .in___0         (    addr_en_mux__in___0    ),
    .in___1         (    addr_en_mux__in___1    ),
    .out            (      addr_en_mux__out     ),
    .reset          (     addr_en_mux__reset    ),
    .sel            (      addr_en_mux__sel     )
  );

  logic [0:0]    addr_reg__clk;
  logic [0:0]    addr_reg__en;
  logic [63:0]   addr_reg__in_;
  logic [63:0]   addr_reg__out;
  logic [0:0]    addr_reg__reset;

  RegEnRst__Type_Bits64__reset_value_0 addr_reg
  (
    .clk            (       addr_reg__clk       ),
    .en             (        addr_reg__en       ),
    .in_            (       addr_reg__in_       ),
    .out            (       addr_reg__out       ),
    .reset          (      addr_reg__reset      )
  );

  logic [0:0]    size_data_mux__clk;
  logic [31:0]   size_data_mux__in___0;
  logic [31:0]   size_data_mux__in___1;
  logic [31:0]   size_data_mux__out;
  logic [0:0]    size_data_mux__reset;
  logic [0:0]    size_data_mux__sel;

  Mux__Type_Bits32__ninputs_2 size_data_mux
  (
    .clk            (     size_data_mux__clk    ),
    .in___0         (   size_data_mux__in___0   ),
    .in___1         (   size_data_mux__in___1   ),
    .out            (     size_data_mux__out    ),
    .reset          (    size_data_mux__reset   ),
    .sel            (     size_data_mux__sel    )
  );

  logic [0:0]    size_en_mux__clk;
  logic [0:0]    size_en_mux__in___0;
  logic [0:0]    size_en_mux__in___1;
  logic [0:0]    size_en_mux__out;
  logic [0:0]    size_en_mux__reset;
  logic [0:0]    size_en_mux__sel;

  Mux__Type_Bits1__ninputs_2 size_en_mux
  (
    .clk            (      size_en_mux__clk     ),
    .in___0         (    size_en_mux__in___0    ),
    .in___1         (    size_en_mux__in___1    ),
    .out            (      size_en_mux__out     ),
    .reset          (     size_en_mux__reset    ),
    .sel            (      size_en_mux__sel     )
  );

  logic [0:0]    size_reg__clk;
  logic [0:0]    size_reg__en;
  logic [31:0]   size_reg__in_;
  logic [31:0]   size_reg__out;
  logic [0:0]    size_reg__reset;

  RegEnRst__Type_Bits32__reset_value_0 size_reg
  (
    .clk            (       size_reg__clk       ),
    .en             (        size_reg__en       ),
    .in_            (       size_reg__in_       ),
    .out            (       size_reg__out       ),
    .reset          (      size_reg__reset      )
  );

  // Connect struct/array ports and their wire forms
  assign addr_data_mux__in___0 = addr_data_mux__in_[0];
  assign addr_data_mux__in___1 = addr_data_mux__in_[1];
  assign addr_en_mux__in___0 = addr_en_mux__in_[0];
  assign addr_en_mux__in___1 = addr_en_mux__in_[1];
  assign size_data_mux__in___0 = size_data_mux__in_[0];
  assign size_data_mux__in___1 = size_data_mux__in_[1];
  assign size_en_mux__in___0 = size_en_mux__in_[0];
  assign size_en_mux__in___1 = size_en_mux__in_[1];

  // Temporary wire definitions
  logic [143:0]  __tmpvar__comb_message;

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/utils/mem_oparator.py:46
  // @update
  // def comb():
  //     s.size_recv.rdy @= s.size_reg.out != 0
  //     s.addr_recv.rdy @= s.size_reg.out != 0
  // 
  //     # if the size is zero, listen to outsize sigal, else listen to my self
  //     s.size_en_mux.sel @= 0 if s.size_reg.out == 0 else 1
  //     s.size_data_mux.sel @=0 if s.size_reg.out == 0 else 1
  //     # build the request.
  //     message = req()
  // 
  //     s.mem_out.msg @= message
  //     s.size_data_mux.in_[1] @= s.size_data_mux.out - 1
  //     # addr will change every round
  //     s.addr_data_mux.in_[
  //         1]@=s.addr_reg.out + item_size  # addr offset
  // 
  //     if s.mem_out.rdy & (s.size_reg.out != 0):
  //         # send the request and deduce the size
  //         s.size_en_mux.in_[1] @= 1
  //         s.mem_out.en @=1
  //         s.addr_en_mux.in_[1]@=1
  // 
  //     else:
  //         s.size_en_mux.in_[1]@=0
  //         s.addr_en_mux.in_[1]@=0
  //         s.mem_out.en@=0
  
  always_comb begin : comb
    size_recv__rdy = size_reg__out != 32'd0;
    addr_recv__rdy = size_reg__out != 32'd0;
    size_en_mux__sel = ( size_reg__out == 32'd0 ) ? 1'd0 : 1'd1;
    size_data_mux__sel = ( size_reg__out == 32'd0 ) ? 1'd0 : 1'd1;
    __tmpvar__comb_message = 144'd0;
    mem_out__msg = __tmpvar__comb_message;
    size_data_mux__in_[1'd1] = size_data_mux__out - 32'd1;
    addr_data_mux__in_[1'd1] = addr_reg__out + 64'd64;
    if ( mem_out__rdy & ( size_reg__out != 32'd0 ) ) begin
      size_en_mux__in_[1'd1] = 1'd1;
      mem_out__en = 1'd1;
      addr_en_mux__in_[1'd1] = 1'd1;
    end
    else begin
      size_en_mux__in_[1'd1] = 1'd0;
      addr_en_mux__in_[1'd1] = 1'd0;
      mem_out__en = 1'd0;
    end
  end

  // Connections
  assign size_reg__clk = clk;
  assign size_reg__reset = reset;
  assign addr_reg__clk = clk;
  assign addr_reg__reset = reset;
  assign size_en_mux__clk = clk;
  assign size_en_mux__reset = reset;
  assign size_data_mux__clk = clk;
  assign size_data_mux__reset = reset;
  assign addr_en_mux__clk = clk;
  assign addr_en_mux__reset = reset;
  assign addr_data_mux__clk = clk;
  assign addr_data_mux__reset = reset;
  assign size_reg__en = size_en_mux__out;
  assign size_reg__in_ = size_data_mux__out;
  assign addr_reg__en = addr_en_mux__out;
  assign addr_reg__in_ = addr_data_mux__out;
  assign addr_en_mux__in_[0] = addr_recv__en;
  assign addr_data_mux__in_[0] = addr_recv__msg;
  assign size_en_mux__in_[0] = size_recv__en;
  assign size_data_mux__in_[0] = size_recv__msg;

endmodule


// PyMTL Component Watcher Definition
// At /home/sjq/git/pymtl_project/satacc/watcher/watcher.py
module Watcher__index_2
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  output logic [0:0]    cr_send__en,
  output logic [31:0]   cr_send__msg,
  input  logic [0:0]    cr_send__rdy,
  input  logic [0:0]    from_trail_recv__en,
  input  logic [31:0]   from_trail_recv__msg,
  output logic [0:0]    from_trail_recv__rdy,
  input  logic [0:0]    lit_to_size_addr_mem_recv__en,
  input  logic [113:0]  lit_to_size_addr_mem_recv__msg,
  output logic [0:0]    lit_to_size_addr_mem_recv__rdy,
  output logic [0:0]    lit_to_size_addr_mem_send__en,
  output logic [175:0]  lit_to_size_addr_mem_send__msg,
  input  logic [0:0]    lit_to_size_addr_mem_send__rdy,
  input  logic [0:0]    value_recv__en,
  input  logic [23:0]   value_recv__msg,
  output logic [0:0]    value_recv__rdy,
  output logic [0:0]    value_send__en,
  output logic [85:0]   value_send__msg,
  input  logic [0:0]    value_send__rdy,
  input  logic [0:0]    watcher_recv__en,
  input  logic [81:0]   watcher_recv__msg,
  output logic [0:0]    watcher_recv__rdy,
  output logic [0:0]    watcher_send_mem_send__en,
  output logic [143:0]  watcher_send_mem_send__msg,
  input  logic [0:0]    watcher_send_mem_send__rdy
);
  // Sub-component declarations
  logic [0:0]    cr_send_buffer__clk;
  logic [2:0]    cr_send_buffer__count;
  logic [0:0]    cr_send_buffer__reset;
  logic [0:0]    cr_send_buffer__deq__en;
  logic [0:0]    cr_send_buffer__deq__rdy;
  logic [31:0]   cr_send_buffer__deq__ret;
  logic [0:0]    cr_send_buffer__enq__en;
  logic [31:0]   cr_send_buffer__enq__msg;
  logic [0:0]    cr_send_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_4 cr_send_buffer
  (
    .clk            (    cr_send_buffer__clk    ),
    .count          (   cr_send_buffer__count   ),
    .reset          (   cr_send_buffer__reset   ),
    .deq__en        (  cr_send_buffer__deq__en  ),
    .deq__rdy       (  cr_send_buffer__deq__rdy ),
    .deq__ret       (  cr_send_buffer__deq__ret ),
    .enq__en        (  cr_send_buffer__enq__en  ),
    .enq__msg       (  cr_send_buffer__enq__msg ),
    .enq__rdy       (  cr_send_buffer__enq__rdy )
  );

  logic [0:0]    lit_recv_buffer__clk;
  logic [2:0]    lit_recv_buffer__count;
  logic [0:0]    lit_recv_buffer__reset;
  logic [0:0]    lit_recv_buffer__deq__en;
  logic [0:0]    lit_recv_buffer__deq__rdy;
  logic [31:0]   lit_recv_buffer__deq__ret;
  logic [0:0]    lit_recv_buffer__enq__en;
  logic [31:0]   lit_recv_buffer__enq__msg;
  logic [0:0]    lit_recv_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_4 lit_recv_buffer
  (
    .clk            (    lit_recv_buffer__clk   ),
    .count          (   lit_recv_buffer__count  ),
    .reset          (   lit_recv_buffer__reset  ),
    .deq__en        (  lit_recv_buffer__deq__en ),
    .deq__rdy       ( lit_recv_buffer__deq__rdy ),
    .deq__ret       ( lit_recv_buffer__deq__ret ),
    .enq__en        (  lit_recv_buffer__enq__en ),
    .enq__msg       ( lit_recv_buffer__enq__msg ),
    .enq__rdy       ( lit_recv_buffer__enq__rdy )
  );

  logic [0:0]    size_addr_buffer__clk;
  logic [3:0]    size_addr_buffer__count;
  logic [0:0]    size_addr_buffer__reset;
  logic [0:0]    size_addr_buffer__deq__en;
  logic [0:0]    size_addr_buffer__deq__rdy;
  logic [95:0]   size_addr_buffer__deq__ret;
  logic [0:0]    size_addr_buffer__enq__en;
  logic [95:0]   size_addr_buffer__enq__msg;
  logic [0:0]    size_addr_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits96__num_entries_8 size_addr_buffer
  (
    .clk            (   size_addr_buffer__clk   ),
    .count          (  size_addr_buffer__count  ),
    .reset          (  size_addr_buffer__reset  ),
    .deq__en        ( size_addr_buffer__deq__en ),
    .deq__rdy       ( size_addr_buffer__deq__rdy ),
    .deq__ret       ( size_addr_buffer__deq__ret ),
    .enq__en        ( size_addr_buffer__enq__en ),
    .enq__msg       ( size_addr_buffer__enq__msg ),
    .enq__rdy       ( size_addr_buffer__enq__rdy )
  );

  logic [0:0]    temp_cr_q__clk;
  logic [0:0]    temp_cr_q__count;
  logic [0:0]    temp_cr_q__reset;
  logic [0:0]    temp_cr_q__deq__en;
  logic [0:0]    temp_cr_q__deq__rdy;
  logic [31:0]   temp_cr_q__deq__ret;
  logic [0:0]    temp_cr_q__enq__en;
  logic [31:0]   temp_cr_q__enq__msg;
  logic [0:0]    temp_cr_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_cr_q
  (
    .clk            (       temp_cr_q__clk      ),
    .count          (      temp_cr_q__count     ),
    .reset          (      temp_cr_q__reset     ),
    .deq__en        (     temp_cr_q__deq__en    ),
    .deq__rdy       (    temp_cr_q__deq__rdy    ),
    .deq__ret       (    temp_cr_q__deq__ret    ),
    .enq__en        (     temp_cr_q__enq__en    ),
    .enq__msg       (    temp_cr_q__enq__msg    ),
    .enq__rdy       (    temp_cr_q__enq__rdy    )
  );

  logic [0:0]    temp_value_q__clk;
  logic [0:0]    temp_value_q__count;
  logic [0:0]    temp_value_q__reset;
  logic [0:0]    temp_value_q__deq__en;
  logic [0:0]    temp_value_q__deq__rdy;
  logic [7:0]    temp_value_q__deq__ret;
  logic [0:0]    temp_value_q__enq__en;
  logic [7:0]    temp_value_q__enq__msg;
  logic [0:0]    temp_value_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits8__num_entries_1 temp_value_q
  (
    .clk            (     temp_value_q__clk     ),
    .count          (    temp_value_q__count    ),
    .reset          (    temp_value_q__reset    ),
    .deq__en        (   temp_value_q__deq__en   ),
    .deq__rdy       (   temp_value_q__deq__rdy  ),
    .deq__ret       (   temp_value_q__deq__ret  ),
    .enq__en        (   temp_value_q__enq__en   ),
    .enq__msg       (   temp_value_q__enq__msg  ),
    .enq__rdy       (   temp_value_q__enq__rdy  )
  );

  logic [0:0]    value_buffer__clk;
  logic [3:0]    value_buffer__count;
  logic [0:0]    value_buffer__reset;
  logic [0:0]    value_buffer__deq__en;
  logic [0:0]    value_buffer__deq__rdy;
  logic [39:0]   value_buffer__deq__ret;
  logic [0:0]    value_buffer__enq__en;
  logic [39:0]   value_buffer__enq__msg;
  logic [0:0]    value_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits40__num_entries_8 value_buffer
  (
    .clk            (     value_buffer__clk     ),
    .count          (    value_buffer__count    ),
    .reset          (    value_buffer__reset    ),
    .deq__en        (   value_buffer__deq__en   ),
    .deq__rdy       (   value_buffer__deq__rdy  ),
    .deq__ret       (   value_buffer__deq__ret  ),
    .enq__en        (   value_buffer__enq__en   ),
    .enq__msg       (   value_buffer__enq__msg  ),
    .enq__rdy       (   value_buffer__enq__rdy  )
  );

  logic [0:0]    watcher_buffer__clk;
  logic [3:0]    watcher_buffer__count;
  logic [0:0]    watcher_buffer__reset;
  logic [0:0]    watcher_buffer__deq__en;
  logic [0:0]    watcher_buffer__deq__rdy;
  logic [63:0]   watcher_buffer__deq__ret;
  logic [0:0]    watcher_buffer__enq__en;
  logic [63:0]   watcher_buffer__enq__msg;
  logic [0:0]    watcher_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits64__num_entries_8 watcher_buffer
  (
    .clk            (    watcher_buffer__clk    ),
    .count          (   watcher_buffer__count   ),
    .reset          (   watcher_buffer__reset   ),
    .deq__en        (  watcher_buffer__deq__en  ),
    .deq__rdy       (  watcher_buffer__deq__rdy ),
    .deq__ret       (  watcher_buffer__deq__ret ),
    .enq__en        (  watcher_buffer__enq__en  ),
    .enq__msg       (  watcher_buffer__enq__msg ),
    .enq__rdy       (  watcher_buffer__enq__rdy )
  );

  logic [0:0]    watcher_fetch_unit__clk;
  logic [0:0]    watcher_fetch_unit__reset;
  logic [0:0]    watcher_fetch_unit__addr_recv__en;
  logic [63:0]   watcher_fetch_unit__addr_recv__msg;
  logic [0:0]    watcher_fetch_unit__addr_recv__rdy;
  logic [0:0]    watcher_fetch_unit__mem_out__en;
  logic [143:0]  watcher_fetch_unit__mem_out__msg;
  logic [0:0]    watcher_fetch_unit__mem_out__rdy;
  logic [0:0]    watcher_fetch_unit__size_recv__en;
  logic [31:0]   watcher_fetch_unit__size_recv__msg;
  logic [0:0]    watcher_fetch_unit__size_recv__rdy;

  Sized_memory_sender__f972c05f20f528cf watcher_fetch_unit
  (
    .clk            (  watcher_fetch_unit__clk  ),
    .reset          ( watcher_fetch_unit__reset ),
    .addr_recv__en  ( watcher_fetch_unit__addr_recv__en ),
    .addr_recv__msg ( watcher_fetch_unit__addr_recv__msg ),
    .addr_recv__rdy ( watcher_fetch_unit__addr_recv__rdy ),
    .mem_out__en    ( watcher_fetch_unit__mem_out__en ),
    .mem_out__msg   ( watcher_fetch_unit__mem_out__msg ),
    .mem_out__rdy   ( watcher_fetch_unit__mem_out__rdy ),
    .size_recv__en  ( watcher_fetch_unit__size_recv__en ),
    .size_recv__msg ( watcher_fetch_unit__size_recv__msg ),
    .size_recv__rdy ( watcher_fetch_unit__size_recv__rdy )
  );

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/watcher/watcher.py:50
  // @update
  // def comb():
  //     # send litral:
  //     s.temp_value_q.deq.en@=s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  //     s.temp_cr_q.deq.en@=s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  //     s.temp_cr_q.enq.msg@=s.watcher_buffer.deq.ret[32:64]
  //     s.temp_value_q.enq.en@=s.value_recv.en
  //     s.value_recv.rdy@=s.temp_value_q.enq.rdy
  //     s.temp_value_q.enq.msg@=s.value_recv.msg[24-8:24]
  // 
  //     s.watcher_buffer.enq.en@=s.watcher_recv.en
  //     s.watcher_recv.rdy@=s.watcher_buffer.enq.rdy
  //     s.watcher_buffer.enq.msg@=s.watcher_recv.msg[82-64:82]
  // 
  //     s.size_addr_buffer.enq.en@=s.lit_to_size_addr_mem_recv.en
  //     s.lit_to_size_addr_mem_recv.rdy @=s.size_addr_buffer.enq.rdy
  //     s.size_addr_buffer.enq.msg@=s.lit_to_size_addr_mem_recv.msg[114-96:114]
  // 
  //     s.size_addr_buffer.deq.en@=s.watcher_fetch_unit.size_recv.rdy & s.watcher_fetch_unit.addr_recv.rdy
  // 
  //     s.value_buffer.enq.msg@=concat(s.temp_value_q.deq.ret,
  //                                    s.temp_cr_q.deq.ret)
  //     s.value_buffer.enq.en@= s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  // 
  //     s.lit_to_size_addr_mem_send.en@=s.lit_to_size_addr_mem_send.rdy & s.lit_recv_buffer.deq.rdy
  //     s.lit_recv_buffer.deq.en@=s.lit_to_size_addr_mem_send.rdy & s.lit_recv_buffer.deq.rdy
  // 
  //     # TODO: set the message
  //     s.lit_to_size_addr_mem_send.msg@=concat(
  //         Bits12(0), Bits32(0), s.lit_recv_buffer.deq.ret, Bits100(0))
  // 
  //     s.watcher_fetch_unit.size_recv.en @=s.watcher_fetch_unit.size_recv.rdy & s.size_addr_buffer.deq.rdy
  //     s.watcher_fetch_unit.addr_recv.en @=s.watcher_fetch_unit.addr_recv.rdy & s.size_addr_buffer.deq.rdy
  //     s.watcher_fetch_unit.size_recv.msg@=s.size_addr_buffer.deq.ret[18:50]
  //     s.watcher_fetch_unit.addr_recv.msg@=s.size_addr_buffer.deq.ret[96-64:96]
  // 
  //     # send value request
  //     s.value_send.en@=s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  //     s.watcher_buffer.deq.en@=s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  //     s.temp_cr_q.enq.en@= s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  // 
  //     s.value_send.msg @= concat(Bits12(0), Bits32(0),
  //                                s.watcher_buffer.deq.ret[0:32], Bits10(0))
  // 
  //     s.temp_value_q.enq.en@= s.value_recv.en
  //     s.value_recv.rdy@=s.temp_value_q.enq.rdy
  //     s.temp_value_q.enq.msg@=s.value_recv.msg[16:24]
  // 
  //     s.value_buffer.deq.en@=((s.value_buffer.deq.ret[0:8] != 0) & s.value_buffer.deq.rdy &
  //                             s.cr_send_buffer.enq.rdy) | (s.value_buffer.deq.ret[0:8] == 0)
  //     s.cr_send_buffer.enq.en@= (
  //         s.value_buffer.deq.ret[0:8] != 0) & s.value_buffer.deq.rdy & s.cr_send_buffer.enq.rdy
  // 
  //     s.cr_send.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.deq.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.enq.msg@=s.value_buffer.deq.ret[8:40]
  // 
  //     s.cr_send.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.deq.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send.msg @=s.cr_send_buffer.deq.ret
  
  always_comb begin : comb
    temp_value_q__deq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    temp_cr_q__deq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    temp_cr_q__enq__msg = watcher_buffer__deq__ret[6'd63:6'd32];
    temp_value_q__enq__en = value_recv__en;
    value_recv__rdy = temp_value_q__enq__rdy;
    temp_value_q__enq__msg = value_recv__msg[5'd23:5'd24 - 5'd8];
    watcher_buffer__enq__en = watcher_recv__en;
    watcher_recv__rdy = watcher_buffer__enq__rdy;
    watcher_buffer__enq__msg = watcher_recv__msg[7'd81:7'd82 - 7'd64];
    size_addr_buffer__enq__en = lit_to_size_addr_mem_recv__en;
    lit_to_size_addr_mem_recv__rdy = size_addr_buffer__enq__rdy;
    size_addr_buffer__enq__msg = lit_to_size_addr_mem_recv__msg[7'd113:7'd114 - 7'd96];
    size_addr_buffer__deq__en = watcher_fetch_unit__size_recv__rdy & watcher_fetch_unit__addr_recv__rdy;
    value_buffer__enq__msg = { temp_value_q__deq__ret, temp_cr_q__deq__ret };
    value_buffer__enq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    lit_to_size_addr_mem_send__en = lit_to_size_addr_mem_send__rdy & lit_recv_buffer__deq__rdy;
    lit_recv_buffer__deq__en = lit_to_size_addr_mem_send__rdy & lit_recv_buffer__deq__rdy;
    lit_to_size_addr_mem_send__msg = { 12'd0, 32'd0, lit_recv_buffer__deq__ret, 100'd0 };
    watcher_fetch_unit__size_recv__en = watcher_fetch_unit__size_recv__rdy & size_addr_buffer__deq__rdy;
    watcher_fetch_unit__addr_recv__en = watcher_fetch_unit__addr_recv__rdy & size_addr_buffer__deq__rdy;
    watcher_fetch_unit__size_recv__msg = size_addr_buffer__deq__ret[7'd49:7'd18];
    watcher_fetch_unit__addr_recv__msg = size_addr_buffer__deq__ret[7'd95:7'd96 - 7'd64];
    value_send__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    watcher_buffer__deq__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    temp_cr_q__enq__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    value_send__msg = { 12'd0, 32'd0, watcher_buffer__deq__ret[6'd31:6'd0], 10'd0 };
    temp_value_q__enq__en = value_recv__en;
    value_recv__rdy = temp_value_q__enq__rdy;
    temp_value_q__enq__msg = value_recv__msg[5'd23:5'd16];
    value_buffer__deq__en = ( ( ( value_buffer__deq__ret[6'd7:6'd0] != 8'd0 ) & value_buffer__deq__rdy ) & cr_send_buffer__enq__rdy ) | ( value_buffer__deq__ret[6'd7:6'd0] == 8'd0 );
    cr_send_buffer__enq__en = ( ( value_buffer__deq__ret[6'd7:6'd0] != 8'd0 ) & value_buffer__deq__rdy ) & cr_send_buffer__enq__rdy;
    cr_send__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__deq__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__enq__msg = value_buffer__deq__ret[6'd39:6'd8];
    cr_send__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__deq__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send__msg = cr_send_buffer__deq__ret;
  end

  // Connections
  assign lit_recv_buffer__clk = clk;
  assign lit_recv_buffer__reset = reset;
  assign size_addr_buffer__clk = clk;
  assign size_addr_buffer__reset = reset;
  assign watcher_buffer__clk = clk;
  assign watcher_buffer__reset = reset;
  assign value_buffer__clk = clk;
  assign value_buffer__reset = reset;
  assign cr_send_buffer__clk = clk;
  assign cr_send_buffer__reset = reset;
  assign temp_cr_q__clk = clk;
  assign temp_cr_q__reset = reset;
  assign temp_value_q__clk = clk;
  assign temp_value_q__reset = reset;
  assign watcher_fetch_unit__clk = clk;
  assign watcher_fetch_unit__reset = reset;
  assign lit_recv_buffer__enq__en = from_trail_recv__en;
  assign lit_recv_buffer__enq__msg = from_trail_recv__msg;
  assign from_trail_recv__rdy = lit_recv_buffer__enq__rdy;
  assign watcher_send_mem_send__en = watcher_fetch_unit__mem_out__en;
  assign watcher_send_mem_send__msg = watcher_fetch_unit__mem_out__msg;
  assign watcher_fetch_unit__mem_out__rdy = watcher_send_mem_send__rdy;

endmodule


// PyMTL Component Sized_memory_sender Definition
// Full name: Sized_memory_sender__size_type_Bits32__addr_type_Bits64__item_size_64__mem_request_dest_25
// At /home/sjq/git/pymtl_project/satacc/utils/mem_oparator.py
module Sized_memory_sender__a4f126e10cd65a9f
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  input  logic [0:0]    addr_recv__en,
  input  logic [63:0]   addr_recv__msg,
  output logic [0:0]    addr_recv__rdy,
  output logic [0:0]    mem_out__en,
  output logic [143:0]  mem_out__msg,
  input  logic [0:0]    mem_out__rdy,
  input  logic [0:0]    size_recv__en,
  input  logic [31:0]   size_recv__msg,
  output logic [0:0]    size_recv__rdy
);
  // Struct/Array ports of sub-components in the form of wires
  logic [63:0]   addr_data_mux__in_ [0:1];
  logic [0:0]    addr_en_mux__in_ [0:1];
  logic [31:0]   size_data_mux__in_ [0:1];
  logic [0:0]    size_en_mux__in_ [0:1];

  // Sub-component declarations
  logic [0:0]    addr_data_mux__clk;
  logic [63:0]   addr_data_mux__in___0;
  logic [63:0]   addr_data_mux__in___1;
  logic [63:0]   addr_data_mux__out;
  logic [0:0]    addr_data_mux__reset;
  logic [0:0]    addr_data_mux__sel;

  Mux__Type_Bits64__ninputs_2 addr_data_mux
  (
    .clk            (     addr_data_mux__clk    ),
    .in___0         (   addr_data_mux__in___0   ),
    .in___1         (   addr_data_mux__in___1   ),
    .out            (     addr_data_mux__out    ),
    .reset          (    addr_data_mux__reset   ),
    .sel            (     addr_data_mux__sel    )
  );

  logic [0:0]    addr_en_mux__clk;
  logic [0:0]    addr_en_mux__in___0;
  logic [0:0]    addr_en_mux__in___1;
  logic [0:0]    addr_en_mux__out;
  logic [0:0]    addr_en_mux__reset;
  logic [0:0]    addr_en_mux__sel;

  Mux__Type_Bits1__ninputs_2 addr_en_mux
  (
    .clk            (      addr_en_mux__clk     ),
    .in___0         (    addr_en_mux__in___0    ),
    .in___1         (    addr_en_mux__in___1    ),
    .out            (      addr_en_mux__out     ),
    .reset          (     addr_en_mux__reset    ),
    .sel            (      addr_en_mux__sel     )
  );

  logic [0:0]    addr_reg__clk;
  logic [0:0]    addr_reg__en;
  logic [63:0]   addr_reg__in_;
  logic [63:0]   addr_reg__out;
  logic [0:0]    addr_reg__reset;

  RegEnRst__Type_Bits64__reset_value_0 addr_reg
  (
    .clk            (       addr_reg__clk       ),
    .en             (        addr_reg__en       ),
    .in_            (       addr_reg__in_       ),
    .out            (       addr_reg__out       ),
    .reset          (      addr_reg__reset      )
  );

  logic [0:0]    size_data_mux__clk;
  logic [31:0]   size_data_mux__in___0;
  logic [31:0]   size_data_mux__in___1;
  logic [31:0]   size_data_mux__out;
  logic [0:0]    size_data_mux__reset;
  logic [0:0]    size_data_mux__sel;

  Mux__Type_Bits32__ninputs_2 size_data_mux
  (
    .clk            (     size_data_mux__clk    ),
    .in___0         (   size_data_mux__in___0   ),
    .in___1         (   size_data_mux__in___1   ),
    .out            (     size_data_mux__out    ),
    .reset          (    size_data_mux__reset   ),
    .sel            (     size_data_mux__sel    )
  );

  logic [0:0]    size_en_mux__clk;
  logic [0:0]    size_en_mux__in___0;
  logic [0:0]    size_en_mux__in___1;
  logic [0:0]    size_en_mux__out;
  logic [0:0]    size_en_mux__reset;
  logic [0:0]    size_en_mux__sel;

  Mux__Type_Bits1__ninputs_2 size_en_mux
  (
    .clk            (      size_en_mux__clk     ),
    .in___0         (    size_en_mux__in___0    ),
    .in___1         (    size_en_mux__in___1    ),
    .out            (      size_en_mux__out     ),
    .reset          (     size_en_mux__reset    ),
    .sel            (      size_en_mux__sel     )
  );

  logic [0:0]    size_reg__clk;
  logic [0:0]    size_reg__en;
  logic [31:0]   size_reg__in_;
  logic [31:0]   size_reg__out;
  logic [0:0]    size_reg__reset;

  RegEnRst__Type_Bits32__reset_value_0 size_reg
  (
    .clk            (       size_reg__clk       ),
    .en             (        size_reg__en       ),
    .in_            (       size_reg__in_       ),
    .out            (       size_reg__out       ),
    .reset          (      size_reg__reset      )
  );

  // Connect struct/array ports and their wire forms
  assign addr_data_mux__in___0 = addr_data_mux__in_[0];
  assign addr_data_mux__in___1 = addr_data_mux__in_[1];
  assign addr_en_mux__in___0 = addr_en_mux__in_[0];
  assign addr_en_mux__in___1 = addr_en_mux__in_[1];
  assign size_data_mux__in___0 = size_data_mux__in_[0];
  assign size_data_mux__in___1 = size_data_mux__in_[1];
  assign size_en_mux__in___0 = size_en_mux__in_[0];
  assign size_en_mux__in___1 = size_en_mux__in_[1];

  // Temporary wire definitions
  logic [143:0]  __tmpvar__comb_message;

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/utils/mem_oparator.py:46
  // @update
  // def comb():
  //     s.size_recv.rdy @= s.size_reg.out != 0
  //     s.addr_recv.rdy @= s.size_reg.out != 0
  // 
  //     # if the size is zero, listen to outsize sigal, else listen to my self
  //     s.size_en_mux.sel @= 0 if s.size_reg.out == 0 else 1
  //     s.size_data_mux.sel @=0 if s.size_reg.out == 0 else 1
  //     # build the request.
  //     message = req()
  // 
  //     s.mem_out.msg @= message
  //     s.size_data_mux.in_[1] @= s.size_data_mux.out - 1
  //     # addr will change every round
  //     s.addr_data_mux.in_[
  //         1]@=s.addr_reg.out + item_size  # addr offset
  // 
  //     if s.mem_out.rdy & (s.size_reg.out != 0):
  //         # send the request and deduce the size
  //         s.size_en_mux.in_[1] @= 1
  //         s.mem_out.en @=1
  //         s.addr_en_mux.in_[1]@=1
  // 
  //     else:
  //         s.size_en_mux.in_[1]@=0
  //         s.addr_en_mux.in_[1]@=0
  //         s.mem_out.en@=0
  
  always_comb begin : comb
    size_recv__rdy = size_reg__out != 32'd0;
    addr_recv__rdy = size_reg__out != 32'd0;
    size_en_mux__sel = ( size_reg__out == 32'd0 ) ? 1'd0 : 1'd1;
    size_data_mux__sel = ( size_reg__out == 32'd0 ) ? 1'd0 : 1'd1;
    __tmpvar__comb_message = 144'd0;
    mem_out__msg = __tmpvar__comb_message;
    size_data_mux__in_[1'd1] = size_data_mux__out - 32'd1;
    addr_data_mux__in_[1'd1] = addr_reg__out + 64'd64;
    if ( mem_out__rdy & ( size_reg__out != 32'd0 ) ) begin
      size_en_mux__in_[1'd1] = 1'd1;
      mem_out__en = 1'd1;
      addr_en_mux__in_[1'd1] = 1'd1;
    end
    else begin
      size_en_mux__in_[1'd1] = 1'd0;
      addr_en_mux__in_[1'd1] = 1'd0;
      mem_out__en = 1'd0;
    end
  end

  // Connections
  assign size_reg__clk = clk;
  assign size_reg__reset = reset;
  assign addr_reg__clk = clk;
  assign addr_reg__reset = reset;
  assign size_en_mux__clk = clk;
  assign size_en_mux__reset = reset;
  assign size_data_mux__clk = clk;
  assign size_data_mux__reset = reset;
  assign addr_en_mux__clk = clk;
  assign addr_en_mux__reset = reset;
  assign addr_data_mux__clk = clk;
  assign addr_data_mux__reset = reset;
  assign size_reg__en = size_en_mux__out;
  assign size_reg__in_ = size_data_mux__out;
  assign addr_reg__en = addr_en_mux__out;
  assign addr_reg__in_ = addr_data_mux__out;
  assign addr_en_mux__in_[0] = addr_recv__en;
  assign addr_data_mux__in_[0] = addr_recv__msg;
  assign size_en_mux__in_[0] = size_recv__en;
  assign size_data_mux__in_[0] = size_recv__msg;

endmodule


// PyMTL Component Watcher Definition
// At /home/sjq/git/pymtl_project/satacc/watcher/watcher.py
module Watcher__index_3
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  output logic [0:0]    cr_send__en,
  output logic [31:0]   cr_send__msg,
  input  logic [0:0]    cr_send__rdy,
  input  logic [0:0]    from_trail_recv__en,
  input  logic [31:0]   from_trail_recv__msg,
  output logic [0:0]    from_trail_recv__rdy,
  input  logic [0:0]    lit_to_size_addr_mem_recv__en,
  input  logic [113:0]  lit_to_size_addr_mem_recv__msg,
  output logic [0:0]    lit_to_size_addr_mem_recv__rdy,
  output logic [0:0]    lit_to_size_addr_mem_send__en,
  output logic [175:0]  lit_to_size_addr_mem_send__msg,
  input  logic [0:0]    lit_to_size_addr_mem_send__rdy,
  input  logic [0:0]    value_recv__en,
  input  logic [23:0]   value_recv__msg,
  output logic [0:0]    value_recv__rdy,
  output logic [0:0]    value_send__en,
  output logic [85:0]   value_send__msg,
  input  logic [0:0]    value_send__rdy,
  input  logic [0:0]    watcher_recv__en,
  input  logic [81:0]   watcher_recv__msg,
  output logic [0:0]    watcher_recv__rdy,
  output logic [0:0]    watcher_send_mem_send__en,
  output logic [143:0]  watcher_send_mem_send__msg,
  input  logic [0:0]    watcher_send_mem_send__rdy
);
  // Sub-component declarations
  logic [0:0]    cr_send_buffer__clk;
  logic [2:0]    cr_send_buffer__count;
  logic [0:0]    cr_send_buffer__reset;
  logic [0:0]    cr_send_buffer__deq__en;
  logic [0:0]    cr_send_buffer__deq__rdy;
  logic [31:0]   cr_send_buffer__deq__ret;
  logic [0:0]    cr_send_buffer__enq__en;
  logic [31:0]   cr_send_buffer__enq__msg;
  logic [0:0]    cr_send_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_4 cr_send_buffer
  (
    .clk            (    cr_send_buffer__clk    ),
    .count          (   cr_send_buffer__count   ),
    .reset          (   cr_send_buffer__reset   ),
    .deq__en        (  cr_send_buffer__deq__en  ),
    .deq__rdy       (  cr_send_buffer__deq__rdy ),
    .deq__ret       (  cr_send_buffer__deq__ret ),
    .enq__en        (  cr_send_buffer__enq__en  ),
    .enq__msg       (  cr_send_buffer__enq__msg ),
    .enq__rdy       (  cr_send_buffer__enq__rdy )
  );

  logic [0:0]    lit_recv_buffer__clk;
  logic [2:0]    lit_recv_buffer__count;
  logic [0:0]    lit_recv_buffer__reset;
  logic [0:0]    lit_recv_buffer__deq__en;
  logic [0:0]    lit_recv_buffer__deq__rdy;
  logic [31:0]   lit_recv_buffer__deq__ret;
  logic [0:0]    lit_recv_buffer__enq__en;
  logic [31:0]   lit_recv_buffer__enq__msg;
  logic [0:0]    lit_recv_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_4 lit_recv_buffer
  (
    .clk            (    lit_recv_buffer__clk   ),
    .count          (   lit_recv_buffer__count  ),
    .reset          (   lit_recv_buffer__reset  ),
    .deq__en        (  lit_recv_buffer__deq__en ),
    .deq__rdy       ( lit_recv_buffer__deq__rdy ),
    .deq__ret       ( lit_recv_buffer__deq__ret ),
    .enq__en        (  lit_recv_buffer__enq__en ),
    .enq__msg       ( lit_recv_buffer__enq__msg ),
    .enq__rdy       ( lit_recv_buffer__enq__rdy )
  );

  logic [0:0]    size_addr_buffer__clk;
  logic [3:0]    size_addr_buffer__count;
  logic [0:0]    size_addr_buffer__reset;
  logic [0:0]    size_addr_buffer__deq__en;
  logic [0:0]    size_addr_buffer__deq__rdy;
  logic [95:0]   size_addr_buffer__deq__ret;
  logic [0:0]    size_addr_buffer__enq__en;
  logic [95:0]   size_addr_buffer__enq__msg;
  logic [0:0]    size_addr_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits96__num_entries_8 size_addr_buffer
  (
    .clk            (   size_addr_buffer__clk   ),
    .count          (  size_addr_buffer__count  ),
    .reset          (  size_addr_buffer__reset  ),
    .deq__en        ( size_addr_buffer__deq__en ),
    .deq__rdy       ( size_addr_buffer__deq__rdy ),
    .deq__ret       ( size_addr_buffer__deq__ret ),
    .enq__en        ( size_addr_buffer__enq__en ),
    .enq__msg       ( size_addr_buffer__enq__msg ),
    .enq__rdy       ( size_addr_buffer__enq__rdy )
  );

  logic [0:0]    temp_cr_q__clk;
  logic [0:0]    temp_cr_q__count;
  logic [0:0]    temp_cr_q__reset;
  logic [0:0]    temp_cr_q__deq__en;
  logic [0:0]    temp_cr_q__deq__rdy;
  logic [31:0]   temp_cr_q__deq__ret;
  logic [0:0]    temp_cr_q__enq__en;
  logic [31:0]   temp_cr_q__enq__msg;
  logic [0:0]    temp_cr_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_cr_q
  (
    .clk            (       temp_cr_q__clk      ),
    .count          (      temp_cr_q__count     ),
    .reset          (      temp_cr_q__reset     ),
    .deq__en        (     temp_cr_q__deq__en    ),
    .deq__rdy       (    temp_cr_q__deq__rdy    ),
    .deq__ret       (    temp_cr_q__deq__ret    ),
    .enq__en        (     temp_cr_q__enq__en    ),
    .enq__msg       (    temp_cr_q__enq__msg    ),
    .enq__rdy       (    temp_cr_q__enq__rdy    )
  );

  logic [0:0]    temp_value_q__clk;
  logic [0:0]    temp_value_q__count;
  logic [0:0]    temp_value_q__reset;
  logic [0:0]    temp_value_q__deq__en;
  logic [0:0]    temp_value_q__deq__rdy;
  logic [7:0]    temp_value_q__deq__ret;
  logic [0:0]    temp_value_q__enq__en;
  logic [7:0]    temp_value_q__enq__msg;
  logic [0:0]    temp_value_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits8__num_entries_1 temp_value_q
  (
    .clk            (     temp_value_q__clk     ),
    .count          (    temp_value_q__count    ),
    .reset          (    temp_value_q__reset    ),
    .deq__en        (   temp_value_q__deq__en   ),
    .deq__rdy       (   temp_value_q__deq__rdy  ),
    .deq__ret       (   temp_value_q__deq__ret  ),
    .enq__en        (   temp_value_q__enq__en   ),
    .enq__msg       (   temp_value_q__enq__msg  ),
    .enq__rdy       (   temp_value_q__enq__rdy  )
  );

  logic [0:0]    value_buffer__clk;
  logic [3:0]    value_buffer__count;
  logic [0:0]    value_buffer__reset;
  logic [0:0]    value_buffer__deq__en;
  logic [0:0]    value_buffer__deq__rdy;
  logic [39:0]   value_buffer__deq__ret;
  logic [0:0]    value_buffer__enq__en;
  logic [39:0]   value_buffer__enq__msg;
  logic [0:0]    value_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits40__num_entries_8 value_buffer
  (
    .clk            (     value_buffer__clk     ),
    .count          (    value_buffer__count    ),
    .reset          (    value_buffer__reset    ),
    .deq__en        (   value_buffer__deq__en   ),
    .deq__rdy       (   value_buffer__deq__rdy  ),
    .deq__ret       (   value_buffer__deq__ret  ),
    .enq__en        (   value_buffer__enq__en   ),
    .enq__msg       (   value_buffer__enq__msg  ),
    .enq__rdy       (   value_buffer__enq__rdy  )
  );

  logic [0:0]    watcher_buffer__clk;
  logic [3:0]    watcher_buffer__count;
  logic [0:0]    watcher_buffer__reset;
  logic [0:0]    watcher_buffer__deq__en;
  logic [0:0]    watcher_buffer__deq__rdy;
  logic [63:0]   watcher_buffer__deq__ret;
  logic [0:0]    watcher_buffer__enq__en;
  logic [63:0]   watcher_buffer__enq__msg;
  logic [0:0]    watcher_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits64__num_entries_8 watcher_buffer
  (
    .clk            (    watcher_buffer__clk    ),
    .count          (   watcher_buffer__count   ),
    .reset          (   watcher_buffer__reset   ),
    .deq__en        (  watcher_buffer__deq__en  ),
    .deq__rdy       (  watcher_buffer__deq__rdy ),
    .deq__ret       (  watcher_buffer__deq__ret ),
    .enq__en        (  watcher_buffer__enq__en  ),
    .enq__msg       (  watcher_buffer__enq__msg ),
    .enq__rdy       (  watcher_buffer__enq__rdy )
  );

  logic [0:0]    watcher_fetch_unit__clk;
  logic [0:0]    watcher_fetch_unit__reset;
  logic [0:0]    watcher_fetch_unit__addr_recv__en;
  logic [63:0]   watcher_fetch_unit__addr_recv__msg;
  logic [0:0]    watcher_fetch_unit__addr_recv__rdy;
  logic [0:0]    watcher_fetch_unit__mem_out__en;
  logic [143:0]  watcher_fetch_unit__mem_out__msg;
  logic [0:0]    watcher_fetch_unit__mem_out__rdy;
  logic [0:0]    watcher_fetch_unit__size_recv__en;
  logic [31:0]   watcher_fetch_unit__size_recv__msg;
  logic [0:0]    watcher_fetch_unit__size_recv__rdy;

  Sized_memory_sender__a4f126e10cd65a9f watcher_fetch_unit
  (
    .clk            (  watcher_fetch_unit__clk  ),
    .reset          ( watcher_fetch_unit__reset ),
    .addr_recv__en  ( watcher_fetch_unit__addr_recv__en ),
    .addr_recv__msg ( watcher_fetch_unit__addr_recv__msg ),
    .addr_recv__rdy ( watcher_fetch_unit__addr_recv__rdy ),
    .mem_out__en    ( watcher_fetch_unit__mem_out__en ),
    .mem_out__msg   ( watcher_fetch_unit__mem_out__msg ),
    .mem_out__rdy   ( watcher_fetch_unit__mem_out__rdy ),
    .size_recv__en  ( watcher_fetch_unit__size_recv__en ),
    .size_recv__msg ( watcher_fetch_unit__size_recv__msg ),
    .size_recv__rdy ( watcher_fetch_unit__size_recv__rdy )
  );

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/watcher/watcher.py:50
  // @update
  // def comb():
  //     # send litral:
  //     s.temp_value_q.deq.en@=s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  //     s.temp_cr_q.deq.en@=s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  //     s.temp_cr_q.enq.msg@=s.watcher_buffer.deq.ret[32:64]
  //     s.temp_value_q.enq.en@=s.value_recv.en
  //     s.value_recv.rdy@=s.temp_value_q.enq.rdy
  //     s.temp_value_q.enq.msg@=s.value_recv.msg[24-8:24]
  // 
  //     s.watcher_buffer.enq.en@=s.watcher_recv.en
  //     s.watcher_recv.rdy@=s.watcher_buffer.enq.rdy
  //     s.watcher_buffer.enq.msg@=s.watcher_recv.msg[82-64:82]
  // 
  //     s.size_addr_buffer.enq.en@=s.lit_to_size_addr_mem_recv.en
  //     s.lit_to_size_addr_mem_recv.rdy @=s.size_addr_buffer.enq.rdy
  //     s.size_addr_buffer.enq.msg@=s.lit_to_size_addr_mem_recv.msg[114-96:114]
  // 
  //     s.size_addr_buffer.deq.en@=s.watcher_fetch_unit.size_recv.rdy & s.watcher_fetch_unit.addr_recv.rdy
  // 
  //     s.value_buffer.enq.msg@=concat(s.temp_value_q.deq.ret,
  //                                    s.temp_cr_q.deq.ret)
  //     s.value_buffer.enq.en@= s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  // 
  //     s.lit_to_size_addr_mem_send.en@=s.lit_to_size_addr_mem_send.rdy & s.lit_recv_buffer.deq.rdy
  //     s.lit_recv_buffer.deq.en@=s.lit_to_size_addr_mem_send.rdy & s.lit_recv_buffer.deq.rdy
  // 
  //     # TODO: set the message
  //     s.lit_to_size_addr_mem_send.msg@=concat(
  //         Bits12(0), Bits32(0), s.lit_recv_buffer.deq.ret, Bits100(0))
  // 
  //     s.watcher_fetch_unit.size_recv.en @=s.watcher_fetch_unit.size_recv.rdy & s.size_addr_buffer.deq.rdy
  //     s.watcher_fetch_unit.addr_recv.en @=s.watcher_fetch_unit.addr_recv.rdy & s.size_addr_buffer.deq.rdy
  //     s.watcher_fetch_unit.size_recv.msg@=s.size_addr_buffer.deq.ret[18:50]
  //     s.watcher_fetch_unit.addr_recv.msg@=s.size_addr_buffer.deq.ret[96-64:96]
  // 
  //     # send value request
  //     s.value_send.en@=s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  //     s.watcher_buffer.deq.en@=s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  //     s.temp_cr_q.enq.en@= s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  // 
  //     s.value_send.msg @= concat(Bits12(0), Bits32(0),
  //                                s.watcher_buffer.deq.ret[0:32], Bits10(0))
  // 
  //     s.temp_value_q.enq.en@= s.value_recv.en
  //     s.value_recv.rdy@=s.temp_value_q.enq.rdy
  //     s.temp_value_q.enq.msg@=s.value_recv.msg[16:24]
  // 
  //     s.value_buffer.deq.en@=((s.value_buffer.deq.ret[0:8] != 0) & s.value_buffer.deq.rdy &
  //                             s.cr_send_buffer.enq.rdy) | (s.value_buffer.deq.ret[0:8] == 0)
  //     s.cr_send_buffer.enq.en@= (
  //         s.value_buffer.deq.ret[0:8] != 0) & s.value_buffer.deq.rdy & s.cr_send_buffer.enq.rdy
  // 
  //     s.cr_send.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.deq.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.enq.msg@=s.value_buffer.deq.ret[8:40]
  // 
  //     s.cr_send.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.deq.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send.msg @=s.cr_send_buffer.deq.ret
  
  always_comb begin : comb
    temp_value_q__deq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    temp_cr_q__deq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    temp_cr_q__enq__msg = watcher_buffer__deq__ret[6'd63:6'd32];
    temp_value_q__enq__en = value_recv__en;
    value_recv__rdy = temp_value_q__enq__rdy;
    temp_value_q__enq__msg = value_recv__msg[5'd23:5'd24 - 5'd8];
    watcher_buffer__enq__en = watcher_recv__en;
    watcher_recv__rdy = watcher_buffer__enq__rdy;
    watcher_buffer__enq__msg = watcher_recv__msg[7'd81:7'd82 - 7'd64];
    size_addr_buffer__enq__en = lit_to_size_addr_mem_recv__en;
    lit_to_size_addr_mem_recv__rdy = size_addr_buffer__enq__rdy;
    size_addr_buffer__enq__msg = lit_to_size_addr_mem_recv__msg[7'd113:7'd114 - 7'd96];
    size_addr_buffer__deq__en = watcher_fetch_unit__size_recv__rdy & watcher_fetch_unit__addr_recv__rdy;
    value_buffer__enq__msg = { temp_value_q__deq__ret, temp_cr_q__deq__ret };
    value_buffer__enq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    lit_to_size_addr_mem_send__en = lit_to_size_addr_mem_send__rdy & lit_recv_buffer__deq__rdy;
    lit_recv_buffer__deq__en = lit_to_size_addr_mem_send__rdy & lit_recv_buffer__deq__rdy;
    lit_to_size_addr_mem_send__msg = { 12'd0, 32'd0, lit_recv_buffer__deq__ret, 100'd0 };
    watcher_fetch_unit__size_recv__en = watcher_fetch_unit__size_recv__rdy & size_addr_buffer__deq__rdy;
    watcher_fetch_unit__addr_recv__en = watcher_fetch_unit__addr_recv__rdy & size_addr_buffer__deq__rdy;
    watcher_fetch_unit__size_recv__msg = size_addr_buffer__deq__ret[7'd49:7'd18];
    watcher_fetch_unit__addr_recv__msg = size_addr_buffer__deq__ret[7'd95:7'd96 - 7'd64];
    value_send__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    watcher_buffer__deq__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    temp_cr_q__enq__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    value_send__msg = { 12'd0, 32'd0, watcher_buffer__deq__ret[6'd31:6'd0], 10'd0 };
    temp_value_q__enq__en = value_recv__en;
    value_recv__rdy = temp_value_q__enq__rdy;
    temp_value_q__enq__msg = value_recv__msg[5'd23:5'd16];
    value_buffer__deq__en = ( ( ( value_buffer__deq__ret[6'd7:6'd0] != 8'd0 ) & value_buffer__deq__rdy ) & cr_send_buffer__enq__rdy ) | ( value_buffer__deq__ret[6'd7:6'd0] == 8'd0 );
    cr_send_buffer__enq__en = ( ( value_buffer__deq__ret[6'd7:6'd0] != 8'd0 ) & value_buffer__deq__rdy ) & cr_send_buffer__enq__rdy;
    cr_send__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__deq__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__enq__msg = value_buffer__deq__ret[6'd39:6'd8];
    cr_send__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__deq__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send__msg = cr_send_buffer__deq__ret;
  end

  // Connections
  assign lit_recv_buffer__clk = clk;
  assign lit_recv_buffer__reset = reset;
  assign size_addr_buffer__clk = clk;
  assign size_addr_buffer__reset = reset;
  assign watcher_buffer__clk = clk;
  assign watcher_buffer__reset = reset;
  assign value_buffer__clk = clk;
  assign value_buffer__reset = reset;
  assign cr_send_buffer__clk = clk;
  assign cr_send_buffer__reset = reset;
  assign temp_cr_q__clk = clk;
  assign temp_cr_q__reset = reset;
  assign temp_value_q__clk = clk;
  assign temp_value_q__reset = reset;
  assign watcher_fetch_unit__clk = clk;
  assign watcher_fetch_unit__reset = reset;
  assign lit_recv_buffer__enq__en = from_trail_recv__en;
  assign lit_recv_buffer__enq__msg = from_trail_recv__msg;
  assign from_trail_recv__rdy = lit_recv_buffer__enq__rdy;
  assign watcher_send_mem_send__en = watcher_fetch_unit__mem_out__en;
  assign watcher_send_mem_send__msg = watcher_fetch_unit__mem_out__msg;
  assign watcher_fetch_unit__mem_out__rdy = watcher_send_mem_send__rdy;

endmodule


// PyMTL Component Sized_memory_sender Definition
// Full name: Sized_memory_sender__size_type_Bits32__addr_type_Bits64__item_size_64__mem_request_dest_33
// At /home/sjq/git/pymtl_project/satacc/utils/mem_oparator.py
module Sized_memory_sender__7c63aaece1663046
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  input  logic [0:0]    addr_recv__en,
  input  logic [63:0]   addr_recv__msg,
  output logic [0:0]    addr_recv__rdy,
  output logic [0:0]    mem_out__en,
  output logic [143:0]  mem_out__msg,
  input  logic [0:0]    mem_out__rdy,
  input  logic [0:0]    size_recv__en,
  input  logic [31:0]   size_recv__msg,
  output logic [0:0]    size_recv__rdy
);
  // Struct/Array ports of sub-components in the form of wires
  logic [63:0]   addr_data_mux__in_ [0:1];
  logic [0:0]    addr_en_mux__in_ [0:1];
  logic [31:0]   size_data_mux__in_ [0:1];
  logic [0:0]    size_en_mux__in_ [0:1];

  // Sub-component declarations
  logic [0:0]    addr_data_mux__clk;
  logic [63:0]   addr_data_mux__in___0;
  logic [63:0]   addr_data_mux__in___1;
  logic [63:0]   addr_data_mux__out;
  logic [0:0]    addr_data_mux__reset;
  logic [0:0]    addr_data_mux__sel;

  Mux__Type_Bits64__ninputs_2 addr_data_mux
  (
    .clk            (     addr_data_mux__clk    ),
    .in___0         (   addr_data_mux__in___0   ),
    .in___1         (   addr_data_mux__in___1   ),
    .out            (     addr_data_mux__out    ),
    .reset          (    addr_data_mux__reset   ),
    .sel            (     addr_data_mux__sel    )
  );

  logic [0:0]    addr_en_mux__clk;
  logic [0:0]    addr_en_mux__in___0;
  logic [0:0]    addr_en_mux__in___1;
  logic [0:0]    addr_en_mux__out;
  logic [0:0]    addr_en_mux__reset;
  logic [0:0]    addr_en_mux__sel;

  Mux__Type_Bits1__ninputs_2 addr_en_mux
  (
    .clk            (      addr_en_mux__clk     ),
    .in___0         (    addr_en_mux__in___0    ),
    .in___1         (    addr_en_mux__in___1    ),
    .out            (      addr_en_mux__out     ),
    .reset          (     addr_en_mux__reset    ),
    .sel            (      addr_en_mux__sel     )
  );

  logic [0:0]    addr_reg__clk;
  logic [0:0]    addr_reg__en;
  logic [63:0]   addr_reg__in_;
  logic [63:0]   addr_reg__out;
  logic [0:0]    addr_reg__reset;

  RegEnRst__Type_Bits64__reset_value_0 addr_reg
  (
    .clk            (       addr_reg__clk       ),
    .en             (        addr_reg__en       ),
    .in_            (       addr_reg__in_       ),
    .out            (       addr_reg__out       ),
    .reset          (      addr_reg__reset      )
  );

  logic [0:0]    size_data_mux__clk;
  logic [31:0]   size_data_mux__in___0;
  logic [31:0]   size_data_mux__in___1;
  logic [31:0]   size_data_mux__out;
  logic [0:0]    size_data_mux__reset;
  logic [0:0]    size_data_mux__sel;

  Mux__Type_Bits32__ninputs_2 size_data_mux
  (
    .clk            (     size_data_mux__clk    ),
    .in___0         (   size_data_mux__in___0   ),
    .in___1         (   size_data_mux__in___1   ),
    .out            (     size_data_mux__out    ),
    .reset          (    size_data_mux__reset   ),
    .sel            (     size_data_mux__sel    )
  );

  logic [0:0]    size_en_mux__clk;
  logic [0:0]    size_en_mux__in___0;
  logic [0:0]    size_en_mux__in___1;
  logic [0:0]    size_en_mux__out;
  logic [0:0]    size_en_mux__reset;
  logic [0:0]    size_en_mux__sel;

  Mux__Type_Bits1__ninputs_2 size_en_mux
  (
    .clk            (      size_en_mux__clk     ),
    .in___0         (    size_en_mux__in___0    ),
    .in___1         (    size_en_mux__in___1    ),
    .out            (      size_en_mux__out     ),
    .reset          (     size_en_mux__reset    ),
    .sel            (      size_en_mux__sel     )
  );

  logic [0:0]    size_reg__clk;
  logic [0:0]    size_reg__en;
  logic [31:0]   size_reg__in_;
  logic [31:0]   size_reg__out;
  logic [0:0]    size_reg__reset;

  RegEnRst__Type_Bits32__reset_value_0 size_reg
  (
    .clk            (       size_reg__clk       ),
    .en             (        size_reg__en       ),
    .in_            (       size_reg__in_       ),
    .out            (       size_reg__out       ),
    .reset          (      size_reg__reset      )
  );

  // Connect struct/array ports and their wire forms
  assign addr_data_mux__in___0 = addr_data_mux__in_[0];
  assign addr_data_mux__in___1 = addr_data_mux__in_[1];
  assign addr_en_mux__in___0 = addr_en_mux__in_[0];
  assign addr_en_mux__in___1 = addr_en_mux__in_[1];
  assign size_data_mux__in___0 = size_data_mux__in_[0];
  assign size_data_mux__in___1 = size_data_mux__in_[1];
  assign size_en_mux__in___0 = size_en_mux__in_[0];
  assign size_en_mux__in___1 = size_en_mux__in_[1];

  // Temporary wire definitions
  logic [143:0]  __tmpvar__comb_message;

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/utils/mem_oparator.py:46
  // @update
  // def comb():
  //     s.size_recv.rdy @= s.size_reg.out != 0
  //     s.addr_recv.rdy @= s.size_reg.out != 0
  // 
  //     # if the size is zero, listen to outsize sigal, else listen to my self
  //     s.size_en_mux.sel @= 0 if s.size_reg.out == 0 else 1
  //     s.size_data_mux.sel @=0 if s.size_reg.out == 0 else 1
  //     # build the request.
  //     message = req()
  // 
  //     s.mem_out.msg @= message
  //     s.size_data_mux.in_[1] @= s.size_data_mux.out - 1
  //     # addr will change every round
  //     s.addr_data_mux.in_[
  //         1]@=s.addr_reg.out + item_size  # addr offset
  // 
  //     if s.mem_out.rdy & (s.size_reg.out != 0):
  //         # send the request and deduce the size
  //         s.size_en_mux.in_[1] @= 1
  //         s.mem_out.en @=1
  //         s.addr_en_mux.in_[1]@=1
  // 
  //     else:
  //         s.size_en_mux.in_[1]@=0
  //         s.addr_en_mux.in_[1]@=0
  //         s.mem_out.en@=0
  
  always_comb begin : comb
    size_recv__rdy = size_reg__out != 32'd0;
    addr_recv__rdy = size_reg__out != 32'd0;
    size_en_mux__sel = ( size_reg__out == 32'd0 ) ? 1'd0 : 1'd1;
    size_data_mux__sel = ( size_reg__out == 32'd0 ) ? 1'd0 : 1'd1;
    __tmpvar__comb_message = 144'd0;
    mem_out__msg = __tmpvar__comb_message;
    size_data_mux__in_[1'd1] = size_data_mux__out - 32'd1;
    addr_data_mux__in_[1'd1] = addr_reg__out + 64'd64;
    if ( mem_out__rdy & ( size_reg__out != 32'd0 ) ) begin
      size_en_mux__in_[1'd1] = 1'd1;
      mem_out__en = 1'd1;
      addr_en_mux__in_[1'd1] = 1'd1;
    end
    else begin
      size_en_mux__in_[1'd1] = 1'd0;
      addr_en_mux__in_[1'd1] = 1'd0;
      mem_out__en = 1'd0;
    end
  end

  // Connections
  assign size_reg__clk = clk;
  assign size_reg__reset = reset;
  assign addr_reg__clk = clk;
  assign addr_reg__reset = reset;
  assign size_en_mux__clk = clk;
  assign size_en_mux__reset = reset;
  assign size_data_mux__clk = clk;
  assign size_data_mux__reset = reset;
  assign addr_en_mux__clk = clk;
  assign addr_en_mux__reset = reset;
  assign addr_data_mux__clk = clk;
  assign addr_data_mux__reset = reset;
  assign size_reg__en = size_en_mux__out;
  assign size_reg__in_ = size_data_mux__out;
  assign addr_reg__en = addr_en_mux__out;
  assign addr_reg__in_ = addr_data_mux__out;
  assign addr_en_mux__in_[0] = addr_recv__en;
  assign addr_data_mux__in_[0] = addr_recv__msg;
  assign size_en_mux__in_[0] = size_recv__en;
  assign size_data_mux__in_[0] = size_recv__msg;

endmodule


// PyMTL Component Watcher Definition
// At /home/sjq/git/pymtl_project/satacc/watcher/watcher.py
module Watcher__index_4
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  output logic [0:0]    cr_send__en,
  output logic [31:0]   cr_send__msg,
  input  logic [0:0]    cr_send__rdy,
  input  logic [0:0]    from_trail_recv__en,
  input  logic [31:0]   from_trail_recv__msg,
  output logic [0:0]    from_trail_recv__rdy,
  input  logic [0:0]    lit_to_size_addr_mem_recv__en,
  input  logic [113:0]  lit_to_size_addr_mem_recv__msg,
  output logic [0:0]    lit_to_size_addr_mem_recv__rdy,
  output logic [0:0]    lit_to_size_addr_mem_send__en,
  output logic [175:0]  lit_to_size_addr_mem_send__msg,
  input  logic [0:0]    lit_to_size_addr_mem_send__rdy,
  input  logic [0:0]    value_recv__en,
  input  logic [23:0]   value_recv__msg,
  output logic [0:0]    value_recv__rdy,
  output logic [0:0]    value_send__en,
  output logic [85:0]   value_send__msg,
  input  logic [0:0]    value_send__rdy,
  input  logic [0:0]    watcher_recv__en,
  input  logic [81:0]   watcher_recv__msg,
  output logic [0:0]    watcher_recv__rdy,
  output logic [0:0]    watcher_send_mem_send__en,
  output logic [143:0]  watcher_send_mem_send__msg,
  input  logic [0:0]    watcher_send_mem_send__rdy
);
  // Sub-component declarations
  logic [0:0]    cr_send_buffer__clk;
  logic [2:0]    cr_send_buffer__count;
  logic [0:0]    cr_send_buffer__reset;
  logic [0:0]    cr_send_buffer__deq__en;
  logic [0:0]    cr_send_buffer__deq__rdy;
  logic [31:0]   cr_send_buffer__deq__ret;
  logic [0:0]    cr_send_buffer__enq__en;
  logic [31:0]   cr_send_buffer__enq__msg;
  logic [0:0]    cr_send_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_4 cr_send_buffer
  (
    .clk            (    cr_send_buffer__clk    ),
    .count          (   cr_send_buffer__count   ),
    .reset          (   cr_send_buffer__reset   ),
    .deq__en        (  cr_send_buffer__deq__en  ),
    .deq__rdy       (  cr_send_buffer__deq__rdy ),
    .deq__ret       (  cr_send_buffer__deq__ret ),
    .enq__en        (  cr_send_buffer__enq__en  ),
    .enq__msg       (  cr_send_buffer__enq__msg ),
    .enq__rdy       (  cr_send_buffer__enq__rdy )
  );

  logic [0:0]    lit_recv_buffer__clk;
  logic [2:0]    lit_recv_buffer__count;
  logic [0:0]    lit_recv_buffer__reset;
  logic [0:0]    lit_recv_buffer__deq__en;
  logic [0:0]    lit_recv_buffer__deq__rdy;
  logic [31:0]   lit_recv_buffer__deq__ret;
  logic [0:0]    lit_recv_buffer__enq__en;
  logic [31:0]   lit_recv_buffer__enq__msg;
  logic [0:0]    lit_recv_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_4 lit_recv_buffer
  (
    .clk            (    lit_recv_buffer__clk   ),
    .count          (   lit_recv_buffer__count  ),
    .reset          (   lit_recv_buffer__reset  ),
    .deq__en        (  lit_recv_buffer__deq__en ),
    .deq__rdy       ( lit_recv_buffer__deq__rdy ),
    .deq__ret       ( lit_recv_buffer__deq__ret ),
    .enq__en        (  lit_recv_buffer__enq__en ),
    .enq__msg       ( lit_recv_buffer__enq__msg ),
    .enq__rdy       ( lit_recv_buffer__enq__rdy )
  );

  logic [0:0]    size_addr_buffer__clk;
  logic [3:0]    size_addr_buffer__count;
  logic [0:0]    size_addr_buffer__reset;
  logic [0:0]    size_addr_buffer__deq__en;
  logic [0:0]    size_addr_buffer__deq__rdy;
  logic [95:0]   size_addr_buffer__deq__ret;
  logic [0:0]    size_addr_buffer__enq__en;
  logic [95:0]   size_addr_buffer__enq__msg;
  logic [0:0]    size_addr_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits96__num_entries_8 size_addr_buffer
  (
    .clk            (   size_addr_buffer__clk   ),
    .count          (  size_addr_buffer__count  ),
    .reset          (  size_addr_buffer__reset  ),
    .deq__en        ( size_addr_buffer__deq__en ),
    .deq__rdy       ( size_addr_buffer__deq__rdy ),
    .deq__ret       ( size_addr_buffer__deq__ret ),
    .enq__en        ( size_addr_buffer__enq__en ),
    .enq__msg       ( size_addr_buffer__enq__msg ),
    .enq__rdy       ( size_addr_buffer__enq__rdy )
  );

  logic [0:0]    temp_cr_q__clk;
  logic [0:0]    temp_cr_q__count;
  logic [0:0]    temp_cr_q__reset;
  logic [0:0]    temp_cr_q__deq__en;
  logic [0:0]    temp_cr_q__deq__rdy;
  logic [31:0]   temp_cr_q__deq__ret;
  logic [0:0]    temp_cr_q__enq__en;
  logic [31:0]   temp_cr_q__enq__msg;
  logic [0:0]    temp_cr_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_cr_q
  (
    .clk            (       temp_cr_q__clk      ),
    .count          (      temp_cr_q__count     ),
    .reset          (      temp_cr_q__reset     ),
    .deq__en        (     temp_cr_q__deq__en    ),
    .deq__rdy       (    temp_cr_q__deq__rdy    ),
    .deq__ret       (    temp_cr_q__deq__ret    ),
    .enq__en        (     temp_cr_q__enq__en    ),
    .enq__msg       (    temp_cr_q__enq__msg    ),
    .enq__rdy       (    temp_cr_q__enq__rdy    )
  );

  logic [0:0]    temp_value_q__clk;
  logic [0:0]    temp_value_q__count;
  logic [0:0]    temp_value_q__reset;
  logic [0:0]    temp_value_q__deq__en;
  logic [0:0]    temp_value_q__deq__rdy;
  logic [7:0]    temp_value_q__deq__ret;
  logic [0:0]    temp_value_q__enq__en;
  logic [7:0]    temp_value_q__enq__msg;
  logic [0:0]    temp_value_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits8__num_entries_1 temp_value_q
  (
    .clk            (     temp_value_q__clk     ),
    .count          (    temp_value_q__count    ),
    .reset          (    temp_value_q__reset    ),
    .deq__en        (   temp_value_q__deq__en   ),
    .deq__rdy       (   temp_value_q__deq__rdy  ),
    .deq__ret       (   temp_value_q__deq__ret  ),
    .enq__en        (   temp_value_q__enq__en   ),
    .enq__msg       (   temp_value_q__enq__msg  ),
    .enq__rdy       (   temp_value_q__enq__rdy  )
  );

  logic [0:0]    value_buffer__clk;
  logic [3:0]    value_buffer__count;
  logic [0:0]    value_buffer__reset;
  logic [0:0]    value_buffer__deq__en;
  logic [0:0]    value_buffer__deq__rdy;
  logic [39:0]   value_buffer__deq__ret;
  logic [0:0]    value_buffer__enq__en;
  logic [39:0]   value_buffer__enq__msg;
  logic [0:0]    value_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits40__num_entries_8 value_buffer
  (
    .clk            (     value_buffer__clk     ),
    .count          (    value_buffer__count    ),
    .reset          (    value_buffer__reset    ),
    .deq__en        (   value_buffer__deq__en   ),
    .deq__rdy       (   value_buffer__deq__rdy  ),
    .deq__ret       (   value_buffer__deq__ret  ),
    .enq__en        (   value_buffer__enq__en   ),
    .enq__msg       (   value_buffer__enq__msg  ),
    .enq__rdy       (   value_buffer__enq__rdy  )
  );

  logic [0:0]    watcher_buffer__clk;
  logic [3:0]    watcher_buffer__count;
  logic [0:0]    watcher_buffer__reset;
  logic [0:0]    watcher_buffer__deq__en;
  logic [0:0]    watcher_buffer__deq__rdy;
  logic [63:0]   watcher_buffer__deq__ret;
  logic [0:0]    watcher_buffer__enq__en;
  logic [63:0]   watcher_buffer__enq__msg;
  logic [0:0]    watcher_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits64__num_entries_8 watcher_buffer
  (
    .clk            (    watcher_buffer__clk    ),
    .count          (   watcher_buffer__count   ),
    .reset          (   watcher_buffer__reset   ),
    .deq__en        (  watcher_buffer__deq__en  ),
    .deq__rdy       (  watcher_buffer__deq__rdy ),
    .deq__ret       (  watcher_buffer__deq__ret ),
    .enq__en        (  watcher_buffer__enq__en  ),
    .enq__msg       (  watcher_buffer__enq__msg ),
    .enq__rdy       (  watcher_buffer__enq__rdy )
  );

  logic [0:0]    watcher_fetch_unit__clk;
  logic [0:0]    watcher_fetch_unit__reset;
  logic [0:0]    watcher_fetch_unit__addr_recv__en;
  logic [63:0]   watcher_fetch_unit__addr_recv__msg;
  logic [0:0]    watcher_fetch_unit__addr_recv__rdy;
  logic [0:0]    watcher_fetch_unit__mem_out__en;
  logic [143:0]  watcher_fetch_unit__mem_out__msg;
  logic [0:0]    watcher_fetch_unit__mem_out__rdy;
  logic [0:0]    watcher_fetch_unit__size_recv__en;
  logic [31:0]   watcher_fetch_unit__size_recv__msg;
  logic [0:0]    watcher_fetch_unit__size_recv__rdy;

  Sized_memory_sender__7c63aaece1663046 watcher_fetch_unit
  (
    .clk            (  watcher_fetch_unit__clk  ),
    .reset          ( watcher_fetch_unit__reset ),
    .addr_recv__en  ( watcher_fetch_unit__addr_recv__en ),
    .addr_recv__msg ( watcher_fetch_unit__addr_recv__msg ),
    .addr_recv__rdy ( watcher_fetch_unit__addr_recv__rdy ),
    .mem_out__en    ( watcher_fetch_unit__mem_out__en ),
    .mem_out__msg   ( watcher_fetch_unit__mem_out__msg ),
    .mem_out__rdy   ( watcher_fetch_unit__mem_out__rdy ),
    .size_recv__en  ( watcher_fetch_unit__size_recv__en ),
    .size_recv__msg ( watcher_fetch_unit__size_recv__msg ),
    .size_recv__rdy ( watcher_fetch_unit__size_recv__rdy )
  );

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/watcher/watcher.py:50
  // @update
  // def comb():
  //     # send litral:
  //     s.temp_value_q.deq.en@=s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  //     s.temp_cr_q.deq.en@=s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  //     s.temp_cr_q.enq.msg@=s.watcher_buffer.deq.ret[32:64]
  //     s.temp_value_q.enq.en@=s.value_recv.en
  //     s.value_recv.rdy@=s.temp_value_q.enq.rdy
  //     s.temp_value_q.enq.msg@=s.value_recv.msg[24-8:24]
  // 
  //     s.watcher_buffer.enq.en@=s.watcher_recv.en
  //     s.watcher_recv.rdy@=s.watcher_buffer.enq.rdy
  //     s.watcher_buffer.enq.msg@=s.watcher_recv.msg[82-64:82]
  // 
  //     s.size_addr_buffer.enq.en@=s.lit_to_size_addr_mem_recv.en
  //     s.lit_to_size_addr_mem_recv.rdy @=s.size_addr_buffer.enq.rdy
  //     s.size_addr_buffer.enq.msg@=s.lit_to_size_addr_mem_recv.msg[114-96:114]
  // 
  //     s.size_addr_buffer.deq.en@=s.watcher_fetch_unit.size_recv.rdy & s.watcher_fetch_unit.addr_recv.rdy
  // 
  //     s.value_buffer.enq.msg@=concat(s.temp_value_q.deq.ret,
  //                                    s.temp_cr_q.deq.ret)
  //     s.value_buffer.enq.en@= s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  // 
  //     s.lit_to_size_addr_mem_send.en@=s.lit_to_size_addr_mem_send.rdy & s.lit_recv_buffer.deq.rdy
  //     s.lit_recv_buffer.deq.en@=s.lit_to_size_addr_mem_send.rdy & s.lit_recv_buffer.deq.rdy
  // 
  //     # TODO: set the message
  //     s.lit_to_size_addr_mem_send.msg@=concat(
  //         Bits12(0), Bits32(0), s.lit_recv_buffer.deq.ret, Bits100(0))
  // 
  //     s.watcher_fetch_unit.size_recv.en @=s.watcher_fetch_unit.size_recv.rdy & s.size_addr_buffer.deq.rdy
  //     s.watcher_fetch_unit.addr_recv.en @=s.watcher_fetch_unit.addr_recv.rdy & s.size_addr_buffer.deq.rdy
  //     s.watcher_fetch_unit.size_recv.msg@=s.size_addr_buffer.deq.ret[18:50]
  //     s.watcher_fetch_unit.addr_recv.msg@=s.size_addr_buffer.deq.ret[96-64:96]
  // 
  //     # send value request
  //     s.value_send.en@=s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  //     s.watcher_buffer.deq.en@=s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  //     s.temp_cr_q.enq.en@= s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  // 
  //     s.value_send.msg @= concat(Bits12(0), Bits32(0),
  //                                s.watcher_buffer.deq.ret[0:32], Bits10(0))
  // 
  //     s.temp_value_q.enq.en@= s.value_recv.en
  //     s.value_recv.rdy@=s.temp_value_q.enq.rdy
  //     s.temp_value_q.enq.msg@=s.value_recv.msg[16:24]
  // 
  //     s.value_buffer.deq.en@=((s.value_buffer.deq.ret[0:8] != 0) & s.value_buffer.deq.rdy &
  //                             s.cr_send_buffer.enq.rdy) | (s.value_buffer.deq.ret[0:8] == 0)
  //     s.cr_send_buffer.enq.en@= (
  //         s.value_buffer.deq.ret[0:8] != 0) & s.value_buffer.deq.rdy & s.cr_send_buffer.enq.rdy
  // 
  //     s.cr_send.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.deq.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.enq.msg@=s.value_buffer.deq.ret[8:40]
  // 
  //     s.cr_send.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.deq.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send.msg @=s.cr_send_buffer.deq.ret
  
  always_comb begin : comb
    temp_value_q__deq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    temp_cr_q__deq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    temp_cr_q__enq__msg = watcher_buffer__deq__ret[6'd63:6'd32];
    temp_value_q__enq__en = value_recv__en;
    value_recv__rdy = temp_value_q__enq__rdy;
    temp_value_q__enq__msg = value_recv__msg[5'd23:5'd24 - 5'd8];
    watcher_buffer__enq__en = watcher_recv__en;
    watcher_recv__rdy = watcher_buffer__enq__rdy;
    watcher_buffer__enq__msg = watcher_recv__msg[7'd81:7'd82 - 7'd64];
    size_addr_buffer__enq__en = lit_to_size_addr_mem_recv__en;
    lit_to_size_addr_mem_recv__rdy = size_addr_buffer__enq__rdy;
    size_addr_buffer__enq__msg = lit_to_size_addr_mem_recv__msg[7'd113:7'd114 - 7'd96];
    size_addr_buffer__deq__en = watcher_fetch_unit__size_recv__rdy & watcher_fetch_unit__addr_recv__rdy;
    value_buffer__enq__msg = { temp_value_q__deq__ret, temp_cr_q__deq__ret };
    value_buffer__enq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    lit_to_size_addr_mem_send__en = lit_to_size_addr_mem_send__rdy & lit_recv_buffer__deq__rdy;
    lit_recv_buffer__deq__en = lit_to_size_addr_mem_send__rdy & lit_recv_buffer__deq__rdy;
    lit_to_size_addr_mem_send__msg = { 12'd0, 32'd0, lit_recv_buffer__deq__ret, 100'd0 };
    watcher_fetch_unit__size_recv__en = watcher_fetch_unit__size_recv__rdy & size_addr_buffer__deq__rdy;
    watcher_fetch_unit__addr_recv__en = watcher_fetch_unit__addr_recv__rdy & size_addr_buffer__deq__rdy;
    watcher_fetch_unit__size_recv__msg = size_addr_buffer__deq__ret[7'd49:7'd18];
    watcher_fetch_unit__addr_recv__msg = size_addr_buffer__deq__ret[7'd95:7'd96 - 7'd64];
    value_send__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    watcher_buffer__deq__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    temp_cr_q__enq__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    value_send__msg = { 12'd0, 32'd0, watcher_buffer__deq__ret[6'd31:6'd0], 10'd0 };
    temp_value_q__enq__en = value_recv__en;
    value_recv__rdy = temp_value_q__enq__rdy;
    temp_value_q__enq__msg = value_recv__msg[5'd23:5'd16];
    value_buffer__deq__en = ( ( ( value_buffer__deq__ret[6'd7:6'd0] != 8'd0 ) & value_buffer__deq__rdy ) & cr_send_buffer__enq__rdy ) | ( value_buffer__deq__ret[6'd7:6'd0] == 8'd0 );
    cr_send_buffer__enq__en = ( ( value_buffer__deq__ret[6'd7:6'd0] != 8'd0 ) & value_buffer__deq__rdy ) & cr_send_buffer__enq__rdy;
    cr_send__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__deq__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__enq__msg = value_buffer__deq__ret[6'd39:6'd8];
    cr_send__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__deq__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send__msg = cr_send_buffer__deq__ret;
  end

  // Connections
  assign lit_recv_buffer__clk = clk;
  assign lit_recv_buffer__reset = reset;
  assign size_addr_buffer__clk = clk;
  assign size_addr_buffer__reset = reset;
  assign watcher_buffer__clk = clk;
  assign watcher_buffer__reset = reset;
  assign value_buffer__clk = clk;
  assign value_buffer__reset = reset;
  assign cr_send_buffer__clk = clk;
  assign cr_send_buffer__reset = reset;
  assign temp_cr_q__clk = clk;
  assign temp_cr_q__reset = reset;
  assign temp_value_q__clk = clk;
  assign temp_value_q__reset = reset;
  assign watcher_fetch_unit__clk = clk;
  assign watcher_fetch_unit__reset = reset;
  assign lit_recv_buffer__enq__en = from_trail_recv__en;
  assign lit_recv_buffer__enq__msg = from_trail_recv__msg;
  assign from_trail_recv__rdy = lit_recv_buffer__enq__rdy;
  assign watcher_send_mem_send__en = watcher_fetch_unit__mem_out__en;
  assign watcher_send_mem_send__msg = watcher_fetch_unit__mem_out__msg;
  assign watcher_fetch_unit__mem_out__rdy = watcher_send_mem_send__rdy;

endmodule


// PyMTL Component Sized_memory_sender Definition
// Full name: Sized_memory_sender__size_type_Bits32__addr_type_Bits64__item_size_64__mem_request_dest_41
// At /home/sjq/git/pymtl_project/satacc/utils/mem_oparator.py
module Sized_memory_sender__7750dc19fa553738
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  input  logic [0:0]    addr_recv__en,
  input  logic [63:0]   addr_recv__msg,
  output logic [0:0]    addr_recv__rdy,
  output logic [0:0]    mem_out__en,
  output logic [143:0]  mem_out__msg,
  input  logic [0:0]    mem_out__rdy,
  input  logic [0:0]    size_recv__en,
  input  logic [31:0]   size_recv__msg,
  output logic [0:0]    size_recv__rdy
);
  // Struct/Array ports of sub-components in the form of wires
  logic [63:0]   addr_data_mux__in_ [0:1];
  logic [0:0]    addr_en_mux__in_ [0:1];
  logic [31:0]   size_data_mux__in_ [0:1];
  logic [0:0]    size_en_mux__in_ [0:1];

  // Sub-component declarations
  logic [0:0]    addr_data_mux__clk;
  logic [63:0]   addr_data_mux__in___0;
  logic [63:0]   addr_data_mux__in___1;
  logic [63:0]   addr_data_mux__out;
  logic [0:0]    addr_data_mux__reset;
  logic [0:0]    addr_data_mux__sel;

  Mux__Type_Bits64__ninputs_2 addr_data_mux
  (
    .clk            (     addr_data_mux__clk    ),
    .in___0         (   addr_data_mux__in___0   ),
    .in___1         (   addr_data_mux__in___1   ),
    .out            (     addr_data_mux__out    ),
    .reset          (    addr_data_mux__reset   ),
    .sel            (     addr_data_mux__sel    )
  );

  logic [0:0]    addr_en_mux__clk;
  logic [0:0]    addr_en_mux__in___0;
  logic [0:0]    addr_en_mux__in___1;
  logic [0:0]    addr_en_mux__out;
  logic [0:0]    addr_en_mux__reset;
  logic [0:0]    addr_en_mux__sel;

  Mux__Type_Bits1__ninputs_2 addr_en_mux
  (
    .clk            (      addr_en_mux__clk     ),
    .in___0         (    addr_en_mux__in___0    ),
    .in___1         (    addr_en_mux__in___1    ),
    .out            (      addr_en_mux__out     ),
    .reset          (     addr_en_mux__reset    ),
    .sel            (      addr_en_mux__sel     )
  );

  logic [0:0]    addr_reg__clk;
  logic [0:0]    addr_reg__en;
  logic [63:0]   addr_reg__in_;
  logic [63:0]   addr_reg__out;
  logic [0:0]    addr_reg__reset;

  RegEnRst__Type_Bits64__reset_value_0 addr_reg
  (
    .clk            (       addr_reg__clk       ),
    .en             (        addr_reg__en       ),
    .in_            (       addr_reg__in_       ),
    .out            (       addr_reg__out       ),
    .reset          (      addr_reg__reset      )
  );

  logic [0:0]    size_data_mux__clk;
  logic [31:0]   size_data_mux__in___0;
  logic [31:0]   size_data_mux__in___1;
  logic [31:0]   size_data_mux__out;
  logic [0:0]    size_data_mux__reset;
  logic [0:0]    size_data_mux__sel;

  Mux__Type_Bits32__ninputs_2 size_data_mux
  (
    .clk            (     size_data_mux__clk    ),
    .in___0         (   size_data_mux__in___0   ),
    .in___1         (   size_data_mux__in___1   ),
    .out            (     size_data_mux__out    ),
    .reset          (    size_data_mux__reset   ),
    .sel            (     size_data_mux__sel    )
  );

  logic [0:0]    size_en_mux__clk;
  logic [0:0]    size_en_mux__in___0;
  logic [0:0]    size_en_mux__in___1;
  logic [0:0]    size_en_mux__out;
  logic [0:0]    size_en_mux__reset;
  logic [0:0]    size_en_mux__sel;

  Mux__Type_Bits1__ninputs_2 size_en_mux
  (
    .clk            (      size_en_mux__clk     ),
    .in___0         (    size_en_mux__in___0    ),
    .in___1         (    size_en_mux__in___1    ),
    .out            (      size_en_mux__out     ),
    .reset          (     size_en_mux__reset    ),
    .sel            (      size_en_mux__sel     )
  );

  logic [0:0]    size_reg__clk;
  logic [0:0]    size_reg__en;
  logic [31:0]   size_reg__in_;
  logic [31:0]   size_reg__out;
  logic [0:0]    size_reg__reset;

  RegEnRst__Type_Bits32__reset_value_0 size_reg
  (
    .clk            (       size_reg__clk       ),
    .en             (        size_reg__en       ),
    .in_            (       size_reg__in_       ),
    .out            (       size_reg__out       ),
    .reset          (      size_reg__reset      )
  );

  // Connect struct/array ports and their wire forms
  assign addr_data_mux__in___0 = addr_data_mux__in_[0];
  assign addr_data_mux__in___1 = addr_data_mux__in_[1];
  assign addr_en_mux__in___0 = addr_en_mux__in_[0];
  assign addr_en_mux__in___1 = addr_en_mux__in_[1];
  assign size_data_mux__in___0 = size_data_mux__in_[0];
  assign size_data_mux__in___1 = size_data_mux__in_[1];
  assign size_en_mux__in___0 = size_en_mux__in_[0];
  assign size_en_mux__in___1 = size_en_mux__in_[1];

  // Temporary wire definitions
  logic [143:0]  __tmpvar__comb_message;

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/utils/mem_oparator.py:46
  // @update
  // def comb():
  //     s.size_recv.rdy @= s.size_reg.out != 0
  //     s.addr_recv.rdy @= s.size_reg.out != 0
  // 
  //     # if the size is zero, listen to outsize sigal, else listen to my self
  //     s.size_en_mux.sel @= 0 if s.size_reg.out == 0 else 1
  //     s.size_data_mux.sel @=0 if s.size_reg.out == 0 else 1
  //     # build the request.
  //     message = req()
  // 
  //     s.mem_out.msg @= message
  //     s.size_data_mux.in_[1] @= s.size_data_mux.out - 1
  //     # addr will change every round
  //     s.addr_data_mux.in_[
  //         1]@=s.addr_reg.out + item_size  # addr offset
  // 
  //     if s.mem_out.rdy & (s.size_reg.out != 0):
  //         # send the request and deduce the size
  //         s.size_en_mux.in_[1] @= 1
  //         s.mem_out.en @=1
  //         s.addr_en_mux.in_[1]@=1
  // 
  //     else:
  //         s.size_en_mux.in_[1]@=0
  //         s.addr_en_mux.in_[1]@=0
  //         s.mem_out.en@=0
  
  always_comb begin : comb
    size_recv__rdy = size_reg__out != 32'd0;
    addr_recv__rdy = size_reg__out != 32'd0;
    size_en_mux__sel = ( size_reg__out == 32'd0 ) ? 1'd0 : 1'd1;
    size_data_mux__sel = ( size_reg__out == 32'd0 ) ? 1'd0 : 1'd1;
    __tmpvar__comb_message = 144'd0;
    mem_out__msg = __tmpvar__comb_message;
    size_data_mux__in_[1'd1] = size_data_mux__out - 32'd1;
    addr_data_mux__in_[1'd1] = addr_reg__out + 64'd64;
    if ( mem_out__rdy & ( size_reg__out != 32'd0 ) ) begin
      size_en_mux__in_[1'd1] = 1'd1;
      mem_out__en = 1'd1;
      addr_en_mux__in_[1'd1] = 1'd1;
    end
    else begin
      size_en_mux__in_[1'd1] = 1'd0;
      addr_en_mux__in_[1'd1] = 1'd0;
      mem_out__en = 1'd0;
    end
  end

  // Connections
  assign size_reg__clk = clk;
  assign size_reg__reset = reset;
  assign addr_reg__clk = clk;
  assign addr_reg__reset = reset;
  assign size_en_mux__clk = clk;
  assign size_en_mux__reset = reset;
  assign size_data_mux__clk = clk;
  assign size_data_mux__reset = reset;
  assign addr_en_mux__clk = clk;
  assign addr_en_mux__reset = reset;
  assign addr_data_mux__clk = clk;
  assign addr_data_mux__reset = reset;
  assign size_reg__en = size_en_mux__out;
  assign size_reg__in_ = size_data_mux__out;
  assign addr_reg__en = addr_en_mux__out;
  assign addr_reg__in_ = addr_data_mux__out;
  assign addr_en_mux__in_[0] = addr_recv__en;
  assign addr_data_mux__in_[0] = addr_recv__msg;
  assign size_en_mux__in_[0] = size_recv__en;
  assign size_data_mux__in_[0] = size_recv__msg;

endmodule


// PyMTL Component Watcher Definition
// At /home/sjq/git/pymtl_project/satacc/watcher/watcher.py
module Watcher__index_5
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  output logic [0:0]    cr_send__en,
  output logic [31:0]   cr_send__msg,
  input  logic [0:0]    cr_send__rdy,
  input  logic [0:0]    from_trail_recv__en,
  input  logic [31:0]   from_trail_recv__msg,
  output logic [0:0]    from_trail_recv__rdy,
  input  logic [0:0]    lit_to_size_addr_mem_recv__en,
  input  logic [113:0]  lit_to_size_addr_mem_recv__msg,
  output logic [0:0]    lit_to_size_addr_mem_recv__rdy,
  output logic [0:0]    lit_to_size_addr_mem_send__en,
  output logic [175:0]  lit_to_size_addr_mem_send__msg,
  input  logic [0:0]    lit_to_size_addr_mem_send__rdy,
  input  logic [0:0]    value_recv__en,
  input  logic [23:0]   value_recv__msg,
  output logic [0:0]    value_recv__rdy,
  output logic [0:0]    value_send__en,
  output logic [85:0]   value_send__msg,
  input  logic [0:0]    value_send__rdy,
  input  logic [0:0]    watcher_recv__en,
  input  logic [81:0]   watcher_recv__msg,
  output logic [0:0]    watcher_recv__rdy,
  output logic [0:0]    watcher_send_mem_send__en,
  output logic [143:0]  watcher_send_mem_send__msg,
  input  logic [0:0]    watcher_send_mem_send__rdy
);
  // Sub-component declarations
  logic [0:0]    cr_send_buffer__clk;
  logic [2:0]    cr_send_buffer__count;
  logic [0:0]    cr_send_buffer__reset;
  logic [0:0]    cr_send_buffer__deq__en;
  logic [0:0]    cr_send_buffer__deq__rdy;
  logic [31:0]   cr_send_buffer__deq__ret;
  logic [0:0]    cr_send_buffer__enq__en;
  logic [31:0]   cr_send_buffer__enq__msg;
  logic [0:0]    cr_send_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_4 cr_send_buffer
  (
    .clk            (    cr_send_buffer__clk    ),
    .count          (   cr_send_buffer__count   ),
    .reset          (   cr_send_buffer__reset   ),
    .deq__en        (  cr_send_buffer__deq__en  ),
    .deq__rdy       (  cr_send_buffer__deq__rdy ),
    .deq__ret       (  cr_send_buffer__deq__ret ),
    .enq__en        (  cr_send_buffer__enq__en  ),
    .enq__msg       (  cr_send_buffer__enq__msg ),
    .enq__rdy       (  cr_send_buffer__enq__rdy )
  );

  logic [0:0]    lit_recv_buffer__clk;
  logic [2:0]    lit_recv_buffer__count;
  logic [0:0]    lit_recv_buffer__reset;
  logic [0:0]    lit_recv_buffer__deq__en;
  logic [0:0]    lit_recv_buffer__deq__rdy;
  logic [31:0]   lit_recv_buffer__deq__ret;
  logic [0:0]    lit_recv_buffer__enq__en;
  logic [31:0]   lit_recv_buffer__enq__msg;
  logic [0:0]    lit_recv_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_4 lit_recv_buffer
  (
    .clk            (    lit_recv_buffer__clk   ),
    .count          (   lit_recv_buffer__count  ),
    .reset          (   lit_recv_buffer__reset  ),
    .deq__en        (  lit_recv_buffer__deq__en ),
    .deq__rdy       ( lit_recv_buffer__deq__rdy ),
    .deq__ret       ( lit_recv_buffer__deq__ret ),
    .enq__en        (  lit_recv_buffer__enq__en ),
    .enq__msg       ( lit_recv_buffer__enq__msg ),
    .enq__rdy       ( lit_recv_buffer__enq__rdy )
  );

  logic [0:0]    size_addr_buffer__clk;
  logic [3:0]    size_addr_buffer__count;
  logic [0:0]    size_addr_buffer__reset;
  logic [0:0]    size_addr_buffer__deq__en;
  logic [0:0]    size_addr_buffer__deq__rdy;
  logic [95:0]   size_addr_buffer__deq__ret;
  logic [0:0]    size_addr_buffer__enq__en;
  logic [95:0]   size_addr_buffer__enq__msg;
  logic [0:0]    size_addr_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits96__num_entries_8 size_addr_buffer
  (
    .clk            (   size_addr_buffer__clk   ),
    .count          (  size_addr_buffer__count  ),
    .reset          (  size_addr_buffer__reset  ),
    .deq__en        ( size_addr_buffer__deq__en ),
    .deq__rdy       ( size_addr_buffer__deq__rdy ),
    .deq__ret       ( size_addr_buffer__deq__ret ),
    .enq__en        ( size_addr_buffer__enq__en ),
    .enq__msg       ( size_addr_buffer__enq__msg ),
    .enq__rdy       ( size_addr_buffer__enq__rdy )
  );

  logic [0:0]    temp_cr_q__clk;
  logic [0:0]    temp_cr_q__count;
  logic [0:0]    temp_cr_q__reset;
  logic [0:0]    temp_cr_q__deq__en;
  logic [0:0]    temp_cr_q__deq__rdy;
  logic [31:0]   temp_cr_q__deq__ret;
  logic [0:0]    temp_cr_q__enq__en;
  logic [31:0]   temp_cr_q__enq__msg;
  logic [0:0]    temp_cr_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_cr_q
  (
    .clk            (       temp_cr_q__clk      ),
    .count          (      temp_cr_q__count     ),
    .reset          (      temp_cr_q__reset     ),
    .deq__en        (     temp_cr_q__deq__en    ),
    .deq__rdy       (    temp_cr_q__deq__rdy    ),
    .deq__ret       (    temp_cr_q__deq__ret    ),
    .enq__en        (     temp_cr_q__enq__en    ),
    .enq__msg       (    temp_cr_q__enq__msg    ),
    .enq__rdy       (    temp_cr_q__enq__rdy    )
  );

  logic [0:0]    temp_value_q__clk;
  logic [0:0]    temp_value_q__count;
  logic [0:0]    temp_value_q__reset;
  logic [0:0]    temp_value_q__deq__en;
  logic [0:0]    temp_value_q__deq__rdy;
  logic [7:0]    temp_value_q__deq__ret;
  logic [0:0]    temp_value_q__enq__en;
  logic [7:0]    temp_value_q__enq__msg;
  logic [0:0]    temp_value_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits8__num_entries_1 temp_value_q
  (
    .clk            (     temp_value_q__clk     ),
    .count          (    temp_value_q__count    ),
    .reset          (    temp_value_q__reset    ),
    .deq__en        (   temp_value_q__deq__en   ),
    .deq__rdy       (   temp_value_q__deq__rdy  ),
    .deq__ret       (   temp_value_q__deq__ret  ),
    .enq__en        (   temp_value_q__enq__en   ),
    .enq__msg       (   temp_value_q__enq__msg  ),
    .enq__rdy       (   temp_value_q__enq__rdy  )
  );

  logic [0:0]    value_buffer__clk;
  logic [3:0]    value_buffer__count;
  logic [0:0]    value_buffer__reset;
  logic [0:0]    value_buffer__deq__en;
  logic [0:0]    value_buffer__deq__rdy;
  logic [39:0]   value_buffer__deq__ret;
  logic [0:0]    value_buffer__enq__en;
  logic [39:0]   value_buffer__enq__msg;
  logic [0:0]    value_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits40__num_entries_8 value_buffer
  (
    .clk            (     value_buffer__clk     ),
    .count          (    value_buffer__count    ),
    .reset          (    value_buffer__reset    ),
    .deq__en        (   value_buffer__deq__en   ),
    .deq__rdy       (   value_buffer__deq__rdy  ),
    .deq__ret       (   value_buffer__deq__ret  ),
    .enq__en        (   value_buffer__enq__en   ),
    .enq__msg       (   value_buffer__enq__msg  ),
    .enq__rdy       (   value_buffer__enq__rdy  )
  );

  logic [0:0]    watcher_buffer__clk;
  logic [3:0]    watcher_buffer__count;
  logic [0:0]    watcher_buffer__reset;
  logic [0:0]    watcher_buffer__deq__en;
  logic [0:0]    watcher_buffer__deq__rdy;
  logic [63:0]   watcher_buffer__deq__ret;
  logic [0:0]    watcher_buffer__enq__en;
  logic [63:0]   watcher_buffer__enq__msg;
  logic [0:0]    watcher_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits64__num_entries_8 watcher_buffer
  (
    .clk            (    watcher_buffer__clk    ),
    .count          (   watcher_buffer__count   ),
    .reset          (   watcher_buffer__reset   ),
    .deq__en        (  watcher_buffer__deq__en  ),
    .deq__rdy       (  watcher_buffer__deq__rdy ),
    .deq__ret       (  watcher_buffer__deq__ret ),
    .enq__en        (  watcher_buffer__enq__en  ),
    .enq__msg       (  watcher_buffer__enq__msg ),
    .enq__rdy       (  watcher_buffer__enq__rdy )
  );

  logic [0:0]    watcher_fetch_unit__clk;
  logic [0:0]    watcher_fetch_unit__reset;
  logic [0:0]    watcher_fetch_unit__addr_recv__en;
  logic [63:0]   watcher_fetch_unit__addr_recv__msg;
  logic [0:0]    watcher_fetch_unit__addr_recv__rdy;
  logic [0:0]    watcher_fetch_unit__mem_out__en;
  logic [143:0]  watcher_fetch_unit__mem_out__msg;
  logic [0:0]    watcher_fetch_unit__mem_out__rdy;
  logic [0:0]    watcher_fetch_unit__size_recv__en;
  logic [31:0]   watcher_fetch_unit__size_recv__msg;
  logic [0:0]    watcher_fetch_unit__size_recv__rdy;

  Sized_memory_sender__7750dc19fa553738 watcher_fetch_unit
  (
    .clk            (  watcher_fetch_unit__clk  ),
    .reset          ( watcher_fetch_unit__reset ),
    .addr_recv__en  ( watcher_fetch_unit__addr_recv__en ),
    .addr_recv__msg ( watcher_fetch_unit__addr_recv__msg ),
    .addr_recv__rdy ( watcher_fetch_unit__addr_recv__rdy ),
    .mem_out__en    ( watcher_fetch_unit__mem_out__en ),
    .mem_out__msg   ( watcher_fetch_unit__mem_out__msg ),
    .mem_out__rdy   ( watcher_fetch_unit__mem_out__rdy ),
    .size_recv__en  ( watcher_fetch_unit__size_recv__en ),
    .size_recv__msg ( watcher_fetch_unit__size_recv__msg ),
    .size_recv__rdy ( watcher_fetch_unit__size_recv__rdy )
  );

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/watcher/watcher.py:50
  // @update
  // def comb():
  //     # send litral:
  //     s.temp_value_q.deq.en@=s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  //     s.temp_cr_q.deq.en@=s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  //     s.temp_cr_q.enq.msg@=s.watcher_buffer.deq.ret[32:64]
  //     s.temp_value_q.enq.en@=s.value_recv.en
  //     s.value_recv.rdy@=s.temp_value_q.enq.rdy
  //     s.temp_value_q.enq.msg@=s.value_recv.msg[24-8:24]
  // 
  //     s.watcher_buffer.enq.en@=s.watcher_recv.en
  //     s.watcher_recv.rdy@=s.watcher_buffer.enq.rdy
  //     s.watcher_buffer.enq.msg@=s.watcher_recv.msg[82-64:82]
  // 
  //     s.size_addr_buffer.enq.en@=s.lit_to_size_addr_mem_recv.en
  //     s.lit_to_size_addr_mem_recv.rdy @=s.size_addr_buffer.enq.rdy
  //     s.size_addr_buffer.enq.msg@=s.lit_to_size_addr_mem_recv.msg[114-96:114]
  // 
  //     s.size_addr_buffer.deq.en@=s.watcher_fetch_unit.size_recv.rdy & s.watcher_fetch_unit.addr_recv.rdy
  // 
  //     s.value_buffer.enq.msg@=concat(s.temp_value_q.deq.ret,
  //                                    s.temp_cr_q.deq.ret)
  //     s.value_buffer.enq.en@= s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  // 
  //     s.lit_to_size_addr_mem_send.en@=s.lit_to_size_addr_mem_send.rdy & s.lit_recv_buffer.deq.rdy
  //     s.lit_recv_buffer.deq.en@=s.lit_to_size_addr_mem_send.rdy & s.lit_recv_buffer.deq.rdy
  // 
  //     # TODO: set the message
  //     s.lit_to_size_addr_mem_send.msg@=concat(
  //         Bits12(0), Bits32(0), s.lit_recv_buffer.deq.ret, Bits100(0))
  // 
  //     s.watcher_fetch_unit.size_recv.en @=s.watcher_fetch_unit.size_recv.rdy & s.size_addr_buffer.deq.rdy
  //     s.watcher_fetch_unit.addr_recv.en @=s.watcher_fetch_unit.addr_recv.rdy & s.size_addr_buffer.deq.rdy
  //     s.watcher_fetch_unit.size_recv.msg@=s.size_addr_buffer.deq.ret[18:50]
  //     s.watcher_fetch_unit.addr_recv.msg@=s.size_addr_buffer.deq.ret[96-64:96]
  // 
  //     # send value request
  //     s.value_send.en@=s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  //     s.watcher_buffer.deq.en@=s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  //     s.temp_cr_q.enq.en@= s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  // 
  //     s.value_send.msg @= concat(Bits12(0), Bits32(0),
  //                                s.watcher_buffer.deq.ret[0:32], Bits10(0))
  // 
  //     s.temp_value_q.enq.en@= s.value_recv.en
  //     s.value_recv.rdy@=s.temp_value_q.enq.rdy
  //     s.temp_value_q.enq.msg@=s.value_recv.msg[16:24]
  // 
  //     s.value_buffer.deq.en@=((s.value_buffer.deq.ret[0:8] != 0) & s.value_buffer.deq.rdy &
  //                             s.cr_send_buffer.enq.rdy) | (s.value_buffer.deq.ret[0:8] == 0)
  //     s.cr_send_buffer.enq.en@= (
  //         s.value_buffer.deq.ret[0:8] != 0) & s.value_buffer.deq.rdy & s.cr_send_buffer.enq.rdy
  // 
  //     s.cr_send.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.deq.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.enq.msg@=s.value_buffer.deq.ret[8:40]
  // 
  //     s.cr_send.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.deq.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send.msg @=s.cr_send_buffer.deq.ret
  
  always_comb begin : comb
    temp_value_q__deq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    temp_cr_q__deq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    temp_cr_q__enq__msg = watcher_buffer__deq__ret[6'd63:6'd32];
    temp_value_q__enq__en = value_recv__en;
    value_recv__rdy = temp_value_q__enq__rdy;
    temp_value_q__enq__msg = value_recv__msg[5'd23:5'd24 - 5'd8];
    watcher_buffer__enq__en = watcher_recv__en;
    watcher_recv__rdy = watcher_buffer__enq__rdy;
    watcher_buffer__enq__msg = watcher_recv__msg[7'd81:7'd82 - 7'd64];
    size_addr_buffer__enq__en = lit_to_size_addr_mem_recv__en;
    lit_to_size_addr_mem_recv__rdy = size_addr_buffer__enq__rdy;
    size_addr_buffer__enq__msg = lit_to_size_addr_mem_recv__msg[7'd113:7'd114 - 7'd96];
    size_addr_buffer__deq__en = watcher_fetch_unit__size_recv__rdy & watcher_fetch_unit__addr_recv__rdy;
    value_buffer__enq__msg = { temp_value_q__deq__ret, temp_cr_q__deq__ret };
    value_buffer__enq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    lit_to_size_addr_mem_send__en = lit_to_size_addr_mem_send__rdy & lit_recv_buffer__deq__rdy;
    lit_recv_buffer__deq__en = lit_to_size_addr_mem_send__rdy & lit_recv_buffer__deq__rdy;
    lit_to_size_addr_mem_send__msg = { 12'd0, 32'd0, lit_recv_buffer__deq__ret, 100'd0 };
    watcher_fetch_unit__size_recv__en = watcher_fetch_unit__size_recv__rdy & size_addr_buffer__deq__rdy;
    watcher_fetch_unit__addr_recv__en = watcher_fetch_unit__addr_recv__rdy & size_addr_buffer__deq__rdy;
    watcher_fetch_unit__size_recv__msg = size_addr_buffer__deq__ret[7'd49:7'd18];
    watcher_fetch_unit__addr_recv__msg = size_addr_buffer__deq__ret[7'd95:7'd96 - 7'd64];
    value_send__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    watcher_buffer__deq__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    temp_cr_q__enq__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    value_send__msg = { 12'd0, 32'd0, watcher_buffer__deq__ret[6'd31:6'd0], 10'd0 };
    temp_value_q__enq__en = value_recv__en;
    value_recv__rdy = temp_value_q__enq__rdy;
    temp_value_q__enq__msg = value_recv__msg[5'd23:5'd16];
    value_buffer__deq__en = ( ( ( value_buffer__deq__ret[6'd7:6'd0] != 8'd0 ) & value_buffer__deq__rdy ) & cr_send_buffer__enq__rdy ) | ( value_buffer__deq__ret[6'd7:6'd0] == 8'd0 );
    cr_send_buffer__enq__en = ( ( value_buffer__deq__ret[6'd7:6'd0] != 8'd0 ) & value_buffer__deq__rdy ) & cr_send_buffer__enq__rdy;
    cr_send__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__deq__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__enq__msg = value_buffer__deq__ret[6'd39:6'd8];
    cr_send__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__deq__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send__msg = cr_send_buffer__deq__ret;
  end

  // Connections
  assign lit_recv_buffer__clk = clk;
  assign lit_recv_buffer__reset = reset;
  assign size_addr_buffer__clk = clk;
  assign size_addr_buffer__reset = reset;
  assign watcher_buffer__clk = clk;
  assign watcher_buffer__reset = reset;
  assign value_buffer__clk = clk;
  assign value_buffer__reset = reset;
  assign cr_send_buffer__clk = clk;
  assign cr_send_buffer__reset = reset;
  assign temp_cr_q__clk = clk;
  assign temp_cr_q__reset = reset;
  assign temp_value_q__clk = clk;
  assign temp_value_q__reset = reset;
  assign watcher_fetch_unit__clk = clk;
  assign watcher_fetch_unit__reset = reset;
  assign lit_recv_buffer__enq__en = from_trail_recv__en;
  assign lit_recv_buffer__enq__msg = from_trail_recv__msg;
  assign from_trail_recv__rdy = lit_recv_buffer__enq__rdy;
  assign watcher_send_mem_send__en = watcher_fetch_unit__mem_out__en;
  assign watcher_send_mem_send__msg = watcher_fetch_unit__mem_out__msg;
  assign watcher_fetch_unit__mem_out__rdy = watcher_send_mem_send__rdy;

endmodule


// PyMTL Component Sized_memory_sender Definition
// Full name: Sized_memory_sender__size_type_Bits32__addr_type_Bits64__item_size_64__mem_request_dest_49
// At /home/sjq/git/pymtl_project/satacc/utils/mem_oparator.py
module Sized_memory_sender__a3f39a6acc28812c
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  input  logic [0:0]    addr_recv__en,
  input  logic [63:0]   addr_recv__msg,
  output logic [0:0]    addr_recv__rdy,
  output logic [0:0]    mem_out__en,
  output logic [143:0]  mem_out__msg,
  input  logic [0:0]    mem_out__rdy,
  input  logic [0:0]    size_recv__en,
  input  logic [31:0]   size_recv__msg,
  output logic [0:0]    size_recv__rdy
);
  // Struct/Array ports of sub-components in the form of wires
  logic [63:0]   addr_data_mux__in_ [0:1];
  logic [0:0]    addr_en_mux__in_ [0:1];
  logic [31:0]   size_data_mux__in_ [0:1];
  logic [0:0]    size_en_mux__in_ [0:1];

  // Sub-component declarations
  logic [0:0]    addr_data_mux__clk;
  logic [63:0]   addr_data_mux__in___0;
  logic [63:0]   addr_data_mux__in___1;
  logic [63:0]   addr_data_mux__out;
  logic [0:0]    addr_data_mux__reset;
  logic [0:0]    addr_data_mux__sel;

  Mux__Type_Bits64__ninputs_2 addr_data_mux
  (
    .clk            (     addr_data_mux__clk    ),
    .in___0         (   addr_data_mux__in___0   ),
    .in___1         (   addr_data_mux__in___1   ),
    .out            (     addr_data_mux__out    ),
    .reset          (    addr_data_mux__reset   ),
    .sel            (     addr_data_mux__sel    )
  );

  logic [0:0]    addr_en_mux__clk;
  logic [0:0]    addr_en_mux__in___0;
  logic [0:0]    addr_en_mux__in___1;
  logic [0:0]    addr_en_mux__out;
  logic [0:0]    addr_en_mux__reset;
  logic [0:0]    addr_en_mux__sel;

  Mux__Type_Bits1__ninputs_2 addr_en_mux
  (
    .clk            (      addr_en_mux__clk     ),
    .in___0         (    addr_en_mux__in___0    ),
    .in___1         (    addr_en_mux__in___1    ),
    .out            (      addr_en_mux__out     ),
    .reset          (     addr_en_mux__reset    ),
    .sel            (      addr_en_mux__sel     )
  );

  logic [0:0]    addr_reg__clk;
  logic [0:0]    addr_reg__en;
  logic [63:0]   addr_reg__in_;
  logic [63:0]   addr_reg__out;
  logic [0:0]    addr_reg__reset;

  RegEnRst__Type_Bits64__reset_value_0 addr_reg
  (
    .clk            (       addr_reg__clk       ),
    .en             (        addr_reg__en       ),
    .in_            (       addr_reg__in_       ),
    .out            (       addr_reg__out       ),
    .reset          (      addr_reg__reset      )
  );

  logic [0:0]    size_data_mux__clk;
  logic [31:0]   size_data_mux__in___0;
  logic [31:0]   size_data_mux__in___1;
  logic [31:0]   size_data_mux__out;
  logic [0:0]    size_data_mux__reset;
  logic [0:0]    size_data_mux__sel;

  Mux__Type_Bits32__ninputs_2 size_data_mux
  (
    .clk            (     size_data_mux__clk    ),
    .in___0         (   size_data_mux__in___0   ),
    .in___1         (   size_data_mux__in___1   ),
    .out            (     size_data_mux__out    ),
    .reset          (    size_data_mux__reset   ),
    .sel            (     size_data_mux__sel    )
  );

  logic [0:0]    size_en_mux__clk;
  logic [0:0]    size_en_mux__in___0;
  logic [0:0]    size_en_mux__in___1;
  logic [0:0]    size_en_mux__out;
  logic [0:0]    size_en_mux__reset;
  logic [0:0]    size_en_mux__sel;

  Mux__Type_Bits1__ninputs_2 size_en_mux
  (
    .clk            (      size_en_mux__clk     ),
    .in___0         (    size_en_mux__in___0    ),
    .in___1         (    size_en_mux__in___1    ),
    .out            (      size_en_mux__out     ),
    .reset          (     size_en_mux__reset    ),
    .sel            (      size_en_mux__sel     )
  );

  logic [0:0]    size_reg__clk;
  logic [0:0]    size_reg__en;
  logic [31:0]   size_reg__in_;
  logic [31:0]   size_reg__out;
  logic [0:0]    size_reg__reset;

  RegEnRst__Type_Bits32__reset_value_0 size_reg
  (
    .clk            (       size_reg__clk       ),
    .en             (        size_reg__en       ),
    .in_            (       size_reg__in_       ),
    .out            (       size_reg__out       ),
    .reset          (      size_reg__reset      )
  );

  // Connect struct/array ports and their wire forms
  assign addr_data_mux__in___0 = addr_data_mux__in_[0];
  assign addr_data_mux__in___1 = addr_data_mux__in_[1];
  assign addr_en_mux__in___0 = addr_en_mux__in_[0];
  assign addr_en_mux__in___1 = addr_en_mux__in_[1];
  assign size_data_mux__in___0 = size_data_mux__in_[0];
  assign size_data_mux__in___1 = size_data_mux__in_[1];
  assign size_en_mux__in___0 = size_en_mux__in_[0];
  assign size_en_mux__in___1 = size_en_mux__in_[1];

  // Temporary wire definitions
  logic [143:0]  __tmpvar__comb_message;

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/utils/mem_oparator.py:46
  // @update
  // def comb():
  //     s.size_recv.rdy @= s.size_reg.out != 0
  //     s.addr_recv.rdy @= s.size_reg.out != 0
  // 
  //     # if the size is zero, listen to outsize sigal, else listen to my self
  //     s.size_en_mux.sel @= 0 if s.size_reg.out == 0 else 1
  //     s.size_data_mux.sel @=0 if s.size_reg.out == 0 else 1
  //     # build the request.
  //     message = req()
  // 
  //     s.mem_out.msg @= message
  //     s.size_data_mux.in_[1] @= s.size_data_mux.out - 1
  //     # addr will change every round
  //     s.addr_data_mux.in_[
  //         1]@=s.addr_reg.out + item_size  # addr offset
  // 
  //     if s.mem_out.rdy & (s.size_reg.out != 0):
  //         # send the request and deduce the size
  //         s.size_en_mux.in_[1] @= 1
  //         s.mem_out.en @=1
  //         s.addr_en_mux.in_[1]@=1
  // 
  //     else:
  //         s.size_en_mux.in_[1]@=0
  //         s.addr_en_mux.in_[1]@=0
  //         s.mem_out.en@=0
  
  always_comb begin : comb
    size_recv__rdy = size_reg__out != 32'd0;
    addr_recv__rdy = size_reg__out != 32'd0;
    size_en_mux__sel = ( size_reg__out == 32'd0 ) ? 1'd0 : 1'd1;
    size_data_mux__sel = ( size_reg__out == 32'd0 ) ? 1'd0 : 1'd1;
    __tmpvar__comb_message = 144'd0;
    mem_out__msg = __tmpvar__comb_message;
    size_data_mux__in_[1'd1] = size_data_mux__out - 32'd1;
    addr_data_mux__in_[1'd1] = addr_reg__out + 64'd64;
    if ( mem_out__rdy & ( size_reg__out != 32'd0 ) ) begin
      size_en_mux__in_[1'd1] = 1'd1;
      mem_out__en = 1'd1;
      addr_en_mux__in_[1'd1] = 1'd1;
    end
    else begin
      size_en_mux__in_[1'd1] = 1'd0;
      addr_en_mux__in_[1'd1] = 1'd0;
      mem_out__en = 1'd0;
    end
  end

  // Connections
  assign size_reg__clk = clk;
  assign size_reg__reset = reset;
  assign addr_reg__clk = clk;
  assign addr_reg__reset = reset;
  assign size_en_mux__clk = clk;
  assign size_en_mux__reset = reset;
  assign size_data_mux__clk = clk;
  assign size_data_mux__reset = reset;
  assign addr_en_mux__clk = clk;
  assign addr_en_mux__reset = reset;
  assign addr_data_mux__clk = clk;
  assign addr_data_mux__reset = reset;
  assign size_reg__en = size_en_mux__out;
  assign size_reg__in_ = size_data_mux__out;
  assign addr_reg__en = addr_en_mux__out;
  assign addr_reg__in_ = addr_data_mux__out;
  assign addr_en_mux__in_[0] = addr_recv__en;
  assign addr_data_mux__in_[0] = addr_recv__msg;
  assign size_en_mux__in_[0] = size_recv__en;
  assign size_data_mux__in_[0] = size_recv__msg;

endmodule


// PyMTL Component Watcher Definition
// At /home/sjq/git/pymtl_project/satacc/watcher/watcher.py
module Watcher__index_6
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  output logic [0:0]    cr_send__en,
  output logic [31:0]   cr_send__msg,
  input  logic [0:0]    cr_send__rdy,
  input  logic [0:0]    from_trail_recv__en,
  input  logic [31:0]   from_trail_recv__msg,
  output logic [0:0]    from_trail_recv__rdy,
  input  logic [0:0]    lit_to_size_addr_mem_recv__en,
  input  logic [113:0]  lit_to_size_addr_mem_recv__msg,
  output logic [0:0]    lit_to_size_addr_mem_recv__rdy,
  output logic [0:0]    lit_to_size_addr_mem_send__en,
  output logic [175:0]  lit_to_size_addr_mem_send__msg,
  input  logic [0:0]    lit_to_size_addr_mem_send__rdy,
  input  logic [0:0]    value_recv__en,
  input  logic [23:0]   value_recv__msg,
  output logic [0:0]    value_recv__rdy,
  output logic [0:0]    value_send__en,
  output logic [85:0]   value_send__msg,
  input  logic [0:0]    value_send__rdy,
  input  logic [0:0]    watcher_recv__en,
  input  logic [81:0]   watcher_recv__msg,
  output logic [0:0]    watcher_recv__rdy,
  output logic [0:0]    watcher_send_mem_send__en,
  output logic [143:0]  watcher_send_mem_send__msg,
  input  logic [0:0]    watcher_send_mem_send__rdy
);
  // Sub-component declarations
  logic [0:0]    cr_send_buffer__clk;
  logic [2:0]    cr_send_buffer__count;
  logic [0:0]    cr_send_buffer__reset;
  logic [0:0]    cr_send_buffer__deq__en;
  logic [0:0]    cr_send_buffer__deq__rdy;
  logic [31:0]   cr_send_buffer__deq__ret;
  logic [0:0]    cr_send_buffer__enq__en;
  logic [31:0]   cr_send_buffer__enq__msg;
  logic [0:0]    cr_send_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_4 cr_send_buffer
  (
    .clk            (    cr_send_buffer__clk    ),
    .count          (   cr_send_buffer__count   ),
    .reset          (   cr_send_buffer__reset   ),
    .deq__en        (  cr_send_buffer__deq__en  ),
    .deq__rdy       (  cr_send_buffer__deq__rdy ),
    .deq__ret       (  cr_send_buffer__deq__ret ),
    .enq__en        (  cr_send_buffer__enq__en  ),
    .enq__msg       (  cr_send_buffer__enq__msg ),
    .enq__rdy       (  cr_send_buffer__enq__rdy )
  );

  logic [0:0]    lit_recv_buffer__clk;
  logic [2:0]    lit_recv_buffer__count;
  logic [0:0]    lit_recv_buffer__reset;
  logic [0:0]    lit_recv_buffer__deq__en;
  logic [0:0]    lit_recv_buffer__deq__rdy;
  logic [31:0]   lit_recv_buffer__deq__ret;
  logic [0:0]    lit_recv_buffer__enq__en;
  logic [31:0]   lit_recv_buffer__enq__msg;
  logic [0:0]    lit_recv_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_4 lit_recv_buffer
  (
    .clk            (    lit_recv_buffer__clk   ),
    .count          (   lit_recv_buffer__count  ),
    .reset          (   lit_recv_buffer__reset  ),
    .deq__en        (  lit_recv_buffer__deq__en ),
    .deq__rdy       ( lit_recv_buffer__deq__rdy ),
    .deq__ret       ( lit_recv_buffer__deq__ret ),
    .enq__en        (  lit_recv_buffer__enq__en ),
    .enq__msg       ( lit_recv_buffer__enq__msg ),
    .enq__rdy       ( lit_recv_buffer__enq__rdy )
  );

  logic [0:0]    size_addr_buffer__clk;
  logic [3:0]    size_addr_buffer__count;
  logic [0:0]    size_addr_buffer__reset;
  logic [0:0]    size_addr_buffer__deq__en;
  logic [0:0]    size_addr_buffer__deq__rdy;
  logic [95:0]   size_addr_buffer__deq__ret;
  logic [0:0]    size_addr_buffer__enq__en;
  logic [95:0]   size_addr_buffer__enq__msg;
  logic [0:0]    size_addr_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits96__num_entries_8 size_addr_buffer
  (
    .clk            (   size_addr_buffer__clk   ),
    .count          (  size_addr_buffer__count  ),
    .reset          (  size_addr_buffer__reset  ),
    .deq__en        ( size_addr_buffer__deq__en ),
    .deq__rdy       ( size_addr_buffer__deq__rdy ),
    .deq__ret       ( size_addr_buffer__deq__ret ),
    .enq__en        ( size_addr_buffer__enq__en ),
    .enq__msg       ( size_addr_buffer__enq__msg ),
    .enq__rdy       ( size_addr_buffer__enq__rdy )
  );

  logic [0:0]    temp_cr_q__clk;
  logic [0:0]    temp_cr_q__count;
  logic [0:0]    temp_cr_q__reset;
  logic [0:0]    temp_cr_q__deq__en;
  logic [0:0]    temp_cr_q__deq__rdy;
  logic [31:0]   temp_cr_q__deq__ret;
  logic [0:0]    temp_cr_q__enq__en;
  logic [31:0]   temp_cr_q__enq__msg;
  logic [0:0]    temp_cr_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_cr_q
  (
    .clk            (       temp_cr_q__clk      ),
    .count          (      temp_cr_q__count     ),
    .reset          (      temp_cr_q__reset     ),
    .deq__en        (     temp_cr_q__deq__en    ),
    .deq__rdy       (    temp_cr_q__deq__rdy    ),
    .deq__ret       (    temp_cr_q__deq__ret    ),
    .enq__en        (     temp_cr_q__enq__en    ),
    .enq__msg       (    temp_cr_q__enq__msg    ),
    .enq__rdy       (    temp_cr_q__enq__rdy    )
  );

  logic [0:0]    temp_value_q__clk;
  logic [0:0]    temp_value_q__count;
  logic [0:0]    temp_value_q__reset;
  logic [0:0]    temp_value_q__deq__en;
  logic [0:0]    temp_value_q__deq__rdy;
  logic [7:0]    temp_value_q__deq__ret;
  logic [0:0]    temp_value_q__enq__en;
  logic [7:0]    temp_value_q__enq__msg;
  logic [0:0]    temp_value_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits8__num_entries_1 temp_value_q
  (
    .clk            (     temp_value_q__clk     ),
    .count          (    temp_value_q__count    ),
    .reset          (    temp_value_q__reset    ),
    .deq__en        (   temp_value_q__deq__en   ),
    .deq__rdy       (   temp_value_q__deq__rdy  ),
    .deq__ret       (   temp_value_q__deq__ret  ),
    .enq__en        (   temp_value_q__enq__en   ),
    .enq__msg       (   temp_value_q__enq__msg  ),
    .enq__rdy       (   temp_value_q__enq__rdy  )
  );

  logic [0:0]    value_buffer__clk;
  logic [3:0]    value_buffer__count;
  logic [0:0]    value_buffer__reset;
  logic [0:0]    value_buffer__deq__en;
  logic [0:0]    value_buffer__deq__rdy;
  logic [39:0]   value_buffer__deq__ret;
  logic [0:0]    value_buffer__enq__en;
  logic [39:0]   value_buffer__enq__msg;
  logic [0:0]    value_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits40__num_entries_8 value_buffer
  (
    .clk            (     value_buffer__clk     ),
    .count          (    value_buffer__count    ),
    .reset          (    value_buffer__reset    ),
    .deq__en        (   value_buffer__deq__en   ),
    .deq__rdy       (   value_buffer__deq__rdy  ),
    .deq__ret       (   value_buffer__deq__ret  ),
    .enq__en        (   value_buffer__enq__en   ),
    .enq__msg       (   value_buffer__enq__msg  ),
    .enq__rdy       (   value_buffer__enq__rdy  )
  );

  logic [0:0]    watcher_buffer__clk;
  logic [3:0]    watcher_buffer__count;
  logic [0:0]    watcher_buffer__reset;
  logic [0:0]    watcher_buffer__deq__en;
  logic [0:0]    watcher_buffer__deq__rdy;
  logic [63:0]   watcher_buffer__deq__ret;
  logic [0:0]    watcher_buffer__enq__en;
  logic [63:0]   watcher_buffer__enq__msg;
  logic [0:0]    watcher_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits64__num_entries_8 watcher_buffer
  (
    .clk            (    watcher_buffer__clk    ),
    .count          (   watcher_buffer__count   ),
    .reset          (   watcher_buffer__reset   ),
    .deq__en        (  watcher_buffer__deq__en  ),
    .deq__rdy       (  watcher_buffer__deq__rdy ),
    .deq__ret       (  watcher_buffer__deq__ret ),
    .enq__en        (  watcher_buffer__enq__en  ),
    .enq__msg       (  watcher_buffer__enq__msg ),
    .enq__rdy       (  watcher_buffer__enq__rdy )
  );

  logic [0:0]    watcher_fetch_unit__clk;
  logic [0:0]    watcher_fetch_unit__reset;
  logic [0:0]    watcher_fetch_unit__addr_recv__en;
  logic [63:0]   watcher_fetch_unit__addr_recv__msg;
  logic [0:0]    watcher_fetch_unit__addr_recv__rdy;
  logic [0:0]    watcher_fetch_unit__mem_out__en;
  logic [143:0]  watcher_fetch_unit__mem_out__msg;
  logic [0:0]    watcher_fetch_unit__mem_out__rdy;
  logic [0:0]    watcher_fetch_unit__size_recv__en;
  logic [31:0]   watcher_fetch_unit__size_recv__msg;
  logic [0:0]    watcher_fetch_unit__size_recv__rdy;

  Sized_memory_sender__a3f39a6acc28812c watcher_fetch_unit
  (
    .clk            (  watcher_fetch_unit__clk  ),
    .reset          ( watcher_fetch_unit__reset ),
    .addr_recv__en  ( watcher_fetch_unit__addr_recv__en ),
    .addr_recv__msg ( watcher_fetch_unit__addr_recv__msg ),
    .addr_recv__rdy ( watcher_fetch_unit__addr_recv__rdy ),
    .mem_out__en    ( watcher_fetch_unit__mem_out__en ),
    .mem_out__msg   ( watcher_fetch_unit__mem_out__msg ),
    .mem_out__rdy   ( watcher_fetch_unit__mem_out__rdy ),
    .size_recv__en  ( watcher_fetch_unit__size_recv__en ),
    .size_recv__msg ( watcher_fetch_unit__size_recv__msg ),
    .size_recv__rdy ( watcher_fetch_unit__size_recv__rdy )
  );

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/watcher/watcher.py:50
  // @update
  // def comb():
  //     # send litral:
  //     s.temp_value_q.deq.en@=s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  //     s.temp_cr_q.deq.en@=s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  //     s.temp_cr_q.enq.msg@=s.watcher_buffer.deq.ret[32:64]
  //     s.temp_value_q.enq.en@=s.value_recv.en
  //     s.value_recv.rdy@=s.temp_value_q.enq.rdy
  //     s.temp_value_q.enq.msg@=s.value_recv.msg[24-8:24]
  // 
  //     s.watcher_buffer.enq.en@=s.watcher_recv.en
  //     s.watcher_recv.rdy@=s.watcher_buffer.enq.rdy
  //     s.watcher_buffer.enq.msg@=s.watcher_recv.msg[82-64:82]
  // 
  //     s.size_addr_buffer.enq.en@=s.lit_to_size_addr_mem_recv.en
  //     s.lit_to_size_addr_mem_recv.rdy @=s.size_addr_buffer.enq.rdy
  //     s.size_addr_buffer.enq.msg@=s.lit_to_size_addr_mem_recv.msg[114-96:114]
  // 
  //     s.size_addr_buffer.deq.en@=s.watcher_fetch_unit.size_recv.rdy & s.watcher_fetch_unit.addr_recv.rdy
  // 
  //     s.value_buffer.enq.msg@=concat(s.temp_value_q.deq.ret,
  //                                    s.temp_cr_q.deq.ret)
  //     s.value_buffer.enq.en@= s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  // 
  //     s.lit_to_size_addr_mem_send.en@=s.lit_to_size_addr_mem_send.rdy & s.lit_recv_buffer.deq.rdy
  //     s.lit_recv_buffer.deq.en@=s.lit_to_size_addr_mem_send.rdy & s.lit_recv_buffer.deq.rdy
  // 
  //     # TODO: set the message
  //     s.lit_to_size_addr_mem_send.msg@=concat(
  //         Bits12(0), Bits32(0), s.lit_recv_buffer.deq.ret, Bits100(0))
  // 
  //     s.watcher_fetch_unit.size_recv.en @=s.watcher_fetch_unit.size_recv.rdy & s.size_addr_buffer.deq.rdy
  //     s.watcher_fetch_unit.addr_recv.en @=s.watcher_fetch_unit.addr_recv.rdy & s.size_addr_buffer.deq.rdy
  //     s.watcher_fetch_unit.size_recv.msg@=s.size_addr_buffer.deq.ret[18:50]
  //     s.watcher_fetch_unit.addr_recv.msg@=s.size_addr_buffer.deq.ret[96-64:96]
  // 
  //     # send value request
  //     s.value_send.en@=s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  //     s.watcher_buffer.deq.en@=s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  //     s.temp_cr_q.enq.en@= s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  // 
  //     s.value_send.msg @= concat(Bits12(0), Bits32(0),
  //                                s.watcher_buffer.deq.ret[0:32], Bits10(0))
  // 
  //     s.temp_value_q.enq.en@= s.value_recv.en
  //     s.value_recv.rdy@=s.temp_value_q.enq.rdy
  //     s.temp_value_q.enq.msg@=s.value_recv.msg[16:24]
  // 
  //     s.value_buffer.deq.en@=((s.value_buffer.deq.ret[0:8] != 0) & s.value_buffer.deq.rdy &
  //                             s.cr_send_buffer.enq.rdy) | (s.value_buffer.deq.ret[0:8] == 0)
  //     s.cr_send_buffer.enq.en@= (
  //         s.value_buffer.deq.ret[0:8] != 0) & s.value_buffer.deq.rdy & s.cr_send_buffer.enq.rdy
  // 
  //     s.cr_send.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.deq.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.enq.msg@=s.value_buffer.deq.ret[8:40]
  // 
  //     s.cr_send.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.deq.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send.msg @=s.cr_send_buffer.deq.ret
  
  always_comb begin : comb
    temp_value_q__deq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    temp_cr_q__deq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    temp_cr_q__enq__msg = watcher_buffer__deq__ret[6'd63:6'd32];
    temp_value_q__enq__en = value_recv__en;
    value_recv__rdy = temp_value_q__enq__rdy;
    temp_value_q__enq__msg = value_recv__msg[5'd23:5'd24 - 5'd8];
    watcher_buffer__enq__en = watcher_recv__en;
    watcher_recv__rdy = watcher_buffer__enq__rdy;
    watcher_buffer__enq__msg = watcher_recv__msg[7'd81:7'd82 - 7'd64];
    size_addr_buffer__enq__en = lit_to_size_addr_mem_recv__en;
    lit_to_size_addr_mem_recv__rdy = size_addr_buffer__enq__rdy;
    size_addr_buffer__enq__msg = lit_to_size_addr_mem_recv__msg[7'd113:7'd114 - 7'd96];
    size_addr_buffer__deq__en = watcher_fetch_unit__size_recv__rdy & watcher_fetch_unit__addr_recv__rdy;
    value_buffer__enq__msg = { temp_value_q__deq__ret, temp_cr_q__deq__ret };
    value_buffer__enq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    lit_to_size_addr_mem_send__en = lit_to_size_addr_mem_send__rdy & lit_recv_buffer__deq__rdy;
    lit_recv_buffer__deq__en = lit_to_size_addr_mem_send__rdy & lit_recv_buffer__deq__rdy;
    lit_to_size_addr_mem_send__msg = { 12'd0, 32'd0, lit_recv_buffer__deq__ret, 100'd0 };
    watcher_fetch_unit__size_recv__en = watcher_fetch_unit__size_recv__rdy & size_addr_buffer__deq__rdy;
    watcher_fetch_unit__addr_recv__en = watcher_fetch_unit__addr_recv__rdy & size_addr_buffer__deq__rdy;
    watcher_fetch_unit__size_recv__msg = size_addr_buffer__deq__ret[7'd49:7'd18];
    watcher_fetch_unit__addr_recv__msg = size_addr_buffer__deq__ret[7'd95:7'd96 - 7'd64];
    value_send__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    watcher_buffer__deq__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    temp_cr_q__enq__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    value_send__msg = { 12'd0, 32'd0, watcher_buffer__deq__ret[6'd31:6'd0], 10'd0 };
    temp_value_q__enq__en = value_recv__en;
    value_recv__rdy = temp_value_q__enq__rdy;
    temp_value_q__enq__msg = value_recv__msg[5'd23:5'd16];
    value_buffer__deq__en = ( ( ( value_buffer__deq__ret[6'd7:6'd0] != 8'd0 ) & value_buffer__deq__rdy ) & cr_send_buffer__enq__rdy ) | ( value_buffer__deq__ret[6'd7:6'd0] == 8'd0 );
    cr_send_buffer__enq__en = ( ( value_buffer__deq__ret[6'd7:6'd0] != 8'd0 ) & value_buffer__deq__rdy ) & cr_send_buffer__enq__rdy;
    cr_send__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__deq__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__enq__msg = value_buffer__deq__ret[6'd39:6'd8];
    cr_send__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__deq__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send__msg = cr_send_buffer__deq__ret;
  end

  // Connections
  assign lit_recv_buffer__clk = clk;
  assign lit_recv_buffer__reset = reset;
  assign size_addr_buffer__clk = clk;
  assign size_addr_buffer__reset = reset;
  assign watcher_buffer__clk = clk;
  assign watcher_buffer__reset = reset;
  assign value_buffer__clk = clk;
  assign value_buffer__reset = reset;
  assign cr_send_buffer__clk = clk;
  assign cr_send_buffer__reset = reset;
  assign temp_cr_q__clk = clk;
  assign temp_cr_q__reset = reset;
  assign temp_value_q__clk = clk;
  assign temp_value_q__reset = reset;
  assign watcher_fetch_unit__clk = clk;
  assign watcher_fetch_unit__reset = reset;
  assign lit_recv_buffer__enq__en = from_trail_recv__en;
  assign lit_recv_buffer__enq__msg = from_trail_recv__msg;
  assign from_trail_recv__rdy = lit_recv_buffer__enq__rdy;
  assign watcher_send_mem_send__en = watcher_fetch_unit__mem_out__en;
  assign watcher_send_mem_send__msg = watcher_fetch_unit__mem_out__msg;
  assign watcher_fetch_unit__mem_out__rdy = watcher_send_mem_send__rdy;

endmodule


// PyMTL Component Sized_memory_sender Definition
// Full name: Sized_memory_sender__size_type_Bits32__addr_type_Bits64__item_size_64__mem_request_dest_57
// At /home/sjq/git/pymtl_project/satacc/utils/mem_oparator.py
module Sized_memory_sender__483b72ee9714d235
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  input  logic [0:0]    addr_recv__en,
  input  logic [63:0]   addr_recv__msg,
  output logic [0:0]    addr_recv__rdy,
  output logic [0:0]    mem_out__en,
  output logic [143:0]  mem_out__msg,
  input  logic [0:0]    mem_out__rdy,
  input  logic [0:0]    size_recv__en,
  input  logic [31:0]   size_recv__msg,
  output logic [0:0]    size_recv__rdy
);
  // Struct/Array ports of sub-components in the form of wires
  logic [63:0]   addr_data_mux__in_ [0:1];
  logic [0:0]    addr_en_mux__in_ [0:1];
  logic [31:0]   size_data_mux__in_ [0:1];
  logic [0:0]    size_en_mux__in_ [0:1];

  // Sub-component declarations
  logic [0:0]    addr_data_mux__clk;
  logic [63:0]   addr_data_mux__in___0;
  logic [63:0]   addr_data_mux__in___1;
  logic [63:0]   addr_data_mux__out;
  logic [0:0]    addr_data_mux__reset;
  logic [0:0]    addr_data_mux__sel;

  Mux__Type_Bits64__ninputs_2 addr_data_mux
  (
    .clk            (     addr_data_mux__clk    ),
    .in___0         (   addr_data_mux__in___0   ),
    .in___1         (   addr_data_mux__in___1   ),
    .out            (     addr_data_mux__out    ),
    .reset          (    addr_data_mux__reset   ),
    .sel            (     addr_data_mux__sel    )
  );

  logic [0:0]    addr_en_mux__clk;
  logic [0:0]    addr_en_mux__in___0;
  logic [0:0]    addr_en_mux__in___1;
  logic [0:0]    addr_en_mux__out;
  logic [0:0]    addr_en_mux__reset;
  logic [0:0]    addr_en_mux__sel;

  Mux__Type_Bits1__ninputs_2 addr_en_mux
  (
    .clk            (      addr_en_mux__clk     ),
    .in___0         (    addr_en_mux__in___0    ),
    .in___1         (    addr_en_mux__in___1    ),
    .out            (      addr_en_mux__out     ),
    .reset          (     addr_en_mux__reset    ),
    .sel            (      addr_en_mux__sel     )
  );

  logic [0:0]    addr_reg__clk;
  logic [0:0]    addr_reg__en;
  logic [63:0]   addr_reg__in_;
  logic [63:0]   addr_reg__out;
  logic [0:0]    addr_reg__reset;

  RegEnRst__Type_Bits64__reset_value_0 addr_reg
  (
    .clk            (       addr_reg__clk       ),
    .en             (        addr_reg__en       ),
    .in_            (       addr_reg__in_       ),
    .out            (       addr_reg__out       ),
    .reset          (      addr_reg__reset      )
  );

  logic [0:0]    size_data_mux__clk;
  logic [31:0]   size_data_mux__in___0;
  logic [31:0]   size_data_mux__in___1;
  logic [31:0]   size_data_mux__out;
  logic [0:0]    size_data_mux__reset;
  logic [0:0]    size_data_mux__sel;

  Mux__Type_Bits32__ninputs_2 size_data_mux
  (
    .clk            (     size_data_mux__clk    ),
    .in___0         (   size_data_mux__in___0   ),
    .in___1         (   size_data_mux__in___1   ),
    .out            (     size_data_mux__out    ),
    .reset          (    size_data_mux__reset   ),
    .sel            (     size_data_mux__sel    )
  );

  logic [0:0]    size_en_mux__clk;
  logic [0:0]    size_en_mux__in___0;
  logic [0:0]    size_en_mux__in___1;
  logic [0:0]    size_en_mux__out;
  logic [0:0]    size_en_mux__reset;
  logic [0:0]    size_en_mux__sel;

  Mux__Type_Bits1__ninputs_2 size_en_mux
  (
    .clk            (      size_en_mux__clk     ),
    .in___0         (    size_en_mux__in___0    ),
    .in___1         (    size_en_mux__in___1    ),
    .out            (      size_en_mux__out     ),
    .reset          (     size_en_mux__reset    ),
    .sel            (      size_en_mux__sel     )
  );

  logic [0:0]    size_reg__clk;
  logic [0:0]    size_reg__en;
  logic [31:0]   size_reg__in_;
  logic [31:0]   size_reg__out;
  logic [0:0]    size_reg__reset;

  RegEnRst__Type_Bits32__reset_value_0 size_reg
  (
    .clk            (       size_reg__clk       ),
    .en             (        size_reg__en       ),
    .in_            (       size_reg__in_       ),
    .out            (       size_reg__out       ),
    .reset          (      size_reg__reset      )
  );

  // Connect struct/array ports and their wire forms
  assign addr_data_mux__in___0 = addr_data_mux__in_[0];
  assign addr_data_mux__in___1 = addr_data_mux__in_[1];
  assign addr_en_mux__in___0 = addr_en_mux__in_[0];
  assign addr_en_mux__in___1 = addr_en_mux__in_[1];
  assign size_data_mux__in___0 = size_data_mux__in_[0];
  assign size_data_mux__in___1 = size_data_mux__in_[1];
  assign size_en_mux__in___0 = size_en_mux__in_[0];
  assign size_en_mux__in___1 = size_en_mux__in_[1];

  // Temporary wire definitions
  logic [143:0]  __tmpvar__comb_message;

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/utils/mem_oparator.py:46
  // @update
  // def comb():
  //     s.size_recv.rdy @= s.size_reg.out != 0
  //     s.addr_recv.rdy @= s.size_reg.out != 0
  // 
  //     # if the size is zero, listen to outsize sigal, else listen to my self
  //     s.size_en_mux.sel @= 0 if s.size_reg.out == 0 else 1
  //     s.size_data_mux.sel @=0 if s.size_reg.out == 0 else 1
  //     # build the request.
  //     message = req()
  // 
  //     s.mem_out.msg @= message
  //     s.size_data_mux.in_[1] @= s.size_data_mux.out - 1
  //     # addr will change every round
  //     s.addr_data_mux.in_[
  //         1]@=s.addr_reg.out + item_size  # addr offset
  // 
  //     if s.mem_out.rdy & (s.size_reg.out != 0):
  //         # send the request and deduce the size
  //         s.size_en_mux.in_[1] @= 1
  //         s.mem_out.en @=1
  //         s.addr_en_mux.in_[1]@=1
  // 
  //     else:
  //         s.size_en_mux.in_[1]@=0
  //         s.addr_en_mux.in_[1]@=0
  //         s.mem_out.en@=0
  
  always_comb begin : comb
    size_recv__rdy = size_reg__out != 32'd0;
    addr_recv__rdy = size_reg__out != 32'd0;
    size_en_mux__sel = ( size_reg__out == 32'd0 ) ? 1'd0 : 1'd1;
    size_data_mux__sel = ( size_reg__out == 32'd0 ) ? 1'd0 : 1'd1;
    __tmpvar__comb_message = 144'd0;
    mem_out__msg = __tmpvar__comb_message;
    size_data_mux__in_[1'd1] = size_data_mux__out - 32'd1;
    addr_data_mux__in_[1'd1] = addr_reg__out + 64'd64;
    if ( mem_out__rdy & ( size_reg__out != 32'd0 ) ) begin
      size_en_mux__in_[1'd1] = 1'd1;
      mem_out__en = 1'd1;
      addr_en_mux__in_[1'd1] = 1'd1;
    end
    else begin
      size_en_mux__in_[1'd1] = 1'd0;
      addr_en_mux__in_[1'd1] = 1'd0;
      mem_out__en = 1'd0;
    end
  end

  // Connections
  assign size_reg__clk = clk;
  assign size_reg__reset = reset;
  assign addr_reg__clk = clk;
  assign addr_reg__reset = reset;
  assign size_en_mux__clk = clk;
  assign size_en_mux__reset = reset;
  assign size_data_mux__clk = clk;
  assign size_data_mux__reset = reset;
  assign addr_en_mux__clk = clk;
  assign addr_en_mux__reset = reset;
  assign addr_data_mux__clk = clk;
  assign addr_data_mux__reset = reset;
  assign size_reg__en = size_en_mux__out;
  assign size_reg__in_ = size_data_mux__out;
  assign addr_reg__en = addr_en_mux__out;
  assign addr_reg__in_ = addr_data_mux__out;
  assign addr_en_mux__in_[0] = addr_recv__en;
  assign addr_data_mux__in_[0] = addr_recv__msg;
  assign size_en_mux__in_[0] = size_recv__en;
  assign size_data_mux__in_[0] = size_recv__msg;

endmodule


// PyMTL Component Watcher Definition
// At /home/sjq/git/pymtl_project/satacc/watcher/watcher.py
module Watcher__index_7
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  output logic [0:0]    cr_send__en,
  output logic [31:0]   cr_send__msg,
  input  logic [0:0]    cr_send__rdy,
  input  logic [0:0]    from_trail_recv__en,
  input  logic [31:0]   from_trail_recv__msg,
  output logic [0:0]    from_trail_recv__rdy,
  input  logic [0:0]    lit_to_size_addr_mem_recv__en,
  input  logic [113:0]  lit_to_size_addr_mem_recv__msg,
  output logic [0:0]    lit_to_size_addr_mem_recv__rdy,
  output logic [0:0]    lit_to_size_addr_mem_send__en,
  output logic [175:0]  lit_to_size_addr_mem_send__msg,
  input  logic [0:0]    lit_to_size_addr_mem_send__rdy,
  input  logic [0:0]    value_recv__en,
  input  logic [23:0]   value_recv__msg,
  output logic [0:0]    value_recv__rdy,
  output logic [0:0]    value_send__en,
  output logic [85:0]   value_send__msg,
  input  logic [0:0]    value_send__rdy,
  input  logic [0:0]    watcher_recv__en,
  input  logic [81:0]   watcher_recv__msg,
  output logic [0:0]    watcher_recv__rdy,
  output logic [0:0]    watcher_send_mem_send__en,
  output logic [143:0]  watcher_send_mem_send__msg,
  input  logic [0:0]    watcher_send_mem_send__rdy
);
  // Sub-component declarations
  logic [0:0]    cr_send_buffer__clk;
  logic [2:0]    cr_send_buffer__count;
  logic [0:0]    cr_send_buffer__reset;
  logic [0:0]    cr_send_buffer__deq__en;
  logic [0:0]    cr_send_buffer__deq__rdy;
  logic [31:0]   cr_send_buffer__deq__ret;
  logic [0:0]    cr_send_buffer__enq__en;
  logic [31:0]   cr_send_buffer__enq__msg;
  logic [0:0]    cr_send_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_4 cr_send_buffer
  (
    .clk            (    cr_send_buffer__clk    ),
    .count          (   cr_send_buffer__count   ),
    .reset          (   cr_send_buffer__reset   ),
    .deq__en        (  cr_send_buffer__deq__en  ),
    .deq__rdy       (  cr_send_buffer__deq__rdy ),
    .deq__ret       (  cr_send_buffer__deq__ret ),
    .enq__en        (  cr_send_buffer__enq__en  ),
    .enq__msg       (  cr_send_buffer__enq__msg ),
    .enq__rdy       (  cr_send_buffer__enq__rdy )
  );

  logic [0:0]    lit_recv_buffer__clk;
  logic [2:0]    lit_recv_buffer__count;
  logic [0:0]    lit_recv_buffer__reset;
  logic [0:0]    lit_recv_buffer__deq__en;
  logic [0:0]    lit_recv_buffer__deq__rdy;
  logic [31:0]   lit_recv_buffer__deq__ret;
  logic [0:0]    lit_recv_buffer__enq__en;
  logic [31:0]   lit_recv_buffer__enq__msg;
  logic [0:0]    lit_recv_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_4 lit_recv_buffer
  (
    .clk            (    lit_recv_buffer__clk   ),
    .count          (   lit_recv_buffer__count  ),
    .reset          (   lit_recv_buffer__reset  ),
    .deq__en        (  lit_recv_buffer__deq__en ),
    .deq__rdy       ( lit_recv_buffer__deq__rdy ),
    .deq__ret       ( lit_recv_buffer__deq__ret ),
    .enq__en        (  lit_recv_buffer__enq__en ),
    .enq__msg       ( lit_recv_buffer__enq__msg ),
    .enq__rdy       ( lit_recv_buffer__enq__rdy )
  );

  logic [0:0]    size_addr_buffer__clk;
  logic [3:0]    size_addr_buffer__count;
  logic [0:0]    size_addr_buffer__reset;
  logic [0:0]    size_addr_buffer__deq__en;
  logic [0:0]    size_addr_buffer__deq__rdy;
  logic [95:0]   size_addr_buffer__deq__ret;
  logic [0:0]    size_addr_buffer__enq__en;
  logic [95:0]   size_addr_buffer__enq__msg;
  logic [0:0]    size_addr_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits96__num_entries_8 size_addr_buffer
  (
    .clk            (   size_addr_buffer__clk   ),
    .count          (  size_addr_buffer__count  ),
    .reset          (  size_addr_buffer__reset  ),
    .deq__en        ( size_addr_buffer__deq__en ),
    .deq__rdy       ( size_addr_buffer__deq__rdy ),
    .deq__ret       ( size_addr_buffer__deq__ret ),
    .enq__en        ( size_addr_buffer__enq__en ),
    .enq__msg       ( size_addr_buffer__enq__msg ),
    .enq__rdy       ( size_addr_buffer__enq__rdy )
  );

  logic [0:0]    temp_cr_q__clk;
  logic [0:0]    temp_cr_q__count;
  logic [0:0]    temp_cr_q__reset;
  logic [0:0]    temp_cr_q__deq__en;
  logic [0:0]    temp_cr_q__deq__rdy;
  logic [31:0]   temp_cr_q__deq__ret;
  logic [0:0]    temp_cr_q__enq__en;
  logic [31:0]   temp_cr_q__enq__msg;
  logic [0:0]    temp_cr_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits32__num_entries_1 temp_cr_q
  (
    .clk            (       temp_cr_q__clk      ),
    .count          (      temp_cr_q__count     ),
    .reset          (      temp_cr_q__reset     ),
    .deq__en        (     temp_cr_q__deq__en    ),
    .deq__rdy       (    temp_cr_q__deq__rdy    ),
    .deq__ret       (    temp_cr_q__deq__ret    ),
    .enq__en        (     temp_cr_q__enq__en    ),
    .enq__msg       (    temp_cr_q__enq__msg    ),
    .enq__rdy       (    temp_cr_q__enq__rdy    )
  );

  logic [0:0]    temp_value_q__clk;
  logic [0:0]    temp_value_q__count;
  logic [0:0]    temp_value_q__reset;
  logic [0:0]    temp_value_q__deq__en;
  logic [0:0]    temp_value_q__deq__rdy;
  logic [7:0]    temp_value_q__deq__ret;
  logic [0:0]    temp_value_q__enq__en;
  logic [7:0]    temp_value_q__enq__msg;
  logic [0:0]    temp_value_q__enq__rdy;

  BypassQueueRTL__EntryType_Bits8__num_entries_1 temp_value_q
  (
    .clk            (     temp_value_q__clk     ),
    .count          (    temp_value_q__count    ),
    .reset          (    temp_value_q__reset    ),
    .deq__en        (   temp_value_q__deq__en   ),
    .deq__rdy       (   temp_value_q__deq__rdy  ),
    .deq__ret       (   temp_value_q__deq__ret  ),
    .enq__en        (   temp_value_q__enq__en   ),
    .enq__msg       (   temp_value_q__enq__msg  ),
    .enq__rdy       (   temp_value_q__enq__rdy  )
  );

  logic [0:0]    value_buffer__clk;
  logic [3:0]    value_buffer__count;
  logic [0:0]    value_buffer__reset;
  logic [0:0]    value_buffer__deq__en;
  logic [0:0]    value_buffer__deq__rdy;
  logic [39:0]   value_buffer__deq__ret;
  logic [0:0]    value_buffer__enq__en;
  logic [39:0]   value_buffer__enq__msg;
  logic [0:0]    value_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits40__num_entries_8 value_buffer
  (
    .clk            (     value_buffer__clk     ),
    .count          (    value_buffer__count    ),
    .reset          (    value_buffer__reset    ),
    .deq__en        (   value_buffer__deq__en   ),
    .deq__rdy       (   value_buffer__deq__rdy  ),
    .deq__ret       (   value_buffer__deq__ret  ),
    .enq__en        (   value_buffer__enq__en   ),
    .enq__msg       (   value_buffer__enq__msg  ),
    .enq__rdy       (   value_buffer__enq__rdy  )
  );

  logic [0:0]    watcher_buffer__clk;
  logic [3:0]    watcher_buffer__count;
  logic [0:0]    watcher_buffer__reset;
  logic [0:0]    watcher_buffer__deq__en;
  logic [0:0]    watcher_buffer__deq__rdy;
  logic [63:0]   watcher_buffer__deq__ret;
  logic [0:0]    watcher_buffer__enq__en;
  logic [63:0]   watcher_buffer__enq__msg;
  logic [0:0]    watcher_buffer__enq__rdy;

  PipeQueueRTL__EntryType_Bits64__num_entries_8 watcher_buffer
  (
    .clk            (    watcher_buffer__clk    ),
    .count          (   watcher_buffer__count   ),
    .reset          (   watcher_buffer__reset   ),
    .deq__en        (  watcher_buffer__deq__en  ),
    .deq__rdy       (  watcher_buffer__deq__rdy ),
    .deq__ret       (  watcher_buffer__deq__ret ),
    .enq__en        (  watcher_buffer__enq__en  ),
    .enq__msg       (  watcher_buffer__enq__msg ),
    .enq__rdy       (  watcher_buffer__enq__rdy )
  );

  logic [0:0]    watcher_fetch_unit__clk;
  logic [0:0]    watcher_fetch_unit__reset;
  logic [0:0]    watcher_fetch_unit__addr_recv__en;
  logic [63:0]   watcher_fetch_unit__addr_recv__msg;
  logic [0:0]    watcher_fetch_unit__addr_recv__rdy;
  logic [0:0]    watcher_fetch_unit__mem_out__en;
  logic [143:0]  watcher_fetch_unit__mem_out__msg;
  logic [0:0]    watcher_fetch_unit__mem_out__rdy;
  logic [0:0]    watcher_fetch_unit__size_recv__en;
  logic [31:0]   watcher_fetch_unit__size_recv__msg;
  logic [0:0]    watcher_fetch_unit__size_recv__rdy;

  Sized_memory_sender__483b72ee9714d235 watcher_fetch_unit
  (
    .clk            (  watcher_fetch_unit__clk  ),
    .reset          ( watcher_fetch_unit__reset ),
    .addr_recv__en  ( watcher_fetch_unit__addr_recv__en ),
    .addr_recv__msg ( watcher_fetch_unit__addr_recv__msg ),
    .addr_recv__rdy ( watcher_fetch_unit__addr_recv__rdy ),
    .mem_out__en    ( watcher_fetch_unit__mem_out__en ),
    .mem_out__msg   ( watcher_fetch_unit__mem_out__msg ),
    .mem_out__rdy   ( watcher_fetch_unit__mem_out__rdy ),
    .size_recv__en  ( watcher_fetch_unit__size_recv__en ),
    .size_recv__msg ( watcher_fetch_unit__size_recv__msg ),
    .size_recv__rdy ( watcher_fetch_unit__size_recv__rdy )
  );

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_project/satacc/watcher/watcher.py:50
  // @update
  // def comb():
  //     # send litral:
  //     s.temp_value_q.deq.en@=s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  //     s.temp_cr_q.deq.en@=s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  //     s.temp_cr_q.enq.msg@=s.watcher_buffer.deq.ret[32:64]
  //     s.temp_value_q.enq.en@=s.value_recv.en
  //     s.value_recv.rdy@=s.temp_value_q.enq.rdy
  //     s.temp_value_q.enq.msg@=s.value_recv.msg[24-8:24]
  // 
  //     s.watcher_buffer.enq.en@=s.watcher_recv.en
  //     s.watcher_recv.rdy@=s.watcher_buffer.enq.rdy
  //     s.watcher_buffer.enq.msg@=s.watcher_recv.msg[82-64:82]
  // 
  //     s.size_addr_buffer.enq.en@=s.lit_to_size_addr_mem_recv.en
  //     s.lit_to_size_addr_mem_recv.rdy @=s.size_addr_buffer.enq.rdy
  //     s.size_addr_buffer.enq.msg@=s.lit_to_size_addr_mem_recv.msg[114-96:114]
  // 
  //     s.size_addr_buffer.deq.en@=s.watcher_fetch_unit.size_recv.rdy & s.watcher_fetch_unit.addr_recv.rdy
  // 
  //     s.value_buffer.enq.msg@=concat(s.temp_value_q.deq.ret,
  //                                    s.temp_cr_q.deq.ret)
  //     s.value_buffer.enq.en@= s.temp_value_q.deq.rdy & s.temp_cr_q.deq.rdy & s.value_buffer.enq.rdy
  // 
  //     s.lit_to_size_addr_mem_send.en@=s.lit_to_size_addr_mem_send.rdy & s.lit_recv_buffer.deq.rdy
  //     s.lit_recv_buffer.deq.en@=s.lit_to_size_addr_mem_send.rdy & s.lit_recv_buffer.deq.rdy
  // 
  //     # TODO: set the message
  //     s.lit_to_size_addr_mem_send.msg@=concat(
  //         Bits12(0), Bits32(0), s.lit_recv_buffer.deq.ret, Bits100(0))
  // 
  //     s.watcher_fetch_unit.size_recv.en @=s.watcher_fetch_unit.size_recv.rdy & s.size_addr_buffer.deq.rdy
  //     s.watcher_fetch_unit.addr_recv.en @=s.watcher_fetch_unit.addr_recv.rdy & s.size_addr_buffer.deq.rdy
  //     s.watcher_fetch_unit.size_recv.msg@=s.size_addr_buffer.deq.ret[18:50]
  //     s.watcher_fetch_unit.addr_recv.msg@=s.size_addr_buffer.deq.ret[96-64:96]
  // 
  //     # send value request
  //     s.value_send.en@=s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  //     s.watcher_buffer.deq.en@=s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  //     s.temp_cr_q.enq.en@= s.watcher_buffer.deq.rdy & s.value_send.rdy & s.temp_cr_q.enq.rdy & s.temp_value_q.enq.rdy
  // 
  //     s.value_send.msg @= concat(Bits12(0), Bits32(0),
  //                                s.watcher_buffer.deq.ret[0:32], Bits10(0))
  // 
  //     s.temp_value_q.enq.en@= s.value_recv.en
  //     s.value_recv.rdy@=s.temp_value_q.enq.rdy
  //     s.temp_value_q.enq.msg@=s.value_recv.msg[16:24]
  // 
  //     s.value_buffer.deq.en@=((s.value_buffer.deq.ret[0:8] != 0) & s.value_buffer.deq.rdy &
  //                             s.cr_send_buffer.enq.rdy) | (s.value_buffer.deq.ret[0:8] == 0)
  //     s.cr_send_buffer.enq.en@= (
  //         s.value_buffer.deq.ret[0:8] != 0) & s.value_buffer.deq.rdy & s.cr_send_buffer.enq.rdy
  // 
  //     s.cr_send.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.deq.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.enq.msg@=s.value_buffer.deq.ret[8:40]
  // 
  //     s.cr_send.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send_buffer.deq.en@=s.cr_send.rdy & s.cr_send_buffer.deq.rdy
  //     s.cr_send.msg @=s.cr_send_buffer.deq.ret
  
  always_comb begin : comb
    temp_value_q__deq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    temp_cr_q__deq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    temp_cr_q__enq__msg = watcher_buffer__deq__ret[6'd63:6'd32];
    temp_value_q__enq__en = value_recv__en;
    value_recv__rdy = temp_value_q__enq__rdy;
    temp_value_q__enq__msg = value_recv__msg[5'd23:5'd24 - 5'd8];
    watcher_buffer__enq__en = watcher_recv__en;
    watcher_recv__rdy = watcher_buffer__enq__rdy;
    watcher_buffer__enq__msg = watcher_recv__msg[7'd81:7'd82 - 7'd64];
    size_addr_buffer__enq__en = lit_to_size_addr_mem_recv__en;
    lit_to_size_addr_mem_recv__rdy = size_addr_buffer__enq__rdy;
    size_addr_buffer__enq__msg = lit_to_size_addr_mem_recv__msg[7'd113:7'd114 - 7'd96];
    size_addr_buffer__deq__en = watcher_fetch_unit__size_recv__rdy & watcher_fetch_unit__addr_recv__rdy;
    value_buffer__enq__msg = { temp_value_q__deq__ret, temp_cr_q__deq__ret };
    value_buffer__enq__en = ( temp_value_q__deq__rdy & temp_cr_q__deq__rdy ) & value_buffer__enq__rdy;
    lit_to_size_addr_mem_send__en = lit_to_size_addr_mem_send__rdy & lit_recv_buffer__deq__rdy;
    lit_recv_buffer__deq__en = lit_to_size_addr_mem_send__rdy & lit_recv_buffer__deq__rdy;
    lit_to_size_addr_mem_send__msg = { 12'd0, 32'd0, lit_recv_buffer__deq__ret, 100'd0 };
    watcher_fetch_unit__size_recv__en = watcher_fetch_unit__size_recv__rdy & size_addr_buffer__deq__rdy;
    watcher_fetch_unit__addr_recv__en = watcher_fetch_unit__addr_recv__rdy & size_addr_buffer__deq__rdy;
    watcher_fetch_unit__size_recv__msg = size_addr_buffer__deq__ret[7'd49:7'd18];
    watcher_fetch_unit__addr_recv__msg = size_addr_buffer__deq__ret[7'd95:7'd96 - 7'd64];
    value_send__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    watcher_buffer__deq__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    temp_cr_q__enq__en = ( ( watcher_buffer__deq__rdy & value_send__rdy ) & temp_cr_q__enq__rdy ) & temp_value_q__enq__rdy;
    value_send__msg = { 12'd0, 32'd0, watcher_buffer__deq__ret[6'd31:6'd0], 10'd0 };
    temp_value_q__enq__en = value_recv__en;
    value_recv__rdy = temp_value_q__enq__rdy;
    temp_value_q__enq__msg = value_recv__msg[5'd23:5'd16];
    value_buffer__deq__en = ( ( ( value_buffer__deq__ret[6'd7:6'd0] != 8'd0 ) & value_buffer__deq__rdy ) & cr_send_buffer__enq__rdy ) | ( value_buffer__deq__ret[6'd7:6'd0] == 8'd0 );
    cr_send_buffer__enq__en = ( ( value_buffer__deq__ret[6'd7:6'd0] != 8'd0 ) & value_buffer__deq__rdy ) & cr_send_buffer__enq__rdy;
    cr_send__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__deq__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__enq__msg = value_buffer__deq__ret[6'd39:6'd8];
    cr_send__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send_buffer__deq__en = cr_send__rdy & cr_send_buffer__deq__rdy;
    cr_send__msg = cr_send_buffer__deq__ret;
  end

  // Connections
  assign lit_recv_buffer__clk = clk;
  assign lit_recv_buffer__reset = reset;
  assign size_addr_buffer__clk = clk;
  assign size_addr_buffer__reset = reset;
  assign watcher_buffer__clk = clk;
  assign watcher_buffer__reset = reset;
  assign value_buffer__clk = clk;
  assign value_buffer__reset = reset;
  assign cr_send_buffer__clk = clk;
  assign cr_send_buffer__reset = reset;
  assign temp_cr_q__clk = clk;
  assign temp_cr_q__reset = reset;
  assign temp_value_q__clk = clk;
  assign temp_value_q__reset = reset;
  assign watcher_fetch_unit__clk = clk;
  assign watcher_fetch_unit__reset = reset;
  assign lit_recv_buffer__enq__en = from_trail_recv__en;
  assign lit_recv_buffer__enq__msg = from_trail_recv__msg;
  assign from_trail_recv__rdy = lit_recv_buffer__enq__rdy;
  assign watcher_send_mem_send__en = watcher_fetch_unit__mem_out__en;
  assign watcher_send_mem_send__msg = watcher_fetch_unit__mem_out__msg;
  assign watcher_fetch_unit__mem_out__rdy = watcher_send_mem_send__rdy;

endmodule


// PyMTL Component Acc Definition
// At /home/sjq/git/pymtl_project/satacc/acc.py
module Acc_noparam
(
  output logic [0:0]    clause_confs__0,
  output logic [0:0]    clause_confs__1,
  output logic [0:0]    clause_confs__2,
  output logic [0:0]    clause_confs__3,
  output logic [0:0]    clause_confs__4,
  output logic [0:0]    clause_confs__5,
  output logic [0:0]    clause_confs__6,
  output logic [0:0]    clause_confs__7,
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  input  logic [0:0]    clause_fetcher_mem_ins__0__en,
  input  logic [0:0]    clause_fetcher_mem_ins__1__en,
  input  logic [0:0]    clause_fetcher_mem_ins__2__en,
  input  logic [0:0]    clause_fetcher_mem_ins__3__en,
  input  logic [0:0]    clause_fetcher_mem_ins__4__en,
  input  logic [0:0]    clause_fetcher_mem_ins__5__en,
  input  logic [0:0]    clause_fetcher_mem_ins__6__en,
  input  logic [0:0]    clause_fetcher_mem_ins__7__en,
  input  logic [80:0]   clause_fetcher_mem_ins__0__msg,
  input  logic [80:0]   clause_fetcher_mem_ins__1__msg,
  input  logic [80:0]   clause_fetcher_mem_ins__2__msg,
  input  logic [80:0]   clause_fetcher_mem_ins__3__msg,
  input  logic [80:0]   clause_fetcher_mem_ins__4__msg,
  input  logic [80:0]   clause_fetcher_mem_ins__5__msg,
  input  logic [80:0]   clause_fetcher_mem_ins__6__msg,
  input  logic [80:0]   clause_fetcher_mem_ins__7__msg,
  output logic [0:0]    clause_fetcher_mem_ins__0__rdy,
  output logic [0:0]    clause_fetcher_mem_ins__1__rdy,
  output logic [0:0]    clause_fetcher_mem_ins__2__rdy,
  output logic [0:0]    clause_fetcher_mem_ins__3__rdy,
  output logic [0:0]    clause_fetcher_mem_ins__4__rdy,
  output logic [0:0]    clause_fetcher_mem_ins__5__rdy,
  output logic [0:0]    clause_fetcher_mem_ins__6__rdy,
  output logic [0:0]    clause_fetcher_mem_ins__7__rdy,
  output logic [0:0]    clause_fetcher_mem_outs__0__en,
  output logic [0:0]    clause_fetcher_mem_outs__1__en,
  output logic [0:0]    clause_fetcher_mem_outs__2__en,
  output logic [0:0]    clause_fetcher_mem_outs__3__en,
  output logic [0:0]    clause_fetcher_mem_outs__4__en,
  output logic [0:0]    clause_fetcher_mem_outs__5__en,
  output logic [0:0]    clause_fetcher_mem_outs__6__en,
  output logic [0:0]    clause_fetcher_mem_outs__7__en,
  output logic [152:0]  clause_fetcher_mem_outs__0__msg,
  output logic [152:0]  clause_fetcher_mem_outs__1__msg,
  output logic [152:0]  clause_fetcher_mem_outs__2__msg,
  output logic [152:0]  clause_fetcher_mem_outs__3__msg,
  output logic [152:0]  clause_fetcher_mem_outs__4__msg,
  output logic [152:0]  clause_fetcher_mem_outs__5__msg,
  output logic [152:0]  clause_fetcher_mem_outs__6__msg,
  output logic [152:0]  clause_fetcher_mem_outs__7__msg,
  input  logic [0:0]    clause_fetcher_mem_outs__0__rdy,
  input  logic [0:0]    clause_fetcher_mem_outs__1__rdy,
  input  logic [0:0]    clause_fetcher_mem_outs__2__rdy,
  input  logic [0:0]    clause_fetcher_mem_outs__3__rdy,
  input  logic [0:0]    clause_fetcher_mem_outs__4__rdy,
  input  logic [0:0]    clause_fetcher_mem_outs__5__rdy,
  input  logic [0:0]    clause_fetcher_mem_outs__6__rdy,
  input  logic [0:0]    clause_fetcher_mem_outs__7__rdy,
  input  logic [0:0]    clause_size_mem_recvs__0__en,
  input  logic [0:0]    clause_size_mem_recvs__1__en,
  input  logic [0:0]    clause_size_mem_recvs__2__en,
  input  logic [0:0]    clause_size_mem_recvs__3__en,
  input  logic [0:0]    clause_size_mem_recvs__4__en,
  input  logic [0:0]    clause_size_mem_recvs__5__en,
  input  logic [0:0]    clause_size_mem_recvs__6__en,
  input  logic [0:0]    clause_size_mem_recvs__7__en,
  input  logic [47:0]   clause_size_mem_recvs__0__msg,
  input  logic [47:0]   clause_size_mem_recvs__1__msg,
  input  logic [47:0]   clause_size_mem_recvs__2__msg,
  input  logic [47:0]   clause_size_mem_recvs__3__msg,
  input  logic [47:0]   clause_size_mem_recvs__4__msg,
  input  logic [47:0]   clause_size_mem_recvs__5__msg,
  input  logic [47:0]   clause_size_mem_recvs__6__msg,
  input  logic [47:0]   clause_size_mem_recvs__7__msg,
  output logic [0:0]    clause_size_mem_recvs__0__rdy,
  output logic [0:0]    clause_size_mem_recvs__1__rdy,
  output logic [0:0]    clause_size_mem_recvs__2__rdy,
  output logic [0:0]    clause_size_mem_recvs__3__rdy,
  output logic [0:0]    clause_size_mem_recvs__4__rdy,
  output logic [0:0]    clause_size_mem_recvs__5__rdy,
  output logic [0:0]    clause_size_mem_recvs__6__rdy,
  output logic [0:0]    clause_size_mem_recvs__7__rdy,
  output logic [0:0]    clause_size_mem_sends__0__en,
  output logic [0:0]    clause_size_mem_sends__1__en,
  output logic [0:0]    clause_size_mem_sends__2__en,
  output logic [0:0]    clause_size_mem_sends__3__en,
  output logic [0:0]    clause_size_mem_sends__4__en,
  output logic [0:0]    clause_size_mem_sends__5__en,
  output logic [0:0]    clause_size_mem_sends__6__en,
  output logic [0:0]    clause_size_mem_sends__7__en,
  output logic [109:0]  clause_size_mem_sends__0__msg,
  output logic [109:0]  clause_size_mem_sends__1__msg,
  output logic [109:0]  clause_size_mem_sends__2__msg,
  output logic [109:0]  clause_size_mem_sends__3__msg,
  output logic [109:0]  clause_size_mem_sends__4__msg,
  output logic [109:0]  clause_size_mem_sends__5__msg,
  output logic [109:0]  clause_size_mem_sends__6__msg,
  output logic [109:0]  clause_size_mem_sends__7__msg,
  input  logic [0:0]    clause_size_mem_sends__0__rdy,
  input  logic [0:0]    clause_size_mem_sends__1__rdy,
  input  logic [0:0]    clause_size_mem_sends__2__rdy,
  input  logic [0:0]    clause_size_mem_sends__3__rdy,
  input  logic [0:0]    clause_size_mem_sends__4__rdy,
  input  logic [0:0]    clause_size_mem_sends__5__rdy,
  input  logic [0:0]    clause_size_mem_sends__6__rdy,
  input  logic [0:0]    clause_size_mem_sends__7__rdy,
  input  logic [0:0]    clause_value_mem_recvs__0__en,
  input  logic [0:0]    clause_value_mem_recvs__1__en,
  input  logic [0:0]    clause_value_mem_recvs__2__en,
  input  logic [0:0]    clause_value_mem_recvs__3__en,
  input  logic [0:0]    clause_value_mem_recvs__4__en,
  input  logic [0:0]    clause_value_mem_recvs__5__en,
  input  logic [0:0]    clause_value_mem_recvs__6__en,
  input  logic [0:0]    clause_value_mem_recvs__7__en,
  input  logic [16:0]   clause_value_mem_recvs__0__msg,
  input  logic [16:0]   clause_value_mem_recvs__1__msg,
  input  logic [16:0]   clause_value_mem_recvs__2__msg,
  input  logic [16:0]   clause_value_mem_recvs__3__msg,
  input  logic [16:0]   clause_value_mem_recvs__4__msg,
  input  logic [16:0]   clause_value_mem_recvs__5__msg,
  input  logic [16:0]   clause_value_mem_recvs__6__msg,
  input  logic [16:0]   clause_value_mem_recvs__7__msg,
  output logic [0:0]    clause_value_mem_recvs__0__rdy,
  output logic [0:0]    clause_value_mem_recvs__1__rdy,
  output logic [0:0]    clause_value_mem_recvs__2__rdy,
  output logic [0:0]    clause_value_mem_recvs__3__rdy,
  output logic [0:0]    clause_value_mem_recvs__4__rdy,
  output logic [0:0]    clause_value_mem_recvs__5__rdy,
  output logic [0:0]    clause_value_mem_recvs__6__rdy,
  output logic [0:0]    clause_value_mem_recvs__7__rdy,
  output logic [0:0]    clause_value_mem_sends__0__en,
  output logic [0:0]    clause_value_mem_sends__1__en,
  output logic [0:0]    clause_value_mem_sends__2__en,
  output logic [0:0]    clause_value_mem_sends__3__en,
  output logic [0:0]    clause_value_mem_sends__4__en,
  output logic [0:0]    clause_value_mem_sends__5__en,
  output logic [0:0]    clause_value_mem_sends__6__en,
  output logic [0:0]    clause_value_mem_sends__7__en,
  output logic [78:0]   clause_value_mem_sends__0__msg,
  output logic [78:0]   clause_value_mem_sends__1__msg,
  output logic [78:0]   clause_value_mem_sends__2__msg,
  output logic [78:0]   clause_value_mem_sends__3__msg,
  output logic [78:0]   clause_value_mem_sends__4__msg,
  output logic [78:0]   clause_value_mem_sends__5__msg,
  output logic [78:0]   clause_value_mem_sends__6__msg,
  output logic [78:0]   clause_value_mem_sends__7__msg,
  input  logic [0:0]    clause_value_mem_sends__0__rdy,
  input  logic [0:0]    clause_value_mem_sends__1__rdy,
  input  logic [0:0]    clause_value_mem_sends__2__rdy,
  input  logic [0:0]    clause_value_mem_sends__3__rdy,
  input  logic [0:0]    clause_value_mem_sends__4__rdy,
  input  logic [0:0]    clause_value_mem_sends__5__rdy,
  input  logic [0:0]    clause_value_mem_sends__6__rdy,
  input  logic [0:0]    clause_value_mem_sends__7__rdy,
  input  logic [0:0]    trail_input_ifc__en,
  input  logic [31:0]   trail_input_ifc__msg,
  output logic [0:0]    trail_input_ifc__rdy,
  input  logic [0:0]    watcher_lit_to_size_addr_mem_recvs__0__en,
  input  logic [0:0]    watcher_lit_to_size_addr_mem_recvs__1__en,
  input  logic [0:0]    watcher_lit_to_size_addr_mem_recvs__2__en,
  input  logic [0:0]    watcher_lit_to_size_addr_mem_recvs__3__en,
  input  logic [0:0]    watcher_lit_to_size_addr_mem_recvs__4__en,
  input  logic [0:0]    watcher_lit_to_size_addr_mem_recvs__5__en,
  input  logic [0:0]    watcher_lit_to_size_addr_mem_recvs__6__en,
  input  logic [0:0]    watcher_lit_to_size_addr_mem_recvs__7__en,
  input  logic [113:0]  watcher_lit_to_size_addr_mem_recvs__0__msg,
  input  logic [113:0]  watcher_lit_to_size_addr_mem_recvs__1__msg,
  input  logic [113:0]  watcher_lit_to_size_addr_mem_recvs__2__msg,
  input  logic [113:0]  watcher_lit_to_size_addr_mem_recvs__3__msg,
  input  logic [113:0]  watcher_lit_to_size_addr_mem_recvs__4__msg,
  input  logic [113:0]  watcher_lit_to_size_addr_mem_recvs__5__msg,
  input  logic [113:0]  watcher_lit_to_size_addr_mem_recvs__6__msg,
  input  logic [113:0]  watcher_lit_to_size_addr_mem_recvs__7__msg,
  output logic [0:0]    watcher_lit_to_size_addr_mem_recvs__0__rdy,
  output logic [0:0]    watcher_lit_to_size_addr_mem_recvs__1__rdy,
  output logic [0:0]    watcher_lit_to_size_addr_mem_recvs__2__rdy,
  output logic [0:0]    watcher_lit_to_size_addr_mem_recvs__3__rdy,
  output logic [0:0]    watcher_lit_to_size_addr_mem_recvs__4__rdy,
  output logic [0:0]    watcher_lit_to_size_addr_mem_recvs__5__rdy,
  output logic [0:0]    watcher_lit_to_size_addr_mem_recvs__6__rdy,
  output logic [0:0]    watcher_lit_to_size_addr_mem_recvs__7__rdy,
  output logic [0:0]    watcher_lit_to_size_addr_mem_sends__0__en,
  output logic [0:0]    watcher_lit_to_size_addr_mem_sends__1__en,
  output logic [0:0]    watcher_lit_to_size_addr_mem_sends__2__en,
  output logic [0:0]    watcher_lit_to_size_addr_mem_sends__3__en,
  output logic [0:0]    watcher_lit_to_size_addr_mem_sends__4__en,
  output logic [0:0]    watcher_lit_to_size_addr_mem_sends__5__en,
  output logic [0:0]    watcher_lit_to_size_addr_mem_sends__6__en,
  output logic [0:0]    watcher_lit_to_size_addr_mem_sends__7__en,
  output logic [175:0]  watcher_lit_to_size_addr_mem_sends__0__msg,
  output logic [175:0]  watcher_lit_to_size_addr_mem_sends__1__msg,
  output logic [175:0]  watcher_lit_to_size_addr_mem_sends__2__msg,
  output logic [175:0]  watcher_lit_to_size_addr_mem_sends__3__msg,
  output logic [175:0]  watcher_lit_to_size_addr_mem_sends__4__msg,
  output logic [175:0]  watcher_lit_to_size_addr_mem_sends__5__msg,
  output logic [175:0]  watcher_lit_to_size_addr_mem_sends__6__msg,
  output logic [175:0]  watcher_lit_to_size_addr_mem_sends__7__msg,
  input  logic [0:0]    watcher_lit_to_size_addr_mem_sends__0__rdy,
  input  logic [0:0]    watcher_lit_to_size_addr_mem_sends__1__rdy,
  input  logic [0:0]    watcher_lit_to_size_addr_mem_sends__2__rdy,
  input  logic [0:0]    watcher_lit_to_size_addr_mem_sends__3__rdy,
  input  logic [0:0]    watcher_lit_to_size_addr_mem_sends__4__rdy,
  input  logic [0:0]    watcher_lit_to_size_addr_mem_sends__5__rdy,
  input  logic [0:0]    watcher_lit_to_size_addr_mem_sends__6__rdy,
  input  logic [0:0]    watcher_lit_to_size_addr_mem_sends__7__rdy,
  input  logic [0:0]    watcher_value_recvs__0__en,
  input  logic [0:0]    watcher_value_recvs__1__en,
  input  logic [0:0]    watcher_value_recvs__2__en,
  input  logic [0:0]    watcher_value_recvs__3__en,
  input  logic [0:0]    watcher_value_recvs__4__en,
  input  logic [0:0]    watcher_value_recvs__5__en,
  input  logic [0:0]    watcher_value_recvs__6__en,
  input  logic [0:0]    watcher_value_recvs__7__en,
  input  logic [23:0]   watcher_value_recvs__0__msg,
  input  logic [23:0]   watcher_value_recvs__1__msg,
  input  logic [23:0]   watcher_value_recvs__2__msg,
  input  logic [23:0]   watcher_value_recvs__3__msg,
  input  logic [23:0]   watcher_value_recvs__4__msg,
  input  logic [23:0]   watcher_value_recvs__5__msg,
  input  logic [23:0]   watcher_value_recvs__6__msg,
  input  logic [23:0]   watcher_value_recvs__7__msg,
  output logic [0:0]    watcher_value_recvs__0__rdy,
  output logic [0:0]    watcher_value_recvs__1__rdy,
  output logic [0:0]    watcher_value_recvs__2__rdy,
  output logic [0:0]    watcher_value_recvs__3__rdy,
  output logic [0:0]    watcher_value_recvs__4__rdy,
  output logic [0:0]    watcher_value_recvs__5__rdy,
  output logic [0:0]    watcher_value_recvs__6__rdy,
  output logic [0:0]    watcher_value_recvs__7__rdy,
  output logic [0:0]    watcher_value_sends__0__en,
  output logic [0:0]    watcher_value_sends__1__en,
  output logic [0:0]    watcher_value_sends__2__en,
  output logic [0:0]    watcher_value_sends__3__en,
  output logic [0:0]    watcher_value_sends__4__en,
  output logic [0:0]    watcher_value_sends__5__en,
  output logic [0:0]    watcher_value_sends__6__en,
  output logic [0:0]    watcher_value_sends__7__en,
  output logic [85:0]   watcher_value_sends__0__msg,
  output logic [85:0]   watcher_value_sends__1__msg,
  output logic [85:0]   watcher_value_sends__2__msg,
  output logic [85:0]   watcher_value_sends__3__msg,
  output logic [85:0]   watcher_value_sends__4__msg,
  output logic [85:0]   watcher_value_sends__5__msg,
  output logic [85:0]   watcher_value_sends__6__msg,
  output logic [85:0]   watcher_value_sends__7__msg,
  input  logic [0:0]    watcher_value_sends__0__rdy,
  input  logic [0:0]    watcher_value_sends__1__rdy,
  input  logic [0:0]    watcher_value_sends__2__rdy,
  input  logic [0:0]    watcher_value_sends__3__rdy,
  input  logic [0:0]    watcher_value_sends__4__rdy,
  input  logic [0:0]    watcher_value_sends__5__rdy,
  input  logic [0:0]    watcher_value_sends__6__rdy,
  input  logic [0:0]    watcher_value_sends__7__rdy,
  input  logic [0:0]    watcher_watcher_recvs__0__en,
  input  logic [0:0]    watcher_watcher_recvs__1__en,
  input  logic [0:0]    watcher_watcher_recvs__2__en,
  input  logic [0:0]    watcher_watcher_recvs__3__en,
  input  logic [0:0]    watcher_watcher_recvs__4__en,
  input  logic [0:0]    watcher_watcher_recvs__5__en,
  input  logic [0:0]    watcher_watcher_recvs__6__en,
  input  logic [0:0]    watcher_watcher_recvs__7__en,
  input  logic [81:0]   watcher_watcher_recvs__0__msg,
  input  logic [81:0]   watcher_watcher_recvs__1__msg,
  input  logic [81:0]   watcher_watcher_recvs__2__msg,
  input  logic [81:0]   watcher_watcher_recvs__3__msg,
  input  logic [81:0]   watcher_watcher_recvs__4__msg,
  input  logic [81:0]   watcher_watcher_recvs__5__msg,
  input  logic [81:0]   watcher_watcher_recvs__6__msg,
  input  logic [81:0]   watcher_watcher_recvs__7__msg,
  output logic [0:0]    watcher_watcher_recvs__0__rdy,
  output logic [0:0]    watcher_watcher_recvs__1__rdy,
  output logic [0:0]    watcher_watcher_recvs__2__rdy,
  output logic [0:0]    watcher_watcher_recvs__3__rdy,
  output logic [0:0]    watcher_watcher_recvs__4__rdy,
  output logic [0:0]    watcher_watcher_recvs__5__rdy,
  output logic [0:0]    watcher_watcher_recvs__6__rdy,
  output logic [0:0]    watcher_watcher_recvs__7__rdy,
  output logic [0:0]    watcher_watcher_send_mem_sends__0__en,
  output logic [0:0]    watcher_watcher_send_mem_sends__1__en,
  output logic [0:0]    watcher_watcher_send_mem_sends__2__en,
  output logic [0:0]    watcher_watcher_send_mem_sends__3__en,
  output logic [0:0]    watcher_watcher_send_mem_sends__4__en,
  output logic [0:0]    watcher_watcher_send_mem_sends__5__en,
  output logic [0:0]    watcher_watcher_send_mem_sends__6__en,
  output logic [0:0]    watcher_watcher_send_mem_sends__7__en,
  output logic [143:0]  watcher_watcher_send_mem_sends__0__msg,
  output logic [143:0]  watcher_watcher_send_mem_sends__1__msg,
  output logic [143:0]  watcher_watcher_send_mem_sends__2__msg,
  output logic [143:0]  watcher_watcher_send_mem_sends__3__msg,
  output logic [143:0]  watcher_watcher_send_mem_sends__4__msg,
  output logic [143:0]  watcher_watcher_send_mem_sends__5__msg,
  output logic [143:0]  watcher_watcher_send_mem_sends__6__msg,
  output logic [143:0]  watcher_watcher_send_mem_sends__7__msg,
  input  logic [0:0]    watcher_watcher_send_mem_sends__0__rdy,
  input  logic [0:0]    watcher_watcher_send_mem_sends__1__rdy,
  input  logic [0:0]    watcher_watcher_send_mem_sends__2__rdy,
  input  logic [0:0]    watcher_watcher_send_mem_sends__3__rdy,
  input  logic [0:0]    watcher_watcher_send_mem_sends__4__rdy,
  input  logic [0:0]    watcher_watcher_send_mem_sends__5__rdy,
  input  logic [0:0]    watcher_watcher_send_mem_sends__6__rdy,
  input  logic [0:0]    watcher_watcher_send_mem_sends__7__rdy
);
  // Struct/Array ports in the form of wires
  logic [0:0]    clause_confs [0:7];
  logic [0:0]    clause_fetcher_mem_ins__en [0:7];
  logic [80:0]   clause_fetcher_mem_ins__msg [0:7];
  logic [0:0]    clause_fetcher_mem_ins__rdy [0:7];
  logic [0:0]    clause_fetcher_mem_outs__en [0:7];
  logic [152:0]  clause_fetcher_mem_outs__msg [0:7];
  logic [0:0]    clause_fetcher_mem_outs__rdy [0:7];
  logic [0:0]    clause_size_mem_recvs__en [0:7];
  logic [47:0]   clause_size_mem_recvs__msg [0:7];
  logic [0:0]    clause_size_mem_recvs__rdy [0:7];
  logic [0:0]    clause_size_mem_sends__en [0:7];
  logic [109:0]  clause_size_mem_sends__msg [0:7];
  logic [0:0]    clause_size_mem_sends__rdy [0:7];
  logic [0:0]    clause_value_mem_recvs__en [0:7];
  logic [16:0]   clause_value_mem_recvs__msg [0:7];
  logic [0:0]    clause_value_mem_recvs__rdy [0:7];
  logic [0:0]    clause_value_mem_sends__en [0:7];
  logic [78:0]   clause_value_mem_sends__msg [0:7];
  logic [0:0]    clause_value_mem_sends__rdy [0:7];
  logic [0:0]    watcher_lit_to_size_addr_mem_recvs__en [0:7];
  logic [113:0]  watcher_lit_to_size_addr_mem_recvs__msg [0:7];
  logic [0:0]    watcher_lit_to_size_addr_mem_recvs__rdy [0:7];
  logic [0:0]    watcher_lit_to_size_addr_mem_sends__en [0:7];
  logic [175:0]  watcher_lit_to_size_addr_mem_sends__msg [0:7];
  logic [0:0]    watcher_lit_to_size_addr_mem_sends__rdy [0:7];
  logic [0:0]    watcher_value_recvs__en [0:7];
  logic [23:0]   watcher_value_recvs__msg [0:7];
  logic [0:0]    watcher_value_recvs__rdy [0:7];
  logic [0:0]    watcher_value_sends__en [0:7];
  logic [85:0]   watcher_value_sends__msg [0:7];
  logic [0:0]    watcher_value_sends__rdy [0:7];
  logic [0:0]    watcher_watcher_recvs__en [0:7];
  logic [81:0]   watcher_watcher_recvs__msg [0:7];
  logic [0:0]    watcher_watcher_recvs__rdy [0:7];
  logic [0:0]    watcher_watcher_send_mem_sends__en [0:7];
  logic [143:0]  watcher_watcher_send_mem_sends__msg [0:7];
  logic [0:0]    watcher_watcher_send_mem_sends__rdy [0:7];

  // Struct/Array ports of sub-components in the form of wires
  logic [0:0]    clauses__clk [0:7];
  logic [0:0]    clauses__conf [0:7];
  logic [0:0]    clauses__reset [0:7];
  logic [0:0]    clauses__cr_recv__en [0:7];
  logic [31:0]   clauses__cr_recv__msg [0:7];
  logic [0:0]    clauses__cr_recv__rdy [0:7];
  logic [0:0]    clauses__fetcher_mem_in__en [0:7];
  logic [80:0]   clauses__fetcher_mem_in__msg [0:7];
  logic [0:0]    clauses__fetcher_mem_in__rdy [0:7];
  logic [0:0]    clauses__fetcher_mem_out__en [0:7];
  logic [152:0]  clauses__fetcher_mem_out__msg [0:7];
  logic [0:0]    clauses__fetcher_mem_out__rdy [0:7];
  logic [0:0]    clauses__size_mem_recv__en [0:7];
  logic [47:0]   clauses__size_mem_recv__msg [0:7];
  logic [0:0]    clauses__size_mem_recv__rdy [0:7];
  logic [0:0]    clauses__size_mem_send__en [0:7];
  logic [109:0]  clauses__size_mem_send__msg [0:7];
  logic [0:0]    clauses__size_mem_send__rdy [0:7];
  logic [0:0]    clauses__to_trail__en [0:7];
  logic [31:0]   clauses__to_trail__msg [0:7];
  logic [0:0]    clauses__to_trail__rdy [0:7];
  logic [0:0]    clauses__value_mem_recv__en [0:7];
  logic [16:0]   clauses__value_mem_recv__msg [0:7];
  logic [0:0]    clauses__value_mem_recv__rdy [0:7];
  logic [0:0]    clauses__value_mem_send__en [0:7];
  logic [78:0]   clauses__value_mem_send__msg [0:7];
  logic [0:0]    clauses__value_mem_send__rdy [0:7];
  logic [0:0]    n_to_trail__recvs__en [0:8];
  logic [31:0]   n_to_trail__recvs__msg [0:8];
  logic [0:0]    n_to_trail__recvs__rdy [0:8];
  logic [0:0]    trail_to_watchers__sends__en [0:7];
  logic [31:0]   trail_to_watchers__sends__msg [0:7];
  logic [0:0]    trail_to_watchers__sends__rdy [0:7];
  logic [0:0]    watchers__clk [0:7];
  logic [0:0]    watchers__reset [0:7];
  logic [0:0]    watchers__cr_send__en [0:7];
  logic [31:0]   watchers__cr_send__msg [0:7];
  logic [0:0]    watchers__cr_send__rdy [0:7];
  logic [0:0]    watchers__from_trail_recv__en [0:7];
  logic [31:0]   watchers__from_trail_recv__msg [0:7];
  logic [0:0]    watchers__from_trail_recv__rdy [0:7];
  logic [0:0]    watchers__lit_to_size_addr_mem_recv__en [0:7];
  logic [113:0]  watchers__lit_to_size_addr_mem_recv__msg [0:7];
  logic [0:0]    watchers__lit_to_size_addr_mem_recv__rdy [0:7];
  logic [0:0]    watchers__lit_to_size_addr_mem_send__en [0:7];
  logic [175:0]  watchers__lit_to_size_addr_mem_send__msg [0:7];
  logic [0:0]    watchers__lit_to_size_addr_mem_send__rdy [0:7];
  logic [0:0]    watchers__value_recv__en [0:7];
  logic [23:0]   watchers__value_recv__msg [0:7];
  logic [0:0]    watchers__value_recv__rdy [0:7];
  logic [0:0]    watchers__value_send__en [0:7];
  logic [85:0]   watchers__value_send__msg [0:7];
  logic [0:0]    watchers__value_send__rdy [0:7];
  logic [0:0]    watchers__watcher_recv__en [0:7];
  logic [81:0]   watchers__watcher_recv__msg [0:7];
  logic [0:0]    watchers__watcher_recv__rdy [0:7];
  logic [0:0]    watchers__watcher_send_mem_send__en [0:7];
  logic [143:0]  watchers__watcher_send_mem_send__msg [0:7];
  logic [0:0]    watchers__watcher_send_mem_send__rdy [0:7];

  // Sub-component declarations
  logic [0:0]    clauses__0__clk;
  logic [0:0]    clauses__0__conf;
  logic [0:0]    clauses__0__reset;
  logic [0:0]    clauses__0__cr_recv__en;
  logic [31:0]   clauses__0__cr_recv__msg;
  logic [0:0]    clauses__0__cr_recv__rdy;
  logic [0:0]    clauses__0__fetcher_mem_in__en;
  logic [80:0]   clauses__0__fetcher_mem_in__msg;
  logic [0:0]    clauses__0__fetcher_mem_in__rdy;
  logic [0:0]    clauses__0__fetcher_mem_out__en;
  logic [152:0]  clauses__0__fetcher_mem_out__msg;
  logic [0:0]    clauses__0__fetcher_mem_out__rdy;
  logic [0:0]    clauses__0__size_mem_recv__en;
  logic [47:0]   clauses__0__size_mem_recv__msg;
  logic [0:0]    clauses__0__size_mem_recv__rdy;
  logic [0:0]    clauses__0__size_mem_send__en;
  logic [109:0]  clauses__0__size_mem_send__msg;
  logic [0:0]    clauses__0__size_mem_send__rdy;
  logic [0:0]    clauses__0__to_trail__en;
  logic [31:0]   clauses__0__to_trail__msg;
  logic [0:0]    clauses__0__to_trail__rdy;
  logic [0:0]    clauses__0__value_mem_recv__en;
  logic [16:0]   clauses__0__value_mem_recv__msg;
  logic [0:0]    clauses__0__value_mem_recv__rdy;
  logic [0:0]    clauses__0__value_mem_send__en;
  logic [78:0]   clauses__0__value_mem_send__msg;
  logic [0:0]    clauses__0__value_mem_send__rdy;

  Clause__index_0 clauses__0
  (
    .clk            (      clauses__0__clk      ),
    .conf           (      clauses__0__conf     ),
    .reset          (     clauses__0__reset     ),
    .cr_recv__en    (  clauses__0__cr_recv__en  ),
    .cr_recv__msg   (  clauses__0__cr_recv__msg ),
    .cr_recv__rdy   (  clauses__0__cr_recv__rdy ),
    .fetcher_mem_in__en( clauses__0__fetcher_mem_in__en ),
    .fetcher_mem_in__msg( clauses__0__fetcher_mem_in__msg ),
    .fetcher_mem_in__rdy( clauses__0__fetcher_mem_in__rdy ),
    .fetcher_mem_out__en( clauses__0__fetcher_mem_out__en ),
    .fetcher_mem_out__msg( clauses__0__fetcher_mem_out__msg ),
    .fetcher_mem_out__rdy( clauses__0__fetcher_mem_out__rdy ),
    .size_mem_recv__en( clauses__0__size_mem_recv__en ),
    .size_mem_recv__msg( clauses__0__size_mem_recv__msg ),
    .size_mem_recv__rdy( clauses__0__size_mem_recv__rdy ),
    .size_mem_send__en( clauses__0__size_mem_send__en ),
    .size_mem_send__msg( clauses__0__size_mem_send__msg ),
    .size_mem_send__rdy( clauses__0__size_mem_send__rdy ),
    .to_trail__en   (  clauses__0__to_trail__en ),
    .to_trail__msg  ( clauses__0__to_trail__msg ),
    .to_trail__rdy  ( clauses__0__to_trail__rdy ),
    .value_mem_recv__en( clauses__0__value_mem_recv__en ),
    .value_mem_recv__msg( clauses__0__value_mem_recv__msg ),
    .value_mem_recv__rdy( clauses__0__value_mem_recv__rdy ),
    .value_mem_send__en( clauses__0__value_mem_send__en ),
    .value_mem_send__msg( clauses__0__value_mem_send__msg ),
    .value_mem_send__rdy( clauses__0__value_mem_send__rdy )
  );

  logic [0:0]    clauses__1__clk;
  logic [0:0]    clauses__1__conf;
  logic [0:0]    clauses__1__reset;
  logic [0:0]    clauses__1__cr_recv__en;
  logic [31:0]   clauses__1__cr_recv__msg;
  logic [0:0]    clauses__1__cr_recv__rdy;
  logic [0:0]    clauses__1__fetcher_mem_in__en;
  logic [80:0]   clauses__1__fetcher_mem_in__msg;
  logic [0:0]    clauses__1__fetcher_mem_in__rdy;
  logic [0:0]    clauses__1__fetcher_mem_out__en;
  logic [152:0]  clauses__1__fetcher_mem_out__msg;
  logic [0:0]    clauses__1__fetcher_mem_out__rdy;
  logic [0:0]    clauses__1__size_mem_recv__en;
  logic [47:0]   clauses__1__size_mem_recv__msg;
  logic [0:0]    clauses__1__size_mem_recv__rdy;
  logic [0:0]    clauses__1__size_mem_send__en;
  logic [109:0]  clauses__1__size_mem_send__msg;
  logic [0:0]    clauses__1__size_mem_send__rdy;
  logic [0:0]    clauses__1__to_trail__en;
  logic [31:0]   clauses__1__to_trail__msg;
  logic [0:0]    clauses__1__to_trail__rdy;
  logic [0:0]    clauses__1__value_mem_recv__en;
  logic [16:0]   clauses__1__value_mem_recv__msg;
  logic [0:0]    clauses__1__value_mem_recv__rdy;
  logic [0:0]    clauses__1__value_mem_send__en;
  logic [78:0]   clauses__1__value_mem_send__msg;
  logic [0:0]    clauses__1__value_mem_send__rdy;

  Clause__index_0 clauses__1
  (
    .clk            (      clauses__1__clk      ),
    .conf           (      clauses__1__conf     ),
    .reset          (     clauses__1__reset     ),
    .cr_recv__en    (  clauses__1__cr_recv__en  ),
    .cr_recv__msg   (  clauses__1__cr_recv__msg ),
    .cr_recv__rdy   (  clauses__1__cr_recv__rdy ),
    .fetcher_mem_in__en( clauses__1__fetcher_mem_in__en ),
    .fetcher_mem_in__msg( clauses__1__fetcher_mem_in__msg ),
    .fetcher_mem_in__rdy( clauses__1__fetcher_mem_in__rdy ),
    .fetcher_mem_out__en( clauses__1__fetcher_mem_out__en ),
    .fetcher_mem_out__msg( clauses__1__fetcher_mem_out__msg ),
    .fetcher_mem_out__rdy( clauses__1__fetcher_mem_out__rdy ),
    .size_mem_recv__en( clauses__1__size_mem_recv__en ),
    .size_mem_recv__msg( clauses__1__size_mem_recv__msg ),
    .size_mem_recv__rdy( clauses__1__size_mem_recv__rdy ),
    .size_mem_send__en( clauses__1__size_mem_send__en ),
    .size_mem_send__msg( clauses__1__size_mem_send__msg ),
    .size_mem_send__rdy( clauses__1__size_mem_send__rdy ),
    .to_trail__en   (  clauses__1__to_trail__en ),
    .to_trail__msg  ( clauses__1__to_trail__msg ),
    .to_trail__rdy  ( clauses__1__to_trail__rdy ),
    .value_mem_recv__en( clauses__1__value_mem_recv__en ),
    .value_mem_recv__msg( clauses__1__value_mem_recv__msg ),
    .value_mem_recv__rdy( clauses__1__value_mem_recv__rdy ),
    .value_mem_send__en( clauses__1__value_mem_send__en ),
    .value_mem_send__msg( clauses__1__value_mem_send__msg ),
    .value_mem_send__rdy( clauses__1__value_mem_send__rdy )
  );

  logic [0:0]    clauses__2__clk;
  logic [0:0]    clauses__2__conf;
  logic [0:0]    clauses__2__reset;
  logic [0:0]    clauses__2__cr_recv__en;
  logic [31:0]   clauses__2__cr_recv__msg;
  logic [0:0]    clauses__2__cr_recv__rdy;
  logic [0:0]    clauses__2__fetcher_mem_in__en;
  logic [80:0]   clauses__2__fetcher_mem_in__msg;
  logic [0:0]    clauses__2__fetcher_mem_in__rdy;
  logic [0:0]    clauses__2__fetcher_mem_out__en;
  logic [152:0]  clauses__2__fetcher_mem_out__msg;
  logic [0:0]    clauses__2__fetcher_mem_out__rdy;
  logic [0:0]    clauses__2__size_mem_recv__en;
  logic [47:0]   clauses__2__size_mem_recv__msg;
  logic [0:0]    clauses__2__size_mem_recv__rdy;
  logic [0:0]    clauses__2__size_mem_send__en;
  logic [109:0]  clauses__2__size_mem_send__msg;
  logic [0:0]    clauses__2__size_mem_send__rdy;
  logic [0:0]    clauses__2__to_trail__en;
  logic [31:0]   clauses__2__to_trail__msg;
  logic [0:0]    clauses__2__to_trail__rdy;
  logic [0:0]    clauses__2__value_mem_recv__en;
  logic [16:0]   clauses__2__value_mem_recv__msg;
  logic [0:0]    clauses__2__value_mem_recv__rdy;
  logic [0:0]    clauses__2__value_mem_send__en;
  logic [78:0]   clauses__2__value_mem_send__msg;
  logic [0:0]    clauses__2__value_mem_send__rdy;

  Clause__index_0 clauses__2
  (
    .clk            (      clauses__2__clk      ),
    .conf           (      clauses__2__conf     ),
    .reset          (     clauses__2__reset     ),
    .cr_recv__en    (  clauses__2__cr_recv__en  ),
    .cr_recv__msg   (  clauses__2__cr_recv__msg ),
    .cr_recv__rdy   (  clauses__2__cr_recv__rdy ),
    .fetcher_mem_in__en( clauses__2__fetcher_mem_in__en ),
    .fetcher_mem_in__msg( clauses__2__fetcher_mem_in__msg ),
    .fetcher_mem_in__rdy( clauses__2__fetcher_mem_in__rdy ),
    .fetcher_mem_out__en( clauses__2__fetcher_mem_out__en ),
    .fetcher_mem_out__msg( clauses__2__fetcher_mem_out__msg ),
    .fetcher_mem_out__rdy( clauses__2__fetcher_mem_out__rdy ),
    .size_mem_recv__en( clauses__2__size_mem_recv__en ),
    .size_mem_recv__msg( clauses__2__size_mem_recv__msg ),
    .size_mem_recv__rdy( clauses__2__size_mem_recv__rdy ),
    .size_mem_send__en( clauses__2__size_mem_send__en ),
    .size_mem_send__msg( clauses__2__size_mem_send__msg ),
    .size_mem_send__rdy( clauses__2__size_mem_send__rdy ),
    .to_trail__en   (  clauses__2__to_trail__en ),
    .to_trail__msg  ( clauses__2__to_trail__msg ),
    .to_trail__rdy  ( clauses__2__to_trail__rdy ),
    .value_mem_recv__en( clauses__2__value_mem_recv__en ),
    .value_mem_recv__msg( clauses__2__value_mem_recv__msg ),
    .value_mem_recv__rdy( clauses__2__value_mem_recv__rdy ),
    .value_mem_send__en( clauses__2__value_mem_send__en ),
    .value_mem_send__msg( clauses__2__value_mem_send__msg ),
    .value_mem_send__rdy( clauses__2__value_mem_send__rdy )
  );

  logic [0:0]    clauses__3__clk;
  logic [0:0]    clauses__3__conf;
  logic [0:0]    clauses__3__reset;
  logic [0:0]    clauses__3__cr_recv__en;
  logic [31:0]   clauses__3__cr_recv__msg;
  logic [0:0]    clauses__3__cr_recv__rdy;
  logic [0:0]    clauses__3__fetcher_mem_in__en;
  logic [80:0]   clauses__3__fetcher_mem_in__msg;
  logic [0:0]    clauses__3__fetcher_mem_in__rdy;
  logic [0:0]    clauses__3__fetcher_mem_out__en;
  logic [152:0]  clauses__3__fetcher_mem_out__msg;
  logic [0:0]    clauses__3__fetcher_mem_out__rdy;
  logic [0:0]    clauses__3__size_mem_recv__en;
  logic [47:0]   clauses__3__size_mem_recv__msg;
  logic [0:0]    clauses__3__size_mem_recv__rdy;
  logic [0:0]    clauses__3__size_mem_send__en;
  logic [109:0]  clauses__3__size_mem_send__msg;
  logic [0:0]    clauses__3__size_mem_send__rdy;
  logic [0:0]    clauses__3__to_trail__en;
  logic [31:0]   clauses__3__to_trail__msg;
  logic [0:0]    clauses__3__to_trail__rdy;
  logic [0:0]    clauses__3__value_mem_recv__en;
  logic [16:0]   clauses__3__value_mem_recv__msg;
  logic [0:0]    clauses__3__value_mem_recv__rdy;
  logic [0:0]    clauses__3__value_mem_send__en;
  logic [78:0]   clauses__3__value_mem_send__msg;
  logic [0:0]    clauses__3__value_mem_send__rdy;

  Clause__index_0 clauses__3
  (
    .clk            (      clauses__3__clk      ),
    .conf           (      clauses__3__conf     ),
    .reset          (     clauses__3__reset     ),
    .cr_recv__en    (  clauses__3__cr_recv__en  ),
    .cr_recv__msg   (  clauses__3__cr_recv__msg ),
    .cr_recv__rdy   (  clauses__3__cr_recv__rdy ),
    .fetcher_mem_in__en( clauses__3__fetcher_mem_in__en ),
    .fetcher_mem_in__msg( clauses__3__fetcher_mem_in__msg ),
    .fetcher_mem_in__rdy( clauses__3__fetcher_mem_in__rdy ),
    .fetcher_mem_out__en( clauses__3__fetcher_mem_out__en ),
    .fetcher_mem_out__msg( clauses__3__fetcher_mem_out__msg ),
    .fetcher_mem_out__rdy( clauses__3__fetcher_mem_out__rdy ),
    .size_mem_recv__en( clauses__3__size_mem_recv__en ),
    .size_mem_recv__msg( clauses__3__size_mem_recv__msg ),
    .size_mem_recv__rdy( clauses__3__size_mem_recv__rdy ),
    .size_mem_send__en( clauses__3__size_mem_send__en ),
    .size_mem_send__msg( clauses__3__size_mem_send__msg ),
    .size_mem_send__rdy( clauses__3__size_mem_send__rdy ),
    .to_trail__en   (  clauses__3__to_trail__en ),
    .to_trail__msg  ( clauses__3__to_trail__msg ),
    .to_trail__rdy  ( clauses__3__to_trail__rdy ),
    .value_mem_recv__en( clauses__3__value_mem_recv__en ),
    .value_mem_recv__msg( clauses__3__value_mem_recv__msg ),
    .value_mem_recv__rdy( clauses__3__value_mem_recv__rdy ),
    .value_mem_send__en( clauses__3__value_mem_send__en ),
    .value_mem_send__msg( clauses__3__value_mem_send__msg ),
    .value_mem_send__rdy( clauses__3__value_mem_send__rdy )
  );

  logic [0:0]    clauses__4__clk;
  logic [0:0]    clauses__4__conf;
  logic [0:0]    clauses__4__reset;
  logic [0:0]    clauses__4__cr_recv__en;
  logic [31:0]   clauses__4__cr_recv__msg;
  logic [0:0]    clauses__4__cr_recv__rdy;
  logic [0:0]    clauses__4__fetcher_mem_in__en;
  logic [80:0]   clauses__4__fetcher_mem_in__msg;
  logic [0:0]    clauses__4__fetcher_mem_in__rdy;
  logic [0:0]    clauses__4__fetcher_mem_out__en;
  logic [152:0]  clauses__4__fetcher_mem_out__msg;
  logic [0:0]    clauses__4__fetcher_mem_out__rdy;
  logic [0:0]    clauses__4__size_mem_recv__en;
  logic [47:0]   clauses__4__size_mem_recv__msg;
  logic [0:0]    clauses__4__size_mem_recv__rdy;
  logic [0:0]    clauses__4__size_mem_send__en;
  logic [109:0]  clauses__4__size_mem_send__msg;
  logic [0:0]    clauses__4__size_mem_send__rdy;
  logic [0:0]    clauses__4__to_trail__en;
  logic [31:0]   clauses__4__to_trail__msg;
  logic [0:0]    clauses__4__to_trail__rdy;
  logic [0:0]    clauses__4__value_mem_recv__en;
  logic [16:0]   clauses__4__value_mem_recv__msg;
  logic [0:0]    clauses__4__value_mem_recv__rdy;
  logic [0:0]    clauses__4__value_mem_send__en;
  logic [78:0]   clauses__4__value_mem_send__msg;
  logic [0:0]    clauses__4__value_mem_send__rdy;

  Clause__index_0 clauses__4
  (
    .clk            (      clauses__4__clk      ),
    .conf           (      clauses__4__conf     ),
    .reset          (     clauses__4__reset     ),
    .cr_recv__en    (  clauses__4__cr_recv__en  ),
    .cr_recv__msg   (  clauses__4__cr_recv__msg ),
    .cr_recv__rdy   (  clauses__4__cr_recv__rdy ),
    .fetcher_mem_in__en( clauses__4__fetcher_mem_in__en ),
    .fetcher_mem_in__msg( clauses__4__fetcher_mem_in__msg ),
    .fetcher_mem_in__rdy( clauses__4__fetcher_mem_in__rdy ),
    .fetcher_mem_out__en( clauses__4__fetcher_mem_out__en ),
    .fetcher_mem_out__msg( clauses__4__fetcher_mem_out__msg ),
    .fetcher_mem_out__rdy( clauses__4__fetcher_mem_out__rdy ),
    .size_mem_recv__en( clauses__4__size_mem_recv__en ),
    .size_mem_recv__msg( clauses__4__size_mem_recv__msg ),
    .size_mem_recv__rdy( clauses__4__size_mem_recv__rdy ),
    .size_mem_send__en( clauses__4__size_mem_send__en ),
    .size_mem_send__msg( clauses__4__size_mem_send__msg ),
    .size_mem_send__rdy( clauses__4__size_mem_send__rdy ),
    .to_trail__en   (  clauses__4__to_trail__en ),
    .to_trail__msg  ( clauses__4__to_trail__msg ),
    .to_trail__rdy  ( clauses__4__to_trail__rdy ),
    .value_mem_recv__en( clauses__4__value_mem_recv__en ),
    .value_mem_recv__msg( clauses__4__value_mem_recv__msg ),
    .value_mem_recv__rdy( clauses__4__value_mem_recv__rdy ),
    .value_mem_send__en( clauses__4__value_mem_send__en ),
    .value_mem_send__msg( clauses__4__value_mem_send__msg ),
    .value_mem_send__rdy( clauses__4__value_mem_send__rdy )
  );

  logic [0:0]    clauses__5__clk;
  logic [0:0]    clauses__5__conf;
  logic [0:0]    clauses__5__reset;
  logic [0:0]    clauses__5__cr_recv__en;
  logic [31:0]   clauses__5__cr_recv__msg;
  logic [0:0]    clauses__5__cr_recv__rdy;
  logic [0:0]    clauses__5__fetcher_mem_in__en;
  logic [80:0]   clauses__5__fetcher_mem_in__msg;
  logic [0:0]    clauses__5__fetcher_mem_in__rdy;
  logic [0:0]    clauses__5__fetcher_mem_out__en;
  logic [152:0]  clauses__5__fetcher_mem_out__msg;
  logic [0:0]    clauses__5__fetcher_mem_out__rdy;
  logic [0:0]    clauses__5__size_mem_recv__en;
  logic [47:0]   clauses__5__size_mem_recv__msg;
  logic [0:0]    clauses__5__size_mem_recv__rdy;
  logic [0:0]    clauses__5__size_mem_send__en;
  logic [109:0]  clauses__5__size_mem_send__msg;
  logic [0:0]    clauses__5__size_mem_send__rdy;
  logic [0:0]    clauses__5__to_trail__en;
  logic [31:0]   clauses__5__to_trail__msg;
  logic [0:0]    clauses__5__to_trail__rdy;
  logic [0:0]    clauses__5__value_mem_recv__en;
  logic [16:0]   clauses__5__value_mem_recv__msg;
  logic [0:0]    clauses__5__value_mem_recv__rdy;
  logic [0:0]    clauses__5__value_mem_send__en;
  logic [78:0]   clauses__5__value_mem_send__msg;
  logic [0:0]    clauses__5__value_mem_send__rdy;

  Clause__index_0 clauses__5
  (
    .clk            (      clauses__5__clk      ),
    .conf           (      clauses__5__conf     ),
    .reset          (     clauses__5__reset     ),
    .cr_recv__en    (  clauses__5__cr_recv__en  ),
    .cr_recv__msg   (  clauses__5__cr_recv__msg ),
    .cr_recv__rdy   (  clauses__5__cr_recv__rdy ),
    .fetcher_mem_in__en( clauses__5__fetcher_mem_in__en ),
    .fetcher_mem_in__msg( clauses__5__fetcher_mem_in__msg ),
    .fetcher_mem_in__rdy( clauses__5__fetcher_mem_in__rdy ),
    .fetcher_mem_out__en( clauses__5__fetcher_mem_out__en ),
    .fetcher_mem_out__msg( clauses__5__fetcher_mem_out__msg ),
    .fetcher_mem_out__rdy( clauses__5__fetcher_mem_out__rdy ),
    .size_mem_recv__en( clauses__5__size_mem_recv__en ),
    .size_mem_recv__msg( clauses__5__size_mem_recv__msg ),
    .size_mem_recv__rdy( clauses__5__size_mem_recv__rdy ),
    .size_mem_send__en( clauses__5__size_mem_send__en ),
    .size_mem_send__msg( clauses__5__size_mem_send__msg ),
    .size_mem_send__rdy( clauses__5__size_mem_send__rdy ),
    .to_trail__en   (  clauses__5__to_trail__en ),
    .to_trail__msg  ( clauses__5__to_trail__msg ),
    .to_trail__rdy  ( clauses__5__to_trail__rdy ),
    .value_mem_recv__en( clauses__5__value_mem_recv__en ),
    .value_mem_recv__msg( clauses__5__value_mem_recv__msg ),
    .value_mem_recv__rdy( clauses__5__value_mem_recv__rdy ),
    .value_mem_send__en( clauses__5__value_mem_send__en ),
    .value_mem_send__msg( clauses__5__value_mem_send__msg ),
    .value_mem_send__rdy( clauses__5__value_mem_send__rdy )
  );

  logic [0:0]    clauses__6__clk;
  logic [0:0]    clauses__6__conf;
  logic [0:0]    clauses__6__reset;
  logic [0:0]    clauses__6__cr_recv__en;
  logic [31:0]   clauses__6__cr_recv__msg;
  logic [0:0]    clauses__6__cr_recv__rdy;
  logic [0:0]    clauses__6__fetcher_mem_in__en;
  logic [80:0]   clauses__6__fetcher_mem_in__msg;
  logic [0:0]    clauses__6__fetcher_mem_in__rdy;
  logic [0:0]    clauses__6__fetcher_mem_out__en;
  logic [152:0]  clauses__6__fetcher_mem_out__msg;
  logic [0:0]    clauses__6__fetcher_mem_out__rdy;
  logic [0:0]    clauses__6__size_mem_recv__en;
  logic [47:0]   clauses__6__size_mem_recv__msg;
  logic [0:0]    clauses__6__size_mem_recv__rdy;
  logic [0:0]    clauses__6__size_mem_send__en;
  logic [109:0]  clauses__6__size_mem_send__msg;
  logic [0:0]    clauses__6__size_mem_send__rdy;
  logic [0:0]    clauses__6__to_trail__en;
  logic [31:0]   clauses__6__to_trail__msg;
  logic [0:0]    clauses__6__to_trail__rdy;
  logic [0:0]    clauses__6__value_mem_recv__en;
  logic [16:0]   clauses__6__value_mem_recv__msg;
  logic [0:0]    clauses__6__value_mem_recv__rdy;
  logic [0:0]    clauses__6__value_mem_send__en;
  logic [78:0]   clauses__6__value_mem_send__msg;
  logic [0:0]    clauses__6__value_mem_send__rdy;

  Clause__index_0 clauses__6
  (
    .clk            (      clauses__6__clk      ),
    .conf           (      clauses__6__conf     ),
    .reset          (     clauses__6__reset     ),
    .cr_recv__en    (  clauses__6__cr_recv__en  ),
    .cr_recv__msg   (  clauses__6__cr_recv__msg ),
    .cr_recv__rdy   (  clauses__6__cr_recv__rdy ),
    .fetcher_mem_in__en( clauses__6__fetcher_mem_in__en ),
    .fetcher_mem_in__msg( clauses__6__fetcher_mem_in__msg ),
    .fetcher_mem_in__rdy( clauses__6__fetcher_mem_in__rdy ),
    .fetcher_mem_out__en( clauses__6__fetcher_mem_out__en ),
    .fetcher_mem_out__msg( clauses__6__fetcher_mem_out__msg ),
    .fetcher_mem_out__rdy( clauses__6__fetcher_mem_out__rdy ),
    .size_mem_recv__en( clauses__6__size_mem_recv__en ),
    .size_mem_recv__msg( clauses__6__size_mem_recv__msg ),
    .size_mem_recv__rdy( clauses__6__size_mem_recv__rdy ),
    .size_mem_send__en( clauses__6__size_mem_send__en ),
    .size_mem_send__msg( clauses__6__size_mem_send__msg ),
    .size_mem_send__rdy( clauses__6__size_mem_send__rdy ),
    .to_trail__en   (  clauses__6__to_trail__en ),
    .to_trail__msg  ( clauses__6__to_trail__msg ),
    .to_trail__rdy  ( clauses__6__to_trail__rdy ),
    .value_mem_recv__en( clauses__6__value_mem_recv__en ),
    .value_mem_recv__msg( clauses__6__value_mem_recv__msg ),
    .value_mem_recv__rdy( clauses__6__value_mem_recv__rdy ),
    .value_mem_send__en( clauses__6__value_mem_send__en ),
    .value_mem_send__msg( clauses__6__value_mem_send__msg ),
    .value_mem_send__rdy( clauses__6__value_mem_send__rdy )
  );

  logic [0:0]    clauses__7__clk;
  logic [0:0]    clauses__7__conf;
  logic [0:0]    clauses__7__reset;
  logic [0:0]    clauses__7__cr_recv__en;
  logic [31:0]   clauses__7__cr_recv__msg;
  logic [0:0]    clauses__7__cr_recv__rdy;
  logic [0:0]    clauses__7__fetcher_mem_in__en;
  logic [80:0]   clauses__7__fetcher_mem_in__msg;
  logic [0:0]    clauses__7__fetcher_mem_in__rdy;
  logic [0:0]    clauses__7__fetcher_mem_out__en;
  logic [152:0]  clauses__7__fetcher_mem_out__msg;
  logic [0:0]    clauses__7__fetcher_mem_out__rdy;
  logic [0:0]    clauses__7__size_mem_recv__en;
  logic [47:0]   clauses__7__size_mem_recv__msg;
  logic [0:0]    clauses__7__size_mem_recv__rdy;
  logic [0:0]    clauses__7__size_mem_send__en;
  logic [109:0]  clauses__7__size_mem_send__msg;
  logic [0:0]    clauses__7__size_mem_send__rdy;
  logic [0:0]    clauses__7__to_trail__en;
  logic [31:0]   clauses__7__to_trail__msg;
  logic [0:0]    clauses__7__to_trail__rdy;
  logic [0:0]    clauses__7__value_mem_recv__en;
  logic [16:0]   clauses__7__value_mem_recv__msg;
  logic [0:0]    clauses__7__value_mem_recv__rdy;
  logic [0:0]    clauses__7__value_mem_send__en;
  logic [78:0]   clauses__7__value_mem_send__msg;
  logic [0:0]    clauses__7__value_mem_send__rdy;

  Clause__index_0 clauses__7
  (
    .clk            (      clauses__7__clk      ),
    .conf           (      clauses__7__conf     ),
    .reset          (     clauses__7__reset     ),
    .cr_recv__en    (  clauses__7__cr_recv__en  ),
    .cr_recv__msg   (  clauses__7__cr_recv__msg ),
    .cr_recv__rdy   (  clauses__7__cr_recv__rdy ),
    .fetcher_mem_in__en( clauses__7__fetcher_mem_in__en ),
    .fetcher_mem_in__msg( clauses__7__fetcher_mem_in__msg ),
    .fetcher_mem_in__rdy( clauses__7__fetcher_mem_in__rdy ),
    .fetcher_mem_out__en( clauses__7__fetcher_mem_out__en ),
    .fetcher_mem_out__msg( clauses__7__fetcher_mem_out__msg ),
    .fetcher_mem_out__rdy( clauses__7__fetcher_mem_out__rdy ),
    .size_mem_recv__en( clauses__7__size_mem_recv__en ),
    .size_mem_recv__msg( clauses__7__size_mem_recv__msg ),
    .size_mem_recv__rdy( clauses__7__size_mem_recv__rdy ),
    .size_mem_send__en( clauses__7__size_mem_send__en ),
    .size_mem_send__msg( clauses__7__size_mem_send__msg ),
    .size_mem_send__rdy( clauses__7__size_mem_send__rdy ),
    .to_trail__en   (  clauses__7__to_trail__en ),
    .to_trail__msg  ( clauses__7__to_trail__msg ),
    .to_trail__rdy  ( clauses__7__to_trail__rdy ),
    .value_mem_recv__en( clauses__7__value_mem_recv__en ),
    .value_mem_recv__msg( clauses__7__value_mem_recv__msg ),
    .value_mem_recv__rdy( clauses__7__value_mem_recv__rdy ),
    .value_mem_send__en( clauses__7__value_mem_send__en ),
    .value_mem_send__msg( clauses__7__value_mem_send__msg ),
    .value_mem_send__rdy( clauses__7__value_mem_send__rdy )
  );

  logic [0:0]    n_to_trail__clk;
  logic [0:0]    n_to_trail__reset;
  logic [0:0]    n_to_trail__recvs__0__en;
  logic [0:0]    n_to_trail__recvs__1__en;
  logic [0:0]    n_to_trail__recvs__2__en;
  logic [0:0]    n_to_trail__recvs__3__en;
  logic [0:0]    n_to_trail__recvs__4__en;
  logic [0:0]    n_to_trail__recvs__5__en;
  logic [0:0]    n_to_trail__recvs__6__en;
  logic [0:0]    n_to_trail__recvs__7__en;
  logic [0:0]    n_to_trail__recvs__8__en;
  logic [31:0]   n_to_trail__recvs__0__msg;
  logic [31:0]   n_to_trail__recvs__1__msg;
  logic [31:0]   n_to_trail__recvs__2__msg;
  logic [31:0]   n_to_trail__recvs__3__msg;
  logic [31:0]   n_to_trail__recvs__4__msg;
  logic [31:0]   n_to_trail__recvs__5__msg;
  logic [31:0]   n_to_trail__recvs__6__msg;
  logic [31:0]   n_to_trail__recvs__7__msg;
  logic [31:0]   n_to_trail__recvs__8__msg;
  logic [0:0]    n_to_trail__recvs__0__rdy;
  logic [0:0]    n_to_trail__recvs__1__rdy;
  logic [0:0]    n_to_trail__recvs__2__rdy;
  logic [0:0]    n_to_trail__recvs__3__rdy;
  logic [0:0]    n_to_trail__recvs__4__rdy;
  logic [0:0]    n_to_trail__recvs__5__rdy;
  logic [0:0]    n_to_trail__recvs__6__rdy;
  logic [0:0]    n_to_trail__recvs__7__rdy;
  logic [0:0]    n_to_trail__recvs__8__rdy;
  logic [0:0]    n_to_trail__send__en;
  logic [31:0]   n_to_trail__send__msg;
  logic [0:0]    n_to_trail__send__rdy;

  NToOneDispWithBuffer__27f9eb57a4cda45a n_to_trail
  (
    .clk            (      n_to_trail__clk      ),
    .reset          (     n_to_trail__reset     ),
    .recvs__0__en   (  n_to_trail__recvs__0__en ),
    .recvs__1__en   (  n_to_trail__recvs__1__en ),
    .recvs__2__en   (  n_to_trail__recvs__2__en ),
    .recvs__3__en   (  n_to_trail__recvs__3__en ),
    .recvs__4__en   (  n_to_trail__recvs__4__en ),
    .recvs__5__en   (  n_to_trail__recvs__5__en ),
    .recvs__6__en   (  n_to_trail__recvs__6__en ),
    .recvs__7__en   (  n_to_trail__recvs__7__en ),
    .recvs__8__en   (  n_to_trail__recvs__8__en ),
    .recvs__0__msg  ( n_to_trail__recvs__0__msg ),
    .recvs__1__msg  ( n_to_trail__recvs__1__msg ),
    .recvs__2__msg  ( n_to_trail__recvs__2__msg ),
    .recvs__3__msg  ( n_to_trail__recvs__3__msg ),
    .recvs__4__msg  ( n_to_trail__recvs__4__msg ),
    .recvs__5__msg  ( n_to_trail__recvs__5__msg ),
    .recvs__6__msg  ( n_to_trail__recvs__6__msg ),
    .recvs__7__msg  ( n_to_trail__recvs__7__msg ),
    .recvs__8__msg  ( n_to_trail__recvs__8__msg ),
    .recvs__0__rdy  ( n_to_trail__recvs__0__rdy ),
    .recvs__1__rdy  ( n_to_trail__recvs__1__rdy ),
    .recvs__2__rdy  ( n_to_trail__recvs__2__rdy ),
    .recvs__3__rdy  ( n_to_trail__recvs__3__rdy ),
    .recvs__4__rdy  ( n_to_trail__recvs__4__rdy ),
    .recvs__5__rdy  ( n_to_trail__recvs__5__rdy ),
    .recvs__6__rdy  ( n_to_trail__recvs__6__rdy ),
    .recvs__7__rdy  ( n_to_trail__recvs__7__rdy ),
    .recvs__8__rdy  ( n_to_trail__recvs__8__rdy ),
    .send__en       (    n_to_trail__send__en   ),
    .send__msg      (   n_to_trail__send__msg   ),
    .send__rdy      (   n_to_trail__send__rdy   )
  );

  logic [0:0]    trail__clk;
  logic [0:0]    trail__reset;
  logic [0:0]    trail__recv__en;
  logic [31:0]   trail__recv__msg;
  logic [0:0]    trail__recv__rdy;
  logic [0:0]    trail__send__en;
  logic [31:0]   trail__send__msg;
  logic [0:0]    trail__send__rdy;

  Trail__data_bits_32__trail_size_1024 trail
  (
    .clk            (         trail__clk        ),
    .reset          (        trail__reset       ),
    .recv__en       (      trail__recv__en      ),
    .recv__msg      (      trail__recv__msg     ),
    .recv__rdy      (      trail__recv__rdy     ),
    .send__en       (      trail__send__en      ),
    .send__msg      (      trail__send__msg     ),
    .send__rdy      (      trail__send__rdy     )
  );

  logic [0:0]    trail_to_watchers__clk;
  logic [0:0]    trail_to_watchers__reset;
  logic [0:0]    trail_to_watchers__recv__en;
  logic [31:0]   trail_to_watchers__recv__msg;
  logic [0:0]    trail_to_watchers__recv__rdy;
  logic [0:0]    trail_to_watchers__sends__0__en;
  logic [0:0]    trail_to_watchers__sends__1__en;
  logic [0:0]    trail_to_watchers__sends__2__en;
  logic [0:0]    trail_to_watchers__sends__3__en;
  logic [0:0]    trail_to_watchers__sends__4__en;
  logic [0:0]    trail_to_watchers__sends__5__en;
  logic [0:0]    trail_to_watchers__sends__6__en;
  logic [0:0]    trail_to_watchers__sends__7__en;
  logic [31:0]   trail_to_watchers__sends__0__msg;
  logic [31:0]   trail_to_watchers__sends__1__msg;
  logic [31:0]   trail_to_watchers__sends__2__msg;
  logic [31:0]   trail_to_watchers__sends__3__msg;
  logic [31:0]   trail_to_watchers__sends__4__msg;
  logic [31:0]   trail_to_watchers__sends__5__msg;
  logic [31:0]   trail_to_watchers__sends__6__msg;
  logic [31:0]   trail_to_watchers__sends__7__msg;
  logic [0:0]    trail_to_watchers__sends__0__rdy;
  logic [0:0]    trail_to_watchers__sends__1__rdy;
  logic [0:0]    trail_to_watchers__sends__2__rdy;
  logic [0:0]    trail_to_watchers__sends__3__rdy;
  logic [0:0]    trail_to_watchers__sends__4__rdy;
  logic [0:0]    trail_to_watchers__sends__5__rdy;
  logic [0:0]    trail_to_watchers__sends__6__rdy;
  logic [0:0]    trail_to_watchers__sends__7__rdy;

  OneToNDispWithBuffer__58703c261c09dfe5 trail_to_watchers
  (
    .clk            (   trail_to_watchers__clk  ),
    .reset          (  trail_to_watchers__reset ),
    .recv__en       ( trail_to_watchers__recv__en ),
    .recv__msg      ( trail_to_watchers__recv__msg ),
    .recv__rdy      ( trail_to_watchers__recv__rdy ),
    .sends__0__en   ( trail_to_watchers__sends__0__en ),
    .sends__1__en   ( trail_to_watchers__sends__1__en ),
    .sends__2__en   ( trail_to_watchers__sends__2__en ),
    .sends__3__en   ( trail_to_watchers__sends__3__en ),
    .sends__4__en   ( trail_to_watchers__sends__4__en ),
    .sends__5__en   ( trail_to_watchers__sends__5__en ),
    .sends__6__en   ( trail_to_watchers__sends__6__en ),
    .sends__7__en   ( trail_to_watchers__sends__7__en ),
    .sends__0__msg  ( trail_to_watchers__sends__0__msg ),
    .sends__1__msg  ( trail_to_watchers__sends__1__msg ),
    .sends__2__msg  ( trail_to_watchers__sends__2__msg ),
    .sends__3__msg  ( trail_to_watchers__sends__3__msg ),
    .sends__4__msg  ( trail_to_watchers__sends__4__msg ),
    .sends__5__msg  ( trail_to_watchers__sends__5__msg ),
    .sends__6__msg  ( trail_to_watchers__sends__6__msg ),
    .sends__7__msg  ( trail_to_watchers__sends__7__msg ),
    .sends__0__rdy  ( trail_to_watchers__sends__0__rdy ),
    .sends__1__rdy  ( trail_to_watchers__sends__1__rdy ),
    .sends__2__rdy  ( trail_to_watchers__sends__2__rdy ),
    .sends__3__rdy  ( trail_to_watchers__sends__3__rdy ),
    .sends__4__rdy  ( trail_to_watchers__sends__4__rdy ),
    .sends__5__rdy  ( trail_to_watchers__sends__5__rdy ),
    .sends__6__rdy  ( trail_to_watchers__sends__6__rdy ),
    .sends__7__rdy  ( trail_to_watchers__sends__7__rdy )
  );

  logic [0:0]    watchers__0__clk;
  logic [0:0]    watchers__0__reset;
  logic [0:0]    watchers__0__cr_send__en;
  logic [31:0]   watchers__0__cr_send__msg;
  logic [0:0]    watchers__0__cr_send__rdy;
  logic [0:0]    watchers__0__from_trail_recv__en;
  logic [31:0]   watchers__0__from_trail_recv__msg;
  logic [0:0]    watchers__0__from_trail_recv__rdy;
  logic [0:0]    watchers__0__lit_to_size_addr_mem_recv__en;
  logic [113:0]  watchers__0__lit_to_size_addr_mem_recv__msg;
  logic [0:0]    watchers__0__lit_to_size_addr_mem_recv__rdy;
  logic [0:0]    watchers__0__lit_to_size_addr_mem_send__en;
  logic [175:0]  watchers__0__lit_to_size_addr_mem_send__msg;
  logic [0:0]    watchers__0__lit_to_size_addr_mem_send__rdy;
  logic [0:0]    watchers__0__value_recv__en;
  logic [23:0]   watchers__0__value_recv__msg;
  logic [0:0]    watchers__0__value_recv__rdy;
  logic [0:0]    watchers__0__value_send__en;
  logic [85:0]   watchers__0__value_send__msg;
  logic [0:0]    watchers__0__value_send__rdy;
  logic [0:0]    watchers__0__watcher_recv__en;
  logic [81:0]   watchers__0__watcher_recv__msg;
  logic [0:0]    watchers__0__watcher_recv__rdy;
  logic [0:0]    watchers__0__watcher_send_mem_send__en;
  logic [143:0]  watchers__0__watcher_send_mem_send__msg;
  logic [0:0]    watchers__0__watcher_send_mem_send__rdy;

  Watcher__index_0 watchers__0
  (
    .clk            (      watchers__0__clk     ),
    .reset          (     watchers__0__reset    ),
    .cr_send__en    (  watchers__0__cr_send__en ),
    .cr_send__msg   ( watchers__0__cr_send__msg ),
    .cr_send__rdy   ( watchers__0__cr_send__rdy ),
    .from_trail_recv__en( watchers__0__from_trail_recv__en ),
    .from_trail_recv__msg( watchers__0__from_trail_recv__msg ),
    .from_trail_recv__rdy( watchers__0__from_trail_recv__rdy ),
    .lit_to_size_addr_mem_recv__en( watchers__0__lit_to_size_addr_mem_recv__en ),
    .lit_to_size_addr_mem_recv__msg( watchers__0__lit_to_size_addr_mem_recv__msg ),
    .lit_to_size_addr_mem_recv__rdy( watchers__0__lit_to_size_addr_mem_recv__rdy ),
    .lit_to_size_addr_mem_send__en( watchers__0__lit_to_size_addr_mem_send__en ),
    .lit_to_size_addr_mem_send__msg( watchers__0__lit_to_size_addr_mem_send__msg ),
    .lit_to_size_addr_mem_send__rdy( watchers__0__lit_to_size_addr_mem_send__rdy ),
    .value_recv__en ( watchers__0__value_recv__en ),
    .value_recv__msg( watchers__0__value_recv__msg ),
    .value_recv__rdy( watchers__0__value_recv__rdy ),
    .value_send__en ( watchers__0__value_send__en ),
    .value_send__msg( watchers__0__value_send__msg ),
    .value_send__rdy( watchers__0__value_send__rdy ),
    .watcher_recv__en( watchers__0__watcher_recv__en ),
    .watcher_recv__msg( watchers__0__watcher_recv__msg ),
    .watcher_recv__rdy( watchers__0__watcher_recv__rdy ),
    .watcher_send_mem_send__en( watchers__0__watcher_send_mem_send__en ),
    .watcher_send_mem_send__msg( watchers__0__watcher_send_mem_send__msg ),
    .watcher_send_mem_send__rdy( watchers__0__watcher_send_mem_send__rdy )
  );

  logic [0:0]    watchers__1__clk;
  logic [0:0]    watchers__1__reset;
  logic [0:0]    watchers__1__cr_send__en;
  logic [31:0]   watchers__1__cr_send__msg;
  logic [0:0]    watchers__1__cr_send__rdy;
  logic [0:0]    watchers__1__from_trail_recv__en;
  logic [31:0]   watchers__1__from_trail_recv__msg;
  logic [0:0]    watchers__1__from_trail_recv__rdy;
  logic [0:0]    watchers__1__lit_to_size_addr_mem_recv__en;
  logic [113:0]  watchers__1__lit_to_size_addr_mem_recv__msg;
  logic [0:0]    watchers__1__lit_to_size_addr_mem_recv__rdy;
  logic [0:0]    watchers__1__lit_to_size_addr_mem_send__en;
  logic [175:0]  watchers__1__lit_to_size_addr_mem_send__msg;
  logic [0:0]    watchers__1__lit_to_size_addr_mem_send__rdy;
  logic [0:0]    watchers__1__value_recv__en;
  logic [23:0]   watchers__1__value_recv__msg;
  logic [0:0]    watchers__1__value_recv__rdy;
  logic [0:0]    watchers__1__value_send__en;
  logic [85:0]   watchers__1__value_send__msg;
  logic [0:0]    watchers__1__value_send__rdy;
  logic [0:0]    watchers__1__watcher_recv__en;
  logic [81:0]   watchers__1__watcher_recv__msg;
  logic [0:0]    watchers__1__watcher_recv__rdy;
  logic [0:0]    watchers__1__watcher_send_mem_send__en;
  logic [143:0]  watchers__1__watcher_send_mem_send__msg;
  logic [0:0]    watchers__1__watcher_send_mem_send__rdy;

  Watcher__index_0 watchers__1
  (
    .clk            (      watchers__1__clk     ),
    .reset          (     watchers__1__reset    ),
    .cr_send__en    (  watchers__1__cr_send__en ),
    .cr_send__msg   ( watchers__1__cr_send__msg ),
    .cr_send__rdy   ( watchers__1__cr_send__rdy ),
    .from_trail_recv__en( watchers__1__from_trail_recv__en ),
    .from_trail_recv__msg( watchers__1__from_trail_recv__msg ),
    .from_trail_recv__rdy( watchers__1__from_trail_recv__rdy ),
    .lit_to_size_addr_mem_recv__en( watchers__1__lit_to_size_addr_mem_recv__en ),
    .lit_to_size_addr_mem_recv__msg( watchers__1__lit_to_size_addr_mem_recv__msg ),
    .lit_to_size_addr_mem_recv__rdy( watchers__1__lit_to_size_addr_mem_recv__rdy ),
    .lit_to_size_addr_mem_send__en( watchers__1__lit_to_size_addr_mem_send__en ),
    .lit_to_size_addr_mem_send__msg( watchers__1__lit_to_size_addr_mem_send__msg ),
    .lit_to_size_addr_mem_send__rdy( watchers__1__lit_to_size_addr_mem_send__rdy ),
    .value_recv__en ( watchers__1__value_recv__en ),
    .value_recv__msg( watchers__1__value_recv__msg ),
    .value_recv__rdy( watchers__1__value_recv__rdy ),
    .value_send__en ( watchers__1__value_send__en ),
    .value_send__msg( watchers__1__value_send__msg ),
    .value_send__rdy( watchers__1__value_send__rdy ),
    .watcher_recv__en( watchers__1__watcher_recv__en ),
    .watcher_recv__msg( watchers__1__watcher_recv__msg ),
    .watcher_recv__rdy( watchers__1__watcher_recv__rdy ),
    .watcher_send_mem_send__en( watchers__1__watcher_send_mem_send__en ),
    .watcher_send_mem_send__msg( watchers__1__watcher_send_mem_send__msg ),
    .watcher_send_mem_send__rdy( watchers__1__watcher_send_mem_send__rdy )
  );

  logic [0:0]    watchers__2__clk;
  logic [0:0]    watchers__2__reset;
  logic [0:0]    watchers__2__cr_send__en;
  logic [31:0]   watchers__2__cr_send__msg;
  logic [0:0]    watchers__2__cr_send__rdy;
  logic [0:0]    watchers__2__from_trail_recv__en;
  logic [31:0]   watchers__2__from_trail_recv__msg;
  logic [0:0]    watchers__2__from_trail_recv__rdy;
  logic [0:0]    watchers__2__lit_to_size_addr_mem_recv__en;
  logic [113:0]  watchers__2__lit_to_size_addr_mem_recv__msg;
  logic [0:0]    watchers__2__lit_to_size_addr_mem_recv__rdy;
  logic [0:0]    watchers__2__lit_to_size_addr_mem_send__en;
  logic [175:0]  watchers__2__lit_to_size_addr_mem_send__msg;
  logic [0:0]    watchers__2__lit_to_size_addr_mem_send__rdy;
  logic [0:0]    watchers__2__value_recv__en;
  logic [23:0]   watchers__2__value_recv__msg;
  logic [0:0]    watchers__2__value_recv__rdy;
  logic [0:0]    watchers__2__value_send__en;
  logic [85:0]   watchers__2__value_send__msg;
  logic [0:0]    watchers__2__value_send__rdy;
  logic [0:0]    watchers__2__watcher_recv__en;
  logic [81:0]   watchers__2__watcher_recv__msg;
  logic [0:0]    watchers__2__watcher_recv__rdy;
  logic [0:0]    watchers__2__watcher_send_mem_send__en;
  logic [143:0]  watchers__2__watcher_send_mem_send__msg;
  logic [0:0]    watchers__2__watcher_send_mem_send__rdy;

  Watcher__index_0 watchers__2
  (
    .clk            (      watchers__2__clk     ),
    .reset          (     watchers__2__reset    ),
    .cr_send__en    (  watchers__2__cr_send__en ),
    .cr_send__msg   ( watchers__2__cr_send__msg ),
    .cr_send__rdy   ( watchers__2__cr_send__rdy ),
    .from_trail_recv__en( watchers__2__from_trail_recv__en ),
    .from_trail_recv__msg( watchers__2__from_trail_recv__msg ),
    .from_trail_recv__rdy( watchers__2__from_trail_recv__rdy ),
    .lit_to_size_addr_mem_recv__en( watchers__2__lit_to_size_addr_mem_recv__en ),
    .lit_to_size_addr_mem_recv__msg( watchers__2__lit_to_size_addr_mem_recv__msg ),
    .lit_to_size_addr_mem_recv__rdy( watchers__2__lit_to_size_addr_mem_recv__rdy ),
    .lit_to_size_addr_mem_send__en( watchers__2__lit_to_size_addr_mem_send__en ),
    .lit_to_size_addr_mem_send__msg( watchers__2__lit_to_size_addr_mem_send__msg ),
    .lit_to_size_addr_mem_send__rdy( watchers__2__lit_to_size_addr_mem_send__rdy ),
    .value_recv__en ( watchers__2__value_recv__en ),
    .value_recv__msg( watchers__2__value_recv__msg ),
    .value_recv__rdy( watchers__2__value_recv__rdy ),
    .value_send__en ( watchers__2__value_send__en ),
    .value_send__msg( watchers__2__value_send__msg ),
    .value_send__rdy( watchers__2__value_send__rdy ),
    .watcher_recv__en( watchers__2__watcher_recv__en ),
    .watcher_recv__msg( watchers__2__watcher_recv__msg ),
    .watcher_recv__rdy( watchers__2__watcher_recv__rdy ),
    .watcher_send_mem_send__en( watchers__2__watcher_send_mem_send__en ),
    .watcher_send_mem_send__msg( watchers__2__watcher_send_mem_send__msg ),
    .watcher_send_mem_send__rdy( watchers__2__watcher_send_mem_send__rdy )
  );

  logic [0:0]    watchers__3__clk;
  logic [0:0]    watchers__3__reset;
  logic [0:0]    watchers__3__cr_send__en;
  logic [31:0]   watchers__3__cr_send__msg;
  logic [0:0]    watchers__3__cr_send__rdy;
  logic [0:0]    watchers__3__from_trail_recv__en;
  logic [31:0]   watchers__3__from_trail_recv__msg;
  logic [0:0]    watchers__3__from_trail_recv__rdy;
  logic [0:0]    watchers__3__lit_to_size_addr_mem_recv__en;
  logic [113:0]  watchers__3__lit_to_size_addr_mem_recv__msg;
  logic [0:0]    watchers__3__lit_to_size_addr_mem_recv__rdy;
  logic [0:0]    watchers__3__lit_to_size_addr_mem_send__en;
  logic [175:0]  watchers__3__lit_to_size_addr_mem_send__msg;
  logic [0:0]    watchers__3__lit_to_size_addr_mem_send__rdy;
  logic [0:0]    watchers__3__value_recv__en;
  logic [23:0]   watchers__3__value_recv__msg;
  logic [0:0]    watchers__3__value_recv__rdy;
  logic [0:0]    watchers__3__value_send__en;
  logic [85:0]   watchers__3__value_send__msg;
  logic [0:0]    watchers__3__value_send__rdy;
  logic [0:0]    watchers__3__watcher_recv__en;
  logic [81:0]   watchers__3__watcher_recv__msg;
  logic [0:0]    watchers__3__watcher_recv__rdy;
  logic [0:0]    watchers__3__watcher_send_mem_send__en;
  logic [143:0]  watchers__3__watcher_send_mem_send__msg;
  logic [0:0]    watchers__3__watcher_send_mem_send__rdy;

  Watcher__index_0 watchers__3
  (
    .clk            (      watchers__3__clk     ),
    .reset          (     watchers__3__reset    ),
    .cr_send__en    (  watchers__3__cr_send__en ),
    .cr_send__msg   ( watchers__3__cr_send__msg ),
    .cr_send__rdy   ( watchers__3__cr_send__rdy ),
    .from_trail_recv__en( watchers__3__from_trail_recv__en ),
    .from_trail_recv__msg( watchers__3__from_trail_recv__msg ),
    .from_trail_recv__rdy( watchers__3__from_trail_recv__rdy ),
    .lit_to_size_addr_mem_recv__en( watchers__3__lit_to_size_addr_mem_recv__en ),
    .lit_to_size_addr_mem_recv__msg( watchers__3__lit_to_size_addr_mem_recv__msg ),
    .lit_to_size_addr_mem_recv__rdy( watchers__3__lit_to_size_addr_mem_recv__rdy ),
    .lit_to_size_addr_mem_send__en( watchers__3__lit_to_size_addr_mem_send__en ),
    .lit_to_size_addr_mem_send__msg( watchers__3__lit_to_size_addr_mem_send__msg ),
    .lit_to_size_addr_mem_send__rdy( watchers__3__lit_to_size_addr_mem_send__rdy ),
    .value_recv__en ( watchers__3__value_recv__en ),
    .value_recv__msg( watchers__3__value_recv__msg ),
    .value_recv__rdy( watchers__3__value_recv__rdy ),
    .value_send__en ( watchers__3__value_send__en ),
    .value_send__msg( watchers__3__value_send__msg ),
    .value_send__rdy( watchers__3__value_send__rdy ),
    .watcher_recv__en( watchers__3__watcher_recv__en ),
    .watcher_recv__msg( watchers__3__watcher_recv__msg ),
    .watcher_recv__rdy( watchers__3__watcher_recv__rdy ),
    .watcher_send_mem_send__en( watchers__3__watcher_send_mem_send__en ),
    .watcher_send_mem_send__msg( watchers__3__watcher_send_mem_send__msg ),
    .watcher_send_mem_send__rdy( watchers__3__watcher_send_mem_send__rdy )
  );

  logic [0:0]    watchers__4__clk;
  logic [0:0]    watchers__4__reset;
  logic [0:0]    watchers__4__cr_send__en;
  logic [31:0]   watchers__4__cr_send__msg;
  logic [0:0]    watchers__4__cr_send__rdy;
  logic [0:0]    watchers__4__from_trail_recv__en;
  logic [31:0]   watchers__4__from_trail_recv__msg;
  logic [0:0]    watchers__4__from_trail_recv__rdy;
  logic [0:0]    watchers__4__lit_to_size_addr_mem_recv__en;
  logic [113:0]  watchers__4__lit_to_size_addr_mem_recv__msg;
  logic [0:0]    watchers__4__lit_to_size_addr_mem_recv__rdy;
  logic [0:0]    watchers__4__lit_to_size_addr_mem_send__en;
  logic [175:0]  watchers__4__lit_to_size_addr_mem_send__msg;
  logic [0:0]    watchers__4__lit_to_size_addr_mem_send__rdy;
  logic [0:0]    watchers__4__value_recv__en;
  logic [23:0]   watchers__4__value_recv__msg;
  logic [0:0]    watchers__4__value_recv__rdy;
  logic [0:0]    watchers__4__value_send__en;
  logic [85:0]   watchers__4__value_send__msg;
  logic [0:0]    watchers__4__value_send__rdy;
  logic [0:0]    watchers__4__watcher_recv__en;
  logic [81:0]   watchers__4__watcher_recv__msg;
  logic [0:0]    watchers__4__watcher_recv__rdy;
  logic [0:0]    watchers__4__watcher_send_mem_send__en;
  logic [143:0]  watchers__4__watcher_send_mem_send__msg;
  logic [0:0]    watchers__4__watcher_send_mem_send__rdy;

  Watcher__index_0 watchers__4
  (
    .clk            (      watchers__4__clk     ),
    .reset          (     watchers__4__reset    ),
    .cr_send__en    (  watchers__4__cr_send__en ),
    .cr_send__msg   ( watchers__4__cr_send__msg ),
    .cr_send__rdy   ( watchers__4__cr_send__rdy ),
    .from_trail_recv__en( watchers__4__from_trail_recv__en ),
    .from_trail_recv__msg( watchers__4__from_trail_recv__msg ),
    .from_trail_recv__rdy( watchers__4__from_trail_recv__rdy ),
    .lit_to_size_addr_mem_recv__en( watchers__4__lit_to_size_addr_mem_recv__en ),
    .lit_to_size_addr_mem_recv__msg( watchers__4__lit_to_size_addr_mem_recv__msg ),
    .lit_to_size_addr_mem_recv__rdy( watchers__4__lit_to_size_addr_mem_recv__rdy ),
    .lit_to_size_addr_mem_send__en( watchers__4__lit_to_size_addr_mem_send__en ),
    .lit_to_size_addr_mem_send__msg( watchers__4__lit_to_size_addr_mem_send__msg ),
    .lit_to_size_addr_mem_send__rdy( watchers__4__lit_to_size_addr_mem_send__rdy ),
    .value_recv__en ( watchers__4__value_recv__en ),
    .value_recv__msg( watchers__4__value_recv__msg ),
    .value_recv__rdy( watchers__4__value_recv__rdy ),
    .value_send__en ( watchers__4__value_send__en ),
    .value_send__msg( watchers__4__value_send__msg ),
    .value_send__rdy( watchers__4__value_send__rdy ),
    .watcher_recv__en( watchers__4__watcher_recv__en ),
    .watcher_recv__msg( watchers__4__watcher_recv__msg ),
    .watcher_recv__rdy( watchers__4__watcher_recv__rdy ),
    .watcher_send_mem_send__en( watchers__4__watcher_send_mem_send__en ),
    .watcher_send_mem_send__msg( watchers__4__watcher_send_mem_send__msg ),
    .watcher_send_mem_send__rdy( watchers__4__watcher_send_mem_send__rdy )
  );

  logic [0:0]    watchers__5__clk;
  logic [0:0]    watchers__5__reset;
  logic [0:0]    watchers__5__cr_send__en;
  logic [31:0]   watchers__5__cr_send__msg;
  logic [0:0]    watchers__5__cr_send__rdy;
  logic [0:0]    watchers__5__from_trail_recv__en;
  logic [31:0]   watchers__5__from_trail_recv__msg;
  logic [0:0]    watchers__5__from_trail_recv__rdy;
  logic [0:0]    watchers__5__lit_to_size_addr_mem_recv__en;
  logic [113:0]  watchers__5__lit_to_size_addr_mem_recv__msg;
  logic [0:0]    watchers__5__lit_to_size_addr_mem_recv__rdy;
  logic [0:0]    watchers__5__lit_to_size_addr_mem_send__en;
  logic [175:0]  watchers__5__lit_to_size_addr_mem_send__msg;
  logic [0:0]    watchers__5__lit_to_size_addr_mem_send__rdy;
  logic [0:0]    watchers__5__value_recv__en;
  logic [23:0]   watchers__5__value_recv__msg;
  logic [0:0]    watchers__5__value_recv__rdy;
  logic [0:0]    watchers__5__value_send__en;
  logic [85:0]   watchers__5__value_send__msg;
  logic [0:0]    watchers__5__value_send__rdy;
  logic [0:0]    watchers__5__watcher_recv__en;
  logic [81:0]   watchers__5__watcher_recv__msg;
  logic [0:0]    watchers__5__watcher_recv__rdy;
  logic [0:0]    watchers__5__watcher_send_mem_send__en;
  logic [143:0]  watchers__5__watcher_send_mem_send__msg;
  logic [0:0]    watchers__5__watcher_send_mem_send__rdy;

  Watcher__index_0 watchers__5
  (
    .clk            (      watchers__5__clk     ),
    .reset          (     watchers__5__reset    ),
    .cr_send__en    (  watchers__5__cr_send__en ),
    .cr_send__msg   ( watchers__5__cr_send__msg ),
    .cr_send__rdy   ( watchers__5__cr_send__rdy ),
    .from_trail_recv__en( watchers__5__from_trail_recv__en ),
    .from_trail_recv__msg( watchers__5__from_trail_recv__msg ),
    .from_trail_recv__rdy( watchers__5__from_trail_recv__rdy ),
    .lit_to_size_addr_mem_recv__en( watchers__5__lit_to_size_addr_mem_recv__en ),
    .lit_to_size_addr_mem_recv__msg( watchers__5__lit_to_size_addr_mem_recv__msg ),
    .lit_to_size_addr_mem_recv__rdy( watchers__5__lit_to_size_addr_mem_recv__rdy ),
    .lit_to_size_addr_mem_send__en( watchers__5__lit_to_size_addr_mem_send__en ),
    .lit_to_size_addr_mem_send__msg( watchers__5__lit_to_size_addr_mem_send__msg ),
    .lit_to_size_addr_mem_send__rdy( watchers__5__lit_to_size_addr_mem_send__rdy ),
    .value_recv__en ( watchers__5__value_recv__en ),
    .value_recv__msg( watchers__5__value_recv__msg ),
    .value_recv__rdy( watchers__5__value_recv__rdy ),
    .value_send__en ( watchers__5__value_send__en ),
    .value_send__msg( watchers__5__value_send__msg ),
    .value_send__rdy( watchers__5__value_send__rdy ),
    .watcher_recv__en( watchers__5__watcher_recv__en ),
    .watcher_recv__msg( watchers__5__watcher_recv__msg ),
    .watcher_recv__rdy( watchers__5__watcher_recv__rdy ),
    .watcher_send_mem_send__en( watchers__5__watcher_send_mem_send__en ),
    .watcher_send_mem_send__msg( watchers__5__watcher_send_mem_send__msg ),
    .watcher_send_mem_send__rdy( watchers__5__watcher_send_mem_send__rdy )
  );

  logic [0:0]    watchers__6__clk;
  logic [0:0]    watchers__6__reset;
  logic [0:0]    watchers__6__cr_send__en;
  logic [31:0]   watchers__6__cr_send__msg;
  logic [0:0]    watchers__6__cr_send__rdy;
  logic [0:0]    watchers__6__from_trail_recv__en;
  logic [31:0]   watchers__6__from_trail_recv__msg;
  logic [0:0]    watchers__6__from_trail_recv__rdy;
  logic [0:0]    watchers__6__lit_to_size_addr_mem_recv__en;
  logic [113:0]  watchers__6__lit_to_size_addr_mem_recv__msg;
  logic [0:0]    watchers__6__lit_to_size_addr_mem_recv__rdy;
  logic [0:0]    watchers__6__lit_to_size_addr_mem_send__en;
  logic [175:0]  watchers__6__lit_to_size_addr_mem_send__msg;
  logic [0:0]    watchers__6__lit_to_size_addr_mem_send__rdy;
  logic [0:0]    watchers__6__value_recv__en;
  logic [23:0]   watchers__6__value_recv__msg;
  logic [0:0]    watchers__6__value_recv__rdy;
  logic [0:0]    watchers__6__value_send__en;
  logic [85:0]   watchers__6__value_send__msg;
  logic [0:0]    watchers__6__value_send__rdy;
  logic [0:0]    watchers__6__watcher_recv__en;
  logic [81:0]   watchers__6__watcher_recv__msg;
  logic [0:0]    watchers__6__watcher_recv__rdy;
  logic [0:0]    watchers__6__watcher_send_mem_send__en;
  logic [143:0]  watchers__6__watcher_send_mem_send__msg;
  logic [0:0]    watchers__6__watcher_send_mem_send__rdy;

  Watcher__index_0 watchers__6
  (
    .clk            (      watchers__6__clk     ),
    .reset          (     watchers__6__reset    ),
    .cr_send__en    (  watchers__6__cr_send__en ),
    .cr_send__msg   ( watchers__6__cr_send__msg ),
    .cr_send__rdy   ( watchers__6__cr_send__rdy ),
    .from_trail_recv__en( watchers__6__from_trail_recv__en ),
    .from_trail_recv__msg( watchers__6__from_trail_recv__msg ),
    .from_trail_recv__rdy( watchers__6__from_trail_recv__rdy ),
    .lit_to_size_addr_mem_recv__en( watchers__6__lit_to_size_addr_mem_recv__en ),
    .lit_to_size_addr_mem_recv__msg( watchers__6__lit_to_size_addr_mem_recv__msg ),
    .lit_to_size_addr_mem_recv__rdy( watchers__6__lit_to_size_addr_mem_recv__rdy ),
    .lit_to_size_addr_mem_send__en( watchers__6__lit_to_size_addr_mem_send__en ),
    .lit_to_size_addr_mem_send__msg( watchers__6__lit_to_size_addr_mem_send__msg ),
    .lit_to_size_addr_mem_send__rdy( watchers__6__lit_to_size_addr_mem_send__rdy ),
    .value_recv__en ( watchers__6__value_recv__en ),
    .value_recv__msg( watchers__6__value_recv__msg ),
    .value_recv__rdy( watchers__6__value_recv__rdy ),
    .value_send__en ( watchers__6__value_send__en ),
    .value_send__msg( watchers__6__value_send__msg ),
    .value_send__rdy( watchers__6__value_send__rdy ),
    .watcher_recv__en( watchers__6__watcher_recv__en ),
    .watcher_recv__msg( watchers__6__watcher_recv__msg ),
    .watcher_recv__rdy( watchers__6__watcher_recv__rdy ),
    .watcher_send_mem_send__en( watchers__6__watcher_send_mem_send__en ),
    .watcher_send_mem_send__msg( watchers__6__watcher_send_mem_send__msg ),
    .watcher_send_mem_send__rdy( watchers__6__watcher_send_mem_send__rdy )
  );

  logic [0:0]    watchers__7__clk;
  logic [0:0]    watchers__7__reset;
  logic [0:0]    watchers__7__cr_send__en;
  logic [31:0]   watchers__7__cr_send__msg;
  logic [0:0]    watchers__7__cr_send__rdy;
  logic [0:0]    watchers__7__from_trail_recv__en;
  logic [31:0]   watchers__7__from_trail_recv__msg;
  logic [0:0]    watchers__7__from_trail_recv__rdy;
  logic [0:0]    watchers__7__lit_to_size_addr_mem_recv__en;
  logic [113:0]  watchers__7__lit_to_size_addr_mem_recv__msg;
  logic [0:0]    watchers__7__lit_to_size_addr_mem_recv__rdy;
  logic [0:0]    watchers__7__lit_to_size_addr_mem_send__en;
  logic [175:0]  watchers__7__lit_to_size_addr_mem_send__msg;
  logic [0:0]    watchers__7__lit_to_size_addr_mem_send__rdy;
  logic [0:0]    watchers__7__value_recv__en;
  logic [23:0]   watchers__7__value_recv__msg;
  logic [0:0]    watchers__7__value_recv__rdy;
  logic [0:0]    watchers__7__value_send__en;
  logic [85:0]   watchers__7__value_send__msg;
  logic [0:0]    watchers__7__value_send__rdy;
  logic [0:0]    watchers__7__watcher_recv__en;
  logic [81:0]   watchers__7__watcher_recv__msg;
  logic [0:0]    watchers__7__watcher_recv__rdy;
  logic [0:0]    watchers__7__watcher_send_mem_send__en;
  logic [143:0]  watchers__7__watcher_send_mem_send__msg;
  logic [0:0]    watchers__7__watcher_send_mem_send__rdy;

  Watcher__index_0 watchers__7
  (
    .clk            (      watchers__7__clk     ),
    .reset          (     watchers__7__reset    ),
    .cr_send__en    (  watchers__7__cr_send__en ),
    .cr_send__msg   ( watchers__7__cr_send__msg ),
    .cr_send__rdy   ( watchers__7__cr_send__rdy ),
    .from_trail_recv__en( watchers__7__from_trail_recv__en ),
    .from_trail_recv__msg( watchers__7__from_trail_recv__msg ),
    .from_trail_recv__rdy( watchers__7__from_trail_recv__rdy ),
    .lit_to_size_addr_mem_recv__en( watchers__7__lit_to_size_addr_mem_recv__en ),
    .lit_to_size_addr_mem_recv__msg( watchers__7__lit_to_size_addr_mem_recv__msg ),
    .lit_to_size_addr_mem_recv__rdy( watchers__7__lit_to_size_addr_mem_recv__rdy ),
    .lit_to_size_addr_mem_send__en( watchers__7__lit_to_size_addr_mem_send__en ),
    .lit_to_size_addr_mem_send__msg( watchers__7__lit_to_size_addr_mem_send__msg ),
    .lit_to_size_addr_mem_send__rdy( watchers__7__lit_to_size_addr_mem_send__rdy ),
    .value_recv__en ( watchers__7__value_recv__en ),
    .value_recv__msg( watchers__7__value_recv__msg ),
    .value_recv__rdy( watchers__7__value_recv__rdy ),
    .value_send__en ( watchers__7__value_send__en ),
    .value_send__msg( watchers__7__value_send__msg ),
    .value_send__rdy( watchers__7__value_send__rdy ),
    .watcher_recv__en( watchers__7__watcher_recv__en ),
    .watcher_recv__msg( watchers__7__watcher_recv__msg ),
    .watcher_recv__rdy( watchers__7__watcher_recv__rdy ),
    .watcher_send_mem_send__en( watchers__7__watcher_send_mem_send__en ),
    .watcher_send_mem_send__msg( watchers__7__watcher_send_mem_send__msg ),
    .watcher_send_mem_send__rdy( watchers__7__watcher_send_mem_send__rdy )
  );

  // Connect struct/array ports and their wire forms
  assign clauses__0__clk = clauses__clk[0];
  assign clauses__1__clk = clauses__clk[1];
  assign clauses__2__clk = clauses__clk[2];
  assign clauses__3__clk = clauses__clk[3];
  assign clauses__4__clk = clauses__clk[4];
  assign clauses__5__clk = clauses__clk[5];
  assign clauses__6__clk = clauses__clk[6];
  assign clauses__7__clk = clauses__clk[7];
  assign clauses__conf[0] = clauses__0__conf;
  assign clauses__conf[1] = clauses__1__conf;
  assign clauses__conf[2] = clauses__2__conf;
  assign clauses__conf[3] = clauses__3__conf;
  assign clauses__conf[4] = clauses__4__conf;
  assign clauses__conf[5] = clauses__5__conf;
  assign clauses__conf[6] = clauses__6__conf;
  assign clauses__conf[7] = clauses__7__conf;
  assign clauses__0__reset = clauses__reset[0];
  assign clauses__1__reset = clauses__reset[1];
  assign clauses__2__reset = clauses__reset[2];
  assign clauses__3__reset = clauses__reset[3];
  assign clauses__4__reset = clauses__reset[4];
  assign clauses__5__reset = clauses__reset[5];
  assign clauses__6__reset = clauses__reset[6];
  assign clauses__7__reset = clauses__reset[7];
  assign clauses__0__cr_recv__en = clauses__cr_recv__en[0];
  assign clauses__1__cr_recv__en = clauses__cr_recv__en[1];
  assign clauses__2__cr_recv__en = clauses__cr_recv__en[2];
  assign clauses__3__cr_recv__en = clauses__cr_recv__en[3];
  assign clauses__4__cr_recv__en = clauses__cr_recv__en[4];
  assign clauses__5__cr_recv__en = clauses__cr_recv__en[5];
  assign clauses__6__cr_recv__en = clauses__cr_recv__en[6];
  assign clauses__7__cr_recv__en = clauses__cr_recv__en[7];
  assign clauses__0__cr_recv__msg = clauses__cr_recv__msg[0];
  assign clauses__1__cr_recv__msg = clauses__cr_recv__msg[1];
  assign clauses__2__cr_recv__msg = clauses__cr_recv__msg[2];
  assign clauses__3__cr_recv__msg = clauses__cr_recv__msg[3];
  assign clauses__4__cr_recv__msg = clauses__cr_recv__msg[4];
  assign clauses__5__cr_recv__msg = clauses__cr_recv__msg[5];
  assign clauses__6__cr_recv__msg = clauses__cr_recv__msg[6];
  assign clauses__7__cr_recv__msg = clauses__cr_recv__msg[7];
  assign clauses__cr_recv__rdy[0] = clauses__0__cr_recv__rdy;
  assign clauses__cr_recv__rdy[1] = clauses__1__cr_recv__rdy;
  assign clauses__cr_recv__rdy[2] = clauses__2__cr_recv__rdy;
  assign clauses__cr_recv__rdy[3] = clauses__3__cr_recv__rdy;
  assign clauses__cr_recv__rdy[4] = clauses__4__cr_recv__rdy;
  assign clauses__cr_recv__rdy[5] = clauses__5__cr_recv__rdy;
  assign clauses__cr_recv__rdy[6] = clauses__6__cr_recv__rdy;
  assign clauses__cr_recv__rdy[7] = clauses__7__cr_recv__rdy;
  assign clauses__0__fetcher_mem_in__en = clauses__fetcher_mem_in__en[0];
  assign clauses__1__fetcher_mem_in__en = clauses__fetcher_mem_in__en[1];
  assign clauses__2__fetcher_mem_in__en = clauses__fetcher_mem_in__en[2];
  assign clauses__3__fetcher_mem_in__en = clauses__fetcher_mem_in__en[3];
  assign clauses__4__fetcher_mem_in__en = clauses__fetcher_mem_in__en[4];
  assign clauses__5__fetcher_mem_in__en = clauses__fetcher_mem_in__en[5];
  assign clauses__6__fetcher_mem_in__en = clauses__fetcher_mem_in__en[6];
  assign clauses__7__fetcher_mem_in__en = clauses__fetcher_mem_in__en[7];
  assign clauses__0__fetcher_mem_in__msg = clauses__fetcher_mem_in__msg[0];
  assign clauses__1__fetcher_mem_in__msg = clauses__fetcher_mem_in__msg[1];
  assign clauses__2__fetcher_mem_in__msg = clauses__fetcher_mem_in__msg[2];
  assign clauses__3__fetcher_mem_in__msg = clauses__fetcher_mem_in__msg[3];
  assign clauses__4__fetcher_mem_in__msg = clauses__fetcher_mem_in__msg[4];
  assign clauses__5__fetcher_mem_in__msg = clauses__fetcher_mem_in__msg[5];
  assign clauses__6__fetcher_mem_in__msg = clauses__fetcher_mem_in__msg[6];
  assign clauses__7__fetcher_mem_in__msg = clauses__fetcher_mem_in__msg[7];
  assign clauses__fetcher_mem_in__rdy[0] = clauses__0__fetcher_mem_in__rdy;
  assign clauses__fetcher_mem_in__rdy[1] = clauses__1__fetcher_mem_in__rdy;
  assign clauses__fetcher_mem_in__rdy[2] = clauses__2__fetcher_mem_in__rdy;
  assign clauses__fetcher_mem_in__rdy[3] = clauses__3__fetcher_mem_in__rdy;
  assign clauses__fetcher_mem_in__rdy[4] = clauses__4__fetcher_mem_in__rdy;
  assign clauses__fetcher_mem_in__rdy[5] = clauses__5__fetcher_mem_in__rdy;
  assign clauses__fetcher_mem_in__rdy[6] = clauses__6__fetcher_mem_in__rdy;
  assign clauses__fetcher_mem_in__rdy[7] = clauses__7__fetcher_mem_in__rdy;
  assign clauses__fetcher_mem_out__en[0] = clauses__0__fetcher_mem_out__en;
  assign clauses__fetcher_mem_out__en[1] = clauses__1__fetcher_mem_out__en;
  assign clauses__fetcher_mem_out__en[2] = clauses__2__fetcher_mem_out__en;
  assign clauses__fetcher_mem_out__en[3] = clauses__3__fetcher_mem_out__en;
  assign clauses__fetcher_mem_out__en[4] = clauses__4__fetcher_mem_out__en;
  assign clauses__fetcher_mem_out__en[5] = clauses__5__fetcher_mem_out__en;
  assign clauses__fetcher_mem_out__en[6] = clauses__6__fetcher_mem_out__en;
  assign clauses__fetcher_mem_out__en[7] = clauses__7__fetcher_mem_out__en;
  assign clauses__fetcher_mem_out__msg[0] = clauses__0__fetcher_mem_out__msg;
  assign clauses__fetcher_mem_out__msg[1] = clauses__1__fetcher_mem_out__msg;
  assign clauses__fetcher_mem_out__msg[2] = clauses__2__fetcher_mem_out__msg;
  assign clauses__fetcher_mem_out__msg[3] = clauses__3__fetcher_mem_out__msg;
  assign clauses__fetcher_mem_out__msg[4] = clauses__4__fetcher_mem_out__msg;
  assign clauses__fetcher_mem_out__msg[5] = clauses__5__fetcher_mem_out__msg;
  assign clauses__fetcher_mem_out__msg[6] = clauses__6__fetcher_mem_out__msg;
  assign clauses__fetcher_mem_out__msg[7] = clauses__7__fetcher_mem_out__msg;
  assign clauses__0__fetcher_mem_out__rdy = clauses__fetcher_mem_out__rdy[0];
  assign clauses__1__fetcher_mem_out__rdy = clauses__fetcher_mem_out__rdy[1];
  assign clauses__2__fetcher_mem_out__rdy = clauses__fetcher_mem_out__rdy[2];
  assign clauses__3__fetcher_mem_out__rdy = clauses__fetcher_mem_out__rdy[3];
  assign clauses__4__fetcher_mem_out__rdy = clauses__fetcher_mem_out__rdy[4];
  assign clauses__5__fetcher_mem_out__rdy = clauses__fetcher_mem_out__rdy[5];
  assign clauses__6__fetcher_mem_out__rdy = clauses__fetcher_mem_out__rdy[6];
  assign clauses__7__fetcher_mem_out__rdy = clauses__fetcher_mem_out__rdy[7];
  assign clauses__0__size_mem_recv__en = clauses__size_mem_recv__en[0];
  assign clauses__1__size_mem_recv__en = clauses__size_mem_recv__en[1];
  assign clauses__2__size_mem_recv__en = clauses__size_mem_recv__en[2];
  assign clauses__3__size_mem_recv__en = clauses__size_mem_recv__en[3];
  assign clauses__4__size_mem_recv__en = clauses__size_mem_recv__en[4];
  assign clauses__5__size_mem_recv__en = clauses__size_mem_recv__en[5];
  assign clauses__6__size_mem_recv__en = clauses__size_mem_recv__en[6];
  assign clauses__7__size_mem_recv__en = clauses__size_mem_recv__en[7];
  assign clauses__0__size_mem_recv__msg = clauses__size_mem_recv__msg[0];
  assign clauses__1__size_mem_recv__msg = clauses__size_mem_recv__msg[1];
  assign clauses__2__size_mem_recv__msg = clauses__size_mem_recv__msg[2];
  assign clauses__3__size_mem_recv__msg = clauses__size_mem_recv__msg[3];
  assign clauses__4__size_mem_recv__msg = clauses__size_mem_recv__msg[4];
  assign clauses__5__size_mem_recv__msg = clauses__size_mem_recv__msg[5];
  assign clauses__6__size_mem_recv__msg = clauses__size_mem_recv__msg[6];
  assign clauses__7__size_mem_recv__msg = clauses__size_mem_recv__msg[7];
  assign clauses__size_mem_recv__rdy[0] = clauses__0__size_mem_recv__rdy;
  assign clauses__size_mem_recv__rdy[1] = clauses__1__size_mem_recv__rdy;
  assign clauses__size_mem_recv__rdy[2] = clauses__2__size_mem_recv__rdy;
  assign clauses__size_mem_recv__rdy[3] = clauses__3__size_mem_recv__rdy;
  assign clauses__size_mem_recv__rdy[4] = clauses__4__size_mem_recv__rdy;
  assign clauses__size_mem_recv__rdy[5] = clauses__5__size_mem_recv__rdy;
  assign clauses__size_mem_recv__rdy[6] = clauses__6__size_mem_recv__rdy;
  assign clauses__size_mem_recv__rdy[7] = clauses__7__size_mem_recv__rdy;
  assign clauses__size_mem_send__en[0] = clauses__0__size_mem_send__en;
  assign clauses__size_mem_send__en[1] = clauses__1__size_mem_send__en;
  assign clauses__size_mem_send__en[2] = clauses__2__size_mem_send__en;
  assign clauses__size_mem_send__en[3] = clauses__3__size_mem_send__en;
  assign clauses__size_mem_send__en[4] = clauses__4__size_mem_send__en;
  assign clauses__size_mem_send__en[5] = clauses__5__size_mem_send__en;
  assign clauses__size_mem_send__en[6] = clauses__6__size_mem_send__en;
  assign clauses__size_mem_send__en[7] = clauses__7__size_mem_send__en;
  assign clauses__size_mem_send__msg[0] = clauses__0__size_mem_send__msg;
  assign clauses__size_mem_send__msg[1] = clauses__1__size_mem_send__msg;
  assign clauses__size_mem_send__msg[2] = clauses__2__size_mem_send__msg;
  assign clauses__size_mem_send__msg[3] = clauses__3__size_mem_send__msg;
  assign clauses__size_mem_send__msg[4] = clauses__4__size_mem_send__msg;
  assign clauses__size_mem_send__msg[5] = clauses__5__size_mem_send__msg;
  assign clauses__size_mem_send__msg[6] = clauses__6__size_mem_send__msg;
  assign clauses__size_mem_send__msg[7] = clauses__7__size_mem_send__msg;
  assign clauses__0__size_mem_send__rdy = clauses__size_mem_send__rdy[0];
  assign clauses__1__size_mem_send__rdy = clauses__size_mem_send__rdy[1];
  assign clauses__2__size_mem_send__rdy = clauses__size_mem_send__rdy[2];
  assign clauses__3__size_mem_send__rdy = clauses__size_mem_send__rdy[3];
  assign clauses__4__size_mem_send__rdy = clauses__size_mem_send__rdy[4];
  assign clauses__5__size_mem_send__rdy = clauses__size_mem_send__rdy[5];
  assign clauses__6__size_mem_send__rdy = clauses__size_mem_send__rdy[6];
  assign clauses__7__size_mem_send__rdy = clauses__size_mem_send__rdy[7];
  assign clauses__to_trail__en[0] = clauses__0__to_trail__en;
  assign clauses__to_trail__en[1] = clauses__1__to_trail__en;
  assign clauses__to_trail__en[2] = clauses__2__to_trail__en;
  assign clauses__to_trail__en[3] = clauses__3__to_trail__en;
  assign clauses__to_trail__en[4] = clauses__4__to_trail__en;
  assign clauses__to_trail__en[5] = clauses__5__to_trail__en;
  assign clauses__to_trail__en[6] = clauses__6__to_trail__en;
  assign clauses__to_trail__en[7] = clauses__7__to_trail__en;
  assign clauses__to_trail__msg[0] = clauses__0__to_trail__msg;
  assign clauses__to_trail__msg[1] = clauses__1__to_trail__msg;
  assign clauses__to_trail__msg[2] = clauses__2__to_trail__msg;
  assign clauses__to_trail__msg[3] = clauses__3__to_trail__msg;
  assign clauses__to_trail__msg[4] = clauses__4__to_trail__msg;
  assign clauses__to_trail__msg[5] = clauses__5__to_trail__msg;
  assign clauses__to_trail__msg[6] = clauses__6__to_trail__msg;
  assign clauses__to_trail__msg[7] = clauses__7__to_trail__msg;
  assign clauses__0__to_trail__rdy = clauses__to_trail__rdy[0];
  assign clauses__1__to_trail__rdy = clauses__to_trail__rdy[1];
  assign clauses__2__to_trail__rdy = clauses__to_trail__rdy[2];
  assign clauses__3__to_trail__rdy = clauses__to_trail__rdy[3];
  assign clauses__4__to_trail__rdy = clauses__to_trail__rdy[4];
  assign clauses__5__to_trail__rdy = clauses__to_trail__rdy[5];
  assign clauses__6__to_trail__rdy = clauses__to_trail__rdy[6];
  assign clauses__7__to_trail__rdy = clauses__to_trail__rdy[7];
  assign clauses__0__value_mem_recv__en = clauses__value_mem_recv__en[0];
  assign clauses__1__value_mem_recv__en = clauses__value_mem_recv__en[1];
  assign clauses__2__value_mem_recv__en = clauses__value_mem_recv__en[2];
  assign clauses__3__value_mem_recv__en = clauses__value_mem_recv__en[3];
  assign clauses__4__value_mem_recv__en = clauses__value_mem_recv__en[4];
  assign clauses__5__value_mem_recv__en = clauses__value_mem_recv__en[5];
  assign clauses__6__value_mem_recv__en = clauses__value_mem_recv__en[6];
  assign clauses__7__value_mem_recv__en = clauses__value_mem_recv__en[7];
  assign clauses__0__value_mem_recv__msg = clauses__value_mem_recv__msg[0];
  assign clauses__1__value_mem_recv__msg = clauses__value_mem_recv__msg[1];
  assign clauses__2__value_mem_recv__msg = clauses__value_mem_recv__msg[2];
  assign clauses__3__value_mem_recv__msg = clauses__value_mem_recv__msg[3];
  assign clauses__4__value_mem_recv__msg = clauses__value_mem_recv__msg[4];
  assign clauses__5__value_mem_recv__msg = clauses__value_mem_recv__msg[5];
  assign clauses__6__value_mem_recv__msg = clauses__value_mem_recv__msg[6];
  assign clauses__7__value_mem_recv__msg = clauses__value_mem_recv__msg[7];
  assign clauses__value_mem_recv__rdy[0] = clauses__0__value_mem_recv__rdy;
  assign clauses__value_mem_recv__rdy[1] = clauses__1__value_mem_recv__rdy;
  assign clauses__value_mem_recv__rdy[2] = clauses__2__value_mem_recv__rdy;
  assign clauses__value_mem_recv__rdy[3] = clauses__3__value_mem_recv__rdy;
  assign clauses__value_mem_recv__rdy[4] = clauses__4__value_mem_recv__rdy;
  assign clauses__value_mem_recv__rdy[5] = clauses__5__value_mem_recv__rdy;
  assign clauses__value_mem_recv__rdy[6] = clauses__6__value_mem_recv__rdy;
  assign clauses__value_mem_recv__rdy[7] = clauses__7__value_mem_recv__rdy;
  assign clauses__value_mem_send__en[0] = clauses__0__value_mem_send__en;
  assign clauses__value_mem_send__en[1] = clauses__1__value_mem_send__en;
  assign clauses__value_mem_send__en[2] = clauses__2__value_mem_send__en;
  assign clauses__value_mem_send__en[3] = clauses__3__value_mem_send__en;
  assign clauses__value_mem_send__en[4] = clauses__4__value_mem_send__en;
  assign clauses__value_mem_send__en[5] = clauses__5__value_mem_send__en;
  assign clauses__value_mem_send__en[6] = clauses__6__value_mem_send__en;
  assign clauses__value_mem_send__en[7] = clauses__7__value_mem_send__en;
  assign clauses__value_mem_send__msg[0] = clauses__0__value_mem_send__msg;
  assign clauses__value_mem_send__msg[1] = clauses__1__value_mem_send__msg;
  assign clauses__value_mem_send__msg[2] = clauses__2__value_mem_send__msg;
  assign clauses__value_mem_send__msg[3] = clauses__3__value_mem_send__msg;
  assign clauses__value_mem_send__msg[4] = clauses__4__value_mem_send__msg;
  assign clauses__value_mem_send__msg[5] = clauses__5__value_mem_send__msg;
  assign clauses__value_mem_send__msg[6] = clauses__6__value_mem_send__msg;
  assign clauses__value_mem_send__msg[7] = clauses__7__value_mem_send__msg;
  assign clauses__0__value_mem_send__rdy = clauses__value_mem_send__rdy[0];
  assign clauses__1__value_mem_send__rdy = clauses__value_mem_send__rdy[1];
  assign clauses__2__value_mem_send__rdy = clauses__value_mem_send__rdy[2];
  assign clauses__3__value_mem_send__rdy = clauses__value_mem_send__rdy[3];
  assign clauses__4__value_mem_send__rdy = clauses__value_mem_send__rdy[4];
  assign clauses__5__value_mem_send__rdy = clauses__value_mem_send__rdy[5];
  assign clauses__6__value_mem_send__rdy = clauses__value_mem_send__rdy[6];
  assign clauses__7__value_mem_send__rdy = clauses__value_mem_send__rdy[7];
  assign n_to_trail__recvs__0__en = n_to_trail__recvs__en[0];
  assign n_to_trail__recvs__1__en = n_to_trail__recvs__en[1];
  assign n_to_trail__recvs__2__en = n_to_trail__recvs__en[2];
  assign n_to_trail__recvs__3__en = n_to_trail__recvs__en[3];
  assign n_to_trail__recvs__4__en = n_to_trail__recvs__en[4];
  assign n_to_trail__recvs__5__en = n_to_trail__recvs__en[5];
  assign n_to_trail__recvs__6__en = n_to_trail__recvs__en[6];
  assign n_to_trail__recvs__7__en = n_to_trail__recvs__en[7];
  assign n_to_trail__recvs__8__en = n_to_trail__recvs__en[8];
  assign n_to_trail__recvs__0__msg = n_to_trail__recvs__msg[0];
  assign n_to_trail__recvs__1__msg = n_to_trail__recvs__msg[1];
  assign n_to_trail__recvs__2__msg = n_to_trail__recvs__msg[2];
  assign n_to_trail__recvs__3__msg = n_to_trail__recvs__msg[3];
  assign n_to_trail__recvs__4__msg = n_to_trail__recvs__msg[4];
  assign n_to_trail__recvs__5__msg = n_to_trail__recvs__msg[5];
  assign n_to_trail__recvs__6__msg = n_to_trail__recvs__msg[6];
  assign n_to_trail__recvs__7__msg = n_to_trail__recvs__msg[7];
  assign n_to_trail__recvs__8__msg = n_to_trail__recvs__msg[8];
  assign n_to_trail__recvs__rdy[0] = n_to_trail__recvs__0__rdy;
  assign n_to_trail__recvs__rdy[1] = n_to_trail__recvs__1__rdy;
  assign n_to_trail__recvs__rdy[2] = n_to_trail__recvs__2__rdy;
  assign n_to_trail__recvs__rdy[3] = n_to_trail__recvs__3__rdy;
  assign n_to_trail__recvs__rdy[4] = n_to_trail__recvs__4__rdy;
  assign n_to_trail__recvs__rdy[5] = n_to_trail__recvs__5__rdy;
  assign n_to_trail__recvs__rdy[6] = n_to_trail__recvs__6__rdy;
  assign n_to_trail__recvs__rdy[7] = n_to_trail__recvs__7__rdy;
  assign n_to_trail__recvs__rdy[8] = n_to_trail__recvs__8__rdy;
  assign trail_to_watchers__sends__en[0] = trail_to_watchers__sends__0__en;
  assign trail_to_watchers__sends__en[1] = trail_to_watchers__sends__1__en;
  assign trail_to_watchers__sends__en[2] = trail_to_watchers__sends__2__en;
  assign trail_to_watchers__sends__en[3] = trail_to_watchers__sends__3__en;
  assign trail_to_watchers__sends__en[4] = trail_to_watchers__sends__4__en;
  assign trail_to_watchers__sends__en[5] = trail_to_watchers__sends__5__en;
  assign trail_to_watchers__sends__en[6] = trail_to_watchers__sends__6__en;
  assign trail_to_watchers__sends__en[7] = trail_to_watchers__sends__7__en;
  assign trail_to_watchers__sends__msg[0] = trail_to_watchers__sends__0__msg;
  assign trail_to_watchers__sends__msg[1] = trail_to_watchers__sends__1__msg;
  assign trail_to_watchers__sends__msg[2] = trail_to_watchers__sends__2__msg;
  assign trail_to_watchers__sends__msg[3] = trail_to_watchers__sends__3__msg;
  assign trail_to_watchers__sends__msg[4] = trail_to_watchers__sends__4__msg;
  assign trail_to_watchers__sends__msg[5] = trail_to_watchers__sends__5__msg;
  assign trail_to_watchers__sends__msg[6] = trail_to_watchers__sends__6__msg;
  assign trail_to_watchers__sends__msg[7] = trail_to_watchers__sends__7__msg;
  assign trail_to_watchers__sends__0__rdy = trail_to_watchers__sends__rdy[0];
  assign trail_to_watchers__sends__1__rdy = trail_to_watchers__sends__rdy[1];
  assign trail_to_watchers__sends__2__rdy = trail_to_watchers__sends__rdy[2];
  assign trail_to_watchers__sends__3__rdy = trail_to_watchers__sends__rdy[3];
  assign trail_to_watchers__sends__4__rdy = trail_to_watchers__sends__rdy[4];
  assign trail_to_watchers__sends__5__rdy = trail_to_watchers__sends__rdy[5];
  assign trail_to_watchers__sends__6__rdy = trail_to_watchers__sends__rdy[6];
  assign trail_to_watchers__sends__7__rdy = trail_to_watchers__sends__rdy[7];
  assign watchers__0__clk = watchers__clk[0];
  assign watchers__1__clk = watchers__clk[1];
  assign watchers__2__clk = watchers__clk[2];
  assign watchers__3__clk = watchers__clk[3];
  assign watchers__4__clk = watchers__clk[4];
  assign watchers__5__clk = watchers__clk[5];
  assign watchers__6__clk = watchers__clk[6];
  assign watchers__7__clk = watchers__clk[7];
  assign watchers__0__reset = watchers__reset[0];
  assign watchers__1__reset = watchers__reset[1];
  assign watchers__2__reset = watchers__reset[2];
  assign watchers__3__reset = watchers__reset[3];
  assign watchers__4__reset = watchers__reset[4];
  assign watchers__5__reset = watchers__reset[5];
  assign watchers__6__reset = watchers__reset[6];
  assign watchers__7__reset = watchers__reset[7];
  assign watchers__cr_send__en[0] = watchers__0__cr_send__en;
  assign watchers__cr_send__en[1] = watchers__1__cr_send__en;
  assign watchers__cr_send__en[2] = watchers__2__cr_send__en;
  assign watchers__cr_send__en[3] = watchers__3__cr_send__en;
  assign watchers__cr_send__en[4] = watchers__4__cr_send__en;
  assign watchers__cr_send__en[5] = watchers__5__cr_send__en;
  assign watchers__cr_send__en[6] = watchers__6__cr_send__en;
  assign watchers__cr_send__en[7] = watchers__7__cr_send__en;
  assign watchers__cr_send__msg[0] = watchers__0__cr_send__msg;
  assign watchers__cr_send__msg[1] = watchers__1__cr_send__msg;
  assign watchers__cr_send__msg[2] = watchers__2__cr_send__msg;
  assign watchers__cr_send__msg[3] = watchers__3__cr_send__msg;
  assign watchers__cr_send__msg[4] = watchers__4__cr_send__msg;
  assign watchers__cr_send__msg[5] = watchers__5__cr_send__msg;
  assign watchers__cr_send__msg[6] = watchers__6__cr_send__msg;
  assign watchers__cr_send__msg[7] = watchers__7__cr_send__msg;
  assign watchers__0__cr_send__rdy = watchers__cr_send__rdy[0];
  assign watchers__1__cr_send__rdy = watchers__cr_send__rdy[1];
  assign watchers__2__cr_send__rdy = watchers__cr_send__rdy[2];
  assign watchers__3__cr_send__rdy = watchers__cr_send__rdy[3];
  assign watchers__4__cr_send__rdy = watchers__cr_send__rdy[4];
  assign watchers__5__cr_send__rdy = watchers__cr_send__rdy[5];
  assign watchers__6__cr_send__rdy = watchers__cr_send__rdy[6];
  assign watchers__7__cr_send__rdy = watchers__cr_send__rdy[7];
  assign watchers__0__from_trail_recv__en = watchers__from_trail_recv__en[0];
  assign watchers__1__from_trail_recv__en = watchers__from_trail_recv__en[1];
  assign watchers__2__from_trail_recv__en = watchers__from_trail_recv__en[2];
  assign watchers__3__from_trail_recv__en = watchers__from_trail_recv__en[3];
  assign watchers__4__from_trail_recv__en = watchers__from_trail_recv__en[4];
  assign watchers__5__from_trail_recv__en = watchers__from_trail_recv__en[5];
  assign watchers__6__from_trail_recv__en = watchers__from_trail_recv__en[6];
  assign watchers__7__from_trail_recv__en = watchers__from_trail_recv__en[7];
  assign watchers__0__from_trail_recv__msg = watchers__from_trail_recv__msg[0];
  assign watchers__1__from_trail_recv__msg = watchers__from_trail_recv__msg[1];
  assign watchers__2__from_trail_recv__msg = watchers__from_trail_recv__msg[2];
  assign watchers__3__from_trail_recv__msg = watchers__from_trail_recv__msg[3];
  assign watchers__4__from_trail_recv__msg = watchers__from_trail_recv__msg[4];
  assign watchers__5__from_trail_recv__msg = watchers__from_trail_recv__msg[5];
  assign watchers__6__from_trail_recv__msg = watchers__from_trail_recv__msg[6];
  assign watchers__7__from_trail_recv__msg = watchers__from_trail_recv__msg[7];
  assign watchers__from_trail_recv__rdy[0] = watchers__0__from_trail_recv__rdy;
  assign watchers__from_trail_recv__rdy[1] = watchers__1__from_trail_recv__rdy;
  assign watchers__from_trail_recv__rdy[2] = watchers__2__from_trail_recv__rdy;
  assign watchers__from_trail_recv__rdy[3] = watchers__3__from_trail_recv__rdy;
  assign watchers__from_trail_recv__rdy[4] = watchers__4__from_trail_recv__rdy;
  assign watchers__from_trail_recv__rdy[5] = watchers__5__from_trail_recv__rdy;
  assign watchers__from_trail_recv__rdy[6] = watchers__6__from_trail_recv__rdy;
  assign watchers__from_trail_recv__rdy[7] = watchers__7__from_trail_recv__rdy;
  assign watchers__0__lit_to_size_addr_mem_recv__en = watchers__lit_to_size_addr_mem_recv__en[0];
  assign watchers__1__lit_to_size_addr_mem_recv__en = watchers__lit_to_size_addr_mem_recv__en[1];
  assign watchers__2__lit_to_size_addr_mem_recv__en = watchers__lit_to_size_addr_mem_recv__en[2];
  assign watchers__3__lit_to_size_addr_mem_recv__en = watchers__lit_to_size_addr_mem_recv__en[3];
  assign watchers__4__lit_to_size_addr_mem_recv__en = watchers__lit_to_size_addr_mem_recv__en[4];
  assign watchers__5__lit_to_size_addr_mem_recv__en = watchers__lit_to_size_addr_mem_recv__en[5];
  assign watchers__6__lit_to_size_addr_mem_recv__en = watchers__lit_to_size_addr_mem_recv__en[6];
  assign watchers__7__lit_to_size_addr_mem_recv__en = watchers__lit_to_size_addr_mem_recv__en[7];
  assign watchers__0__lit_to_size_addr_mem_recv__msg = watchers__lit_to_size_addr_mem_recv__msg[0];
  assign watchers__1__lit_to_size_addr_mem_recv__msg = watchers__lit_to_size_addr_mem_recv__msg[1];
  assign watchers__2__lit_to_size_addr_mem_recv__msg = watchers__lit_to_size_addr_mem_recv__msg[2];
  assign watchers__3__lit_to_size_addr_mem_recv__msg = watchers__lit_to_size_addr_mem_recv__msg[3];
  assign watchers__4__lit_to_size_addr_mem_recv__msg = watchers__lit_to_size_addr_mem_recv__msg[4];
  assign watchers__5__lit_to_size_addr_mem_recv__msg = watchers__lit_to_size_addr_mem_recv__msg[5];
  assign watchers__6__lit_to_size_addr_mem_recv__msg = watchers__lit_to_size_addr_mem_recv__msg[6];
  assign watchers__7__lit_to_size_addr_mem_recv__msg = watchers__lit_to_size_addr_mem_recv__msg[7];
  assign watchers__lit_to_size_addr_mem_recv__rdy[0] = watchers__0__lit_to_size_addr_mem_recv__rdy;
  assign watchers__lit_to_size_addr_mem_recv__rdy[1] = watchers__1__lit_to_size_addr_mem_recv__rdy;
  assign watchers__lit_to_size_addr_mem_recv__rdy[2] = watchers__2__lit_to_size_addr_mem_recv__rdy;
  assign watchers__lit_to_size_addr_mem_recv__rdy[3] = watchers__3__lit_to_size_addr_mem_recv__rdy;
  assign watchers__lit_to_size_addr_mem_recv__rdy[4] = watchers__4__lit_to_size_addr_mem_recv__rdy;
  assign watchers__lit_to_size_addr_mem_recv__rdy[5] = watchers__5__lit_to_size_addr_mem_recv__rdy;
  assign watchers__lit_to_size_addr_mem_recv__rdy[6] = watchers__6__lit_to_size_addr_mem_recv__rdy;
  assign watchers__lit_to_size_addr_mem_recv__rdy[7] = watchers__7__lit_to_size_addr_mem_recv__rdy;
  assign watchers__lit_to_size_addr_mem_send__en[0] = watchers__0__lit_to_size_addr_mem_send__en;
  assign watchers__lit_to_size_addr_mem_send__en[1] = watchers__1__lit_to_size_addr_mem_send__en;
  assign watchers__lit_to_size_addr_mem_send__en[2] = watchers__2__lit_to_size_addr_mem_send__en;
  assign watchers__lit_to_size_addr_mem_send__en[3] = watchers__3__lit_to_size_addr_mem_send__en;
  assign watchers__lit_to_size_addr_mem_send__en[4] = watchers__4__lit_to_size_addr_mem_send__en;
  assign watchers__lit_to_size_addr_mem_send__en[5] = watchers__5__lit_to_size_addr_mem_send__en;
  assign watchers__lit_to_size_addr_mem_send__en[6] = watchers__6__lit_to_size_addr_mem_send__en;
  assign watchers__lit_to_size_addr_mem_send__en[7] = watchers__7__lit_to_size_addr_mem_send__en;
  assign watchers__lit_to_size_addr_mem_send__msg[0] = watchers__0__lit_to_size_addr_mem_send__msg;
  assign watchers__lit_to_size_addr_mem_send__msg[1] = watchers__1__lit_to_size_addr_mem_send__msg;
  assign watchers__lit_to_size_addr_mem_send__msg[2] = watchers__2__lit_to_size_addr_mem_send__msg;
  assign watchers__lit_to_size_addr_mem_send__msg[3] = watchers__3__lit_to_size_addr_mem_send__msg;
  assign watchers__lit_to_size_addr_mem_send__msg[4] = watchers__4__lit_to_size_addr_mem_send__msg;
  assign watchers__lit_to_size_addr_mem_send__msg[5] = watchers__5__lit_to_size_addr_mem_send__msg;
  assign watchers__lit_to_size_addr_mem_send__msg[6] = watchers__6__lit_to_size_addr_mem_send__msg;
  assign watchers__lit_to_size_addr_mem_send__msg[7] = watchers__7__lit_to_size_addr_mem_send__msg;
  assign watchers__0__lit_to_size_addr_mem_send__rdy = watchers__lit_to_size_addr_mem_send__rdy[0];
  assign watchers__1__lit_to_size_addr_mem_send__rdy = watchers__lit_to_size_addr_mem_send__rdy[1];
  assign watchers__2__lit_to_size_addr_mem_send__rdy = watchers__lit_to_size_addr_mem_send__rdy[2];
  assign watchers__3__lit_to_size_addr_mem_send__rdy = watchers__lit_to_size_addr_mem_send__rdy[3];
  assign watchers__4__lit_to_size_addr_mem_send__rdy = watchers__lit_to_size_addr_mem_send__rdy[4];
  assign watchers__5__lit_to_size_addr_mem_send__rdy = watchers__lit_to_size_addr_mem_send__rdy[5];
  assign watchers__6__lit_to_size_addr_mem_send__rdy = watchers__lit_to_size_addr_mem_send__rdy[6];
  assign watchers__7__lit_to_size_addr_mem_send__rdy = watchers__lit_to_size_addr_mem_send__rdy[7];
  assign watchers__0__value_recv__en = watchers__value_recv__en[0];
  assign watchers__1__value_recv__en = watchers__value_recv__en[1];
  assign watchers__2__value_recv__en = watchers__value_recv__en[2];
  assign watchers__3__value_recv__en = watchers__value_recv__en[3];
  assign watchers__4__value_recv__en = watchers__value_recv__en[4];
  assign watchers__5__value_recv__en = watchers__value_recv__en[5];
  assign watchers__6__value_recv__en = watchers__value_recv__en[6];
  assign watchers__7__value_recv__en = watchers__value_recv__en[7];
  assign watchers__0__value_recv__msg = watchers__value_recv__msg[0];
  assign watchers__1__value_recv__msg = watchers__value_recv__msg[1];
  assign watchers__2__value_recv__msg = watchers__value_recv__msg[2];
  assign watchers__3__value_recv__msg = watchers__value_recv__msg[3];
  assign watchers__4__value_recv__msg = watchers__value_recv__msg[4];
  assign watchers__5__value_recv__msg = watchers__value_recv__msg[5];
  assign watchers__6__value_recv__msg = watchers__value_recv__msg[6];
  assign watchers__7__value_recv__msg = watchers__value_recv__msg[7];
  assign watchers__value_recv__rdy[0] = watchers__0__value_recv__rdy;
  assign watchers__value_recv__rdy[1] = watchers__1__value_recv__rdy;
  assign watchers__value_recv__rdy[2] = watchers__2__value_recv__rdy;
  assign watchers__value_recv__rdy[3] = watchers__3__value_recv__rdy;
  assign watchers__value_recv__rdy[4] = watchers__4__value_recv__rdy;
  assign watchers__value_recv__rdy[5] = watchers__5__value_recv__rdy;
  assign watchers__value_recv__rdy[6] = watchers__6__value_recv__rdy;
  assign watchers__value_recv__rdy[7] = watchers__7__value_recv__rdy;
  assign watchers__value_send__en[0] = watchers__0__value_send__en;
  assign watchers__value_send__en[1] = watchers__1__value_send__en;
  assign watchers__value_send__en[2] = watchers__2__value_send__en;
  assign watchers__value_send__en[3] = watchers__3__value_send__en;
  assign watchers__value_send__en[4] = watchers__4__value_send__en;
  assign watchers__value_send__en[5] = watchers__5__value_send__en;
  assign watchers__value_send__en[6] = watchers__6__value_send__en;
  assign watchers__value_send__en[7] = watchers__7__value_send__en;
  assign watchers__value_send__msg[0] = watchers__0__value_send__msg;
  assign watchers__value_send__msg[1] = watchers__1__value_send__msg;
  assign watchers__value_send__msg[2] = watchers__2__value_send__msg;
  assign watchers__value_send__msg[3] = watchers__3__value_send__msg;
  assign watchers__value_send__msg[4] = watchers__4__value_send__msg;
  assign watchers__value_send__msg[5] = watchers__5__value_send__msg;
  assign watchers__value_send__msg[6] = watchers__6__value_send__msg;
  assign watchers__value_send__msg[7] = watchers__7__value_send__msg;
  assign watchers__0__value_send__rdy = watchers__value_send__rdy[0];
  assign watchers__1__value_send__rdy = watchers__value_send__rdy[1];
  assign watchers__2__value_send__rdy = watchers__value_send__rdy[2];
  assign watchers__3__value_send__rdy = watchers__value_send__rdy[3];
  assign watchers__4__value_send__rdy = watchers__value_send__rdy[4];
  assign watchers__5__value_send__rdy = watchers__value_send__rdy[5];
  assign watchers__6__value_send__rdy = watchers__value_send__rdy[6];
  assign watchers__7__value_send__rdy = watchers__value_send__rdy[7];
  assign watchers__0__watcher_recv__en = watchers__watcher_recv__en[0];
  assign watchers__1__watcher_recv__en = watchers__watcher_recv__en[1];
  assign watchers__2__watcher_recv__en = watchers__watcher_recv__en[2];
  assign watchers__3__watcher_recv__en = watchers__watcher_recv__en[3];
  assign watchers__4__watcher_recv__en = watchers__watcher_recv__en[4];
  assign watchers__5__watcher_recv__en = watchers__watcher_recv__en[5];
  assign watchers__6__watcher_recv__en = watchers__watcher_recv__en[6];
  assign watchers__7__watcher_recv__en = watchers__watcher_recv__en[7];
  assign watchers__0__watcher_recv__msg = watchers__watcher_recv__msg[0];
  assign watchers__1__watcher_recv__msg = watchers__watcher_recv__msg[1];
  assign watchers__2__watcher_recv__msg = watchers__watcher_recv__msg[2];
  assign watchers__3__watcher_recv__msg = watchers__watcher_recv__msg[3];
  assign watchers__4__watcher_recv__msg = watchers__watcher_recv__msg[4];
  assign watchers__5__watcher_recv__msg = watchers__watcher_recv__msg[5];
  assign watchers__6__watcher_recv__msg = watchers__watcher_recv__msg[6];
  assign watchers__7__watcher_recv__msg = watchers__watcher_recv__msg[7];
  assign watchers__watcher_recv__rdy[0] = watchers__0__watcher_recv__rdy;
  assign watchers__watcher_recv__rdy[1] = watchers__1__watcher_recv__rdy;
  assign watchers__watcher_recv__rdy[2] = watchers__2__watcher_recv__rdy;
  assign watchers__watcher_recv__rdy[3] = watchers__3__watcher_recv__rdy;
  assign watchers__watcher_recv__rdy[4] = watchers__4__watcher_recv__rdy;
  assign watchers__watcher_recv__rdy[5] = watchers__5__watcher_recv__rdy;
  assign watchers__watcher_recv__rdy[6] = watchers__6__watcher_recv__rdy;
  assign watchers__watcher_recv__rdy[7] = watchers__7__watcher_recv__rdy;
  assign watchers__watcher_send_mem_send__en[0] = watchers__0__watcher_send_mem_send__en;
  assign watchers__watcher_send_mem_send__en[1] = watchers__1__watcher_send_mem_send__en;
  assign watchers__watcher_send_mem_send__en[2] = watchers__2__watcher_send_mem_send__en;
  assign watchers__watcher_send_mem_send__en[3] = watchers__3__watcher_send_mem_send__en;
  assign watchers__watcher_send_mem_send__en[4] = watchers__4__watcher_send_mem_send__en;
  assign watchers__watcher_send_mem_send__en[5] = watchers__5__watcher_send_mem_send__en;
  assign watchers__watcher_send_mem_send__en[6] = watchers__6__watcher_send_mem_send__en;
  assign watchers__watcher_send_mem_send__en[7] = watchers__7__watcher_send_mem_send__en;
  assign watchers__watcher_send_mem_send__msg[0] = watchers__0__watcher_send_mem_send__msg;
  assign watchers__watcher_send_mem_send__msg[1] = watchers__1__watcher_send_mem_send__msg;
  assign watchers__watcher_send_mem_send__msg[2] = watchers__2__watcher_send_mem_send__msg;
  assign watchers__watcher_send_mem_send__msg[3] = watchers__3__watcher_send_mem_send__msg;
  assign watchers__watcher_send_mem_send__msg[4] = watchers__4__watcher_send_mem_send__msg;
  assign watchers__watcher_send_mem_send__msg[5] = watchers__5__watcher_send_mem_send__msg;
  assign watchers__watcher_send_mem_send__msg[6] = watchers__6__watcher_send_mem_send__msg;
  assign watchers__watcher_send_mem_send__msg[7] = watchers__7__watcher_send_mem_send__msg;
  assign watchers__0__watcher_send_mem_send__rdy = watchers__watcher_send_mem_send__rdy[0];
  assign watchers__1__watcher_send_mem_send__rdy = watchers__watcher_send_mem_send__rdy[1];
  assign watchers__2__watcher_send_mem_send__rdy = watchers__watcher_send_mem_send__rdy[2];
  assign watchers__3__watcher_send_mem_send__rdy = watchers__watcher_send_mem_send__rdy[3];
  assign watchers__4__watcher_send_mem_send__rdy = watchers__watcher_send_mem_send__rdy[4];
  assign watchers__5__watcher_send_mem_send__rdy = watchers__watcher_send_mem_send__rdy[5];
  assign watchers__6__watcher_send_mem_send__rdy = watchers__watcher_send_mem_send__rdy[6];
  assign watchers__7__watcher_send_mem_send__rdy = watchers__watcher_send_mem_send__rdy[7];

  // Connections
  assign clause_confs__0 = clause_confs[0];
  assign clause_confs__1 = clause_confs[1];
  assign clause_confs__2 = clause_confs[2];
  assign clause_confs__3 = clause_confs[3];
  assign clause_confs__4 = clause_confs[4];
  assign clause_confs__5 = clause_confs[5];
  assign clause_confs__6 = clause_confs[6];
  assign clause_confs__7 = clause_confs[7];
  assign clause_fetcher_mem_ins__en[0] = clause_fetcher_mem_ins__0__en;
  assign clause_fetcher_mem_ins__en[1] = clause_fetcher_mem_ins__1__en;
  assign clause_fetcher_mem_ins__en[2] = clause_fetcher_mem_ins__2__en;
  assign clause_fetcher_mem_ins__en[3] = clause_fetcher_mem_ins__3__en;
  assign clause_fetcher_mem_ins__en[4] = clause_fetcher_mem_ins__4__en;
  assign clause_fetcher_mem_ins__en[5] = clause_fetcher_mem_ins__5__en;
  assign clause_fetcher_mem_ins__en[6] = clause_fetcher_mem_ins__6__en;
  assign clause_fetcher_mem_ins__en[7] = clause_fetcher_mem_ins__7__en;
  assign clause_fetcher_mem_ins__msg[0] = clause_fetcher_mem_ins__0__msg;
  assign clause_fetcher_mem_ins__msg[1] = clause_fetcher_mem_ins__1__msg;
  assign clause_fetcher_mem_ins__msg[2] = clause_fetcher_mem_ins__2__msg;
  assign clause_fetcher_mem_ins__msg[3] = clause_fetcher_mem_ins__3__msg;
  assign clause_fetcher_mem_ins__msg[4] = clause_fetcher_mem_ins__4__msg;
  assign clause_fetcher_mem_ins__msg[5] = clause_fetcher_mem_ins__5__msg;
  assign clause_fetcher_mem_ins__msg[6] = clause_fetcher_mem_ins__6__msg;
  assign clause_fetcher_mem_ins__msg[7] = clause_fetcher_mem_ins__7__msg;
  assign clause_fetcher_mem_ins__0__rdy = clause_fetcher_mem_ins__rdy[0];
  assign clause_fetcher_mem_ins__1__rdy = clause_fetcher_mem_ins__rdy[1];
  assign clause_fetcher_mem_ins__2__rdy = clause_fetcher_mem_ins__rdy[2];
  assign clause_fetcher_mem_ins__3__rdy = clause_fetcher_mem_ins__rdy[3];
  assign clause_fetcher_mem_ins__4__rdy = clause_fetcher_mem_ins__rdy[4];
  assign clause_fetcher_mem_ins__5__rdy = clause_fetcher_mem_ins__rdy[5];
  assign clause_fetcher_mem_ins__6__rdy = clause_fetcher_mem_ins__rdy[6];
  assign clause_fetcher_mem_ins__7__rdy = clause_fetcher_mem_ins__rdy[7];
  assign clause_fetcher_mem_outs__0__en = clause_fetcher_mem_outs__en[0];
  assign clause_fetcher_mem_outs__1__en = clause_fetcher_mem_outs__en[1];
  assign clause_fetcher_mem_outs__2__en = clause_fetcher_mem_outs__en[2];
  assign clause_fetcher_mem_outs__3__en = clause_fetcher_mem_outs__en[3];
  assign clause_fetcher_mem_outs__4__en = clause_fetcher_mem_outs__en[4];
  assign clause_fetcher_mem_outs__5__en = clause_fetcher_mem_outs__en[5];
  assign clause_fetcher_mem_outs__6__en = clause_fetcher_mem_outs__en[6];
  assign clause_fetcher_mem_outs__7__en = clause_fetcher_mem_outs__en[7];
  assign clause_fetcher_mem_outs__0__msg = clause_fetcher_mem_outs__msg[0];
  assign clause_fetcher_mem_outs__1__msg = clause_fetcher_mem_outs__msg[1];
  assign clause_fetcher_mem_outs__2__msg = clause_fetcher_mem_outs__msg[2];
  assign clause_fetcher_mem_outs__3__msg = clause_fetcher_mem_outs__msg[3];
  assign clause_fetcher_mem_outs__4__msg = clause_fetcher_mem_outs__msg[4];
  assign clause_fetcher_mem_outs__5__msg = clause_fetcher_mem_outs__msg[5];
  assign clause_fetcher_mem_outs__6__msg = clause_fetcher_mem_outs__msg[6];
  assign clause_fetcher_mem_outs__7__msg = clause_fetcher_mem_outs__msg[7];
  assign clause_fetcher_mem_outs__rdy[0] = clause_fetcher_mem_outs__0__rdy;
  assign clause_fetcher_mem_outs__rdy[1] = clause_fetcher_mem_outs__1__rdy;
  assign clause_fetcher_mem_outs__rdy[2] = clause_fetcher_mem_outs__2__rdy;
  assign clause_fetcher_mem_outs__rdy[3] = clause_fetcher_mem_outs__3__rdy;
  assign clause_fetcher_mem_outs__rdy[4] = clause_fetcher_mem_outs__4__rdy;
  assign clause_fetcher_mem_outs__rdy[5] = clause_fetcher_mem_outs__5__rdy;
  assign clause_fetcher_mem_outs__rdy[6] = clause_fetcher_mem_outs__6__rdy;
  assign clause_fetcher_mem_outs__rdy[7] = clause_fetcher_mem_outs__7__rdy;
  assign clause_size_mem_recvs__en[0] = clause_size_mem_recvs__0__en;
  assign clause_size_mem_recvs__en[1] = clause_size_mem_recvs__1__en;
  assign clause_size_mem_recvs__en[2] = clause_size_mem_recvs__2__en;
  assign clause_size_mem_recvs__en[3] = clause_size_mem_recvs__3__en;
  assign clause_size_mem_recvs__en[4] = clause_size_mem_recvs__4__en;
  assign clause_size_mem_recvs__en[5] = clause_size_mem_recvs__5__en;
  assign clause_size_mem_recvs__en[6] = clause_size_mem_recvs__6__en;
  assign clause_size_mem_recvs__en[7] = clause_size_mem_recvs__7__en;
  assign clause_size_mem_recvs__msg[0] = clause_size_mem_recvs__0__msg;
  assign clause_size_mem_recvs__msg[1] = clause_size_mem_recvs__1__msg;
  assign clause_size_mem_recvs__msg[2] = clause_size_mem_recvs__2__msg;
  assign clause_size_mem_recvs__msg[3] = clause_size_mem_recvs__3__msg;
  assign clause_size_mem_recvs__msg[4] = clause_size_mem_recvs__4__msg;
  assign clause_size_mem_recvs__msg[5] = clause_size_mem_recvs__5__msg;
  assign clause_size_mem_recvs__msg[6] = clause_size_mem_recvs__6__msg;
  assign clause_size_mem_recvs__msg[7] = clause_size_mem_recvs__7__msg;
  assign clause_size_mem_recvs__0__rdy = clause_size_mem_recvs__rdy[0];
  assign clause_size_mem_recvs__1__rdy = clause_size_mem_recvs__rdy[1];
  assign clause_size_mem_recvs__2__rdy = clause_size_mem_recvs__rdy[2];
  assign clause_size_mem_recvs__3__rdy = clause_size_mem_recvs__rdy[3];
  assign clause_size_mem_recvs__4__rdy = clause_size_mem_recvs__rdy[4];
  assign clause_size_mem_recvs__5__rdy = clause_size_mem_recvs__rdy[5];
  assign clause_size_mem_recvs__6__rdy = clause_size_mem_recvs__rdy[6];
  assign clause_size_mem_recvs__7__rdy = clause_size_mem_recvs__rdy[7];
  assign clause_size_mem_sends__0__en = clause_size_mem_sends__en[0];
  assign clause_size_mem_sends__1__en = clause_size_mem_sends__en[1];
  assign clause_size_mem_sends__2__en = clause_size_mem_sends__en[2];
  assign clause_size_mem_sends__3__en = clause_size_mem_sends__en[3];
  assign clause_size_mem_sends__4__en = clause_size_mem_sends__en[4];
  assign clause_size_mem_sends__5__en = clause_size_mem_sends__en[5];
  assign clause_size_mem_sends__6__en = clause_size_mem_sends__en[6];
  assign clause_size_mem_sends__7__en = clause_size_mem_sends__en[7];
  assign clause_size_mem_sends__0__msg = clause_size_mem_sends__msg[0];
  assign clause_size_mem_sends__1__msg = clause_size_mem_sends__msg[1];
  assign clause_size_mem_sends__2__msg = clause_size_mem_sends__msg[2];
  assign clause_size_mem_sends__3__msg = clause_size_mem_sends__msg[3];
  assign clause_size_mem_sends__4__msg = clause_size_mem_sends__msg[4];
  assign clause_size_mem_sends__5__msg = clause_size_mem_sends__msg[5];
  assign clause_size_mem_sends__6__msg = clause_size_mem_sends__msg[6];
  assign clause_size_mem_sends__7__msg = clause_size_mem_sends__msg[7];
  assign clause_size_mem_sends__rdy[0] = clause_size_mem_sends__0__rdy;
  assign clause_size_mem_sends__rdy[1] = clause_size_mem_sends__1__rdy;
  assign clause_size_mem_sends__rdy[2] = clause_size_mem_sends__2__rdy;
  assign clause_size_mem_sends__rdy[3] = clause_size_mem_sends__3__rdy;
  assign clause_size_mem_sends__rdy[4] = clause_size_mem_sends__4__rdy;
  assign clause_size_mem_sends__rdy[5] = clause_size_mem_sends__5__rdy;
  assign clause_size_mem_sends__rdy[6] = clause_size_mem_sends__6__rdy;
  assign clause_size_mem_sends__rdy[7] = clause_size_mem_sends__7__rdy;
  assign clause_value_mem_recvs__en[0] = clause_value_mem_recvs__0__en;
  assign clause_value_mem_recvs__en[1] = clause_value_mem_recvs__1__en;
  assign clause_value_mem_recvs__en[2] = clause_value_mem_recvs__2__en;
  assign clause_value_mem_recvs__en[3] = clause_value_mem_recvs__3__en;
  assign clause_value_mem_recvs__en[4] = clause_value_mem_recvs__4__en;
  assign clause_value_mem_recvs__en[5] = clause_value_mem_recvs__5__en;
  assign clause_value_mem_recvs__en[6] = clause_value_mem_recvs__6__en;
  assign clause_value_mem_recvs__en[7] = clause_value_mem_recvs__7__en;
  assign clause_value_mem_recvs__msg[0] = clause_value_mem_recvs__0__msg;
  assign clause_value_mem_recvs__msg[1] = clause_value_mem_recvs__1__msg;
  assign clause_value_mem_recvs__msg[2] = clause_value_mem_recvs__2__msg;
  assign clause_value_mem_recvs__msg[3] = clause_value_mem_recvs__3__msg;
  assign clause_value_mem_recvs__msg[4] = clause_value_mem_recvs__4__msg;
  assign clause_value_mem_recvs__msg[5] = clause_value_mem_recvs__5__msg;
  assign clause_value_mem_recvs__msg[6] = clause_value_mem_recvs__6__msg;
  assign clause_value_mem_recvs__msg[7] = clause_value_mem_recvs__7__msg;
  assign clause_value_mem_recvs__0__rdy = clause_value_mem_recvs__rdy[0];
  assign clause_value_mem_recvs__1__rdy = clause_value_mem_recvs__rdy[1];
  assign clause_value_mem_recvs__2__rdy = clause_value_mem_recvs__rdy[2];
  assign clause_value_mem_recvs__3__rdy = clause_value_mem_recvs__rdy[3];
  assign clause_value_mem_recvs__4__rdy = clause_value_mem_recvs__rdy[4];
  assign clause_value_mem_recvs__5__rdy = clause_value_mem_recvs__rdy[5];
  assign clause_value_mem_recvs__6__rdy = clause_value_mem_recvs__rdy[6];
  assign clause_value_mem_recvs__7__rdy = clause_value_mem_recvs__rdy[7];
  assign clause_value_mem_sends__0__en = clause_value_mem_sends__en[0];
  assign clause_value_mem_sends__1__en = clause_value_mem_sends__en[1];
  assign clause_value_mem_sends__2__en = clause_value_mem_sends__en[2];
  assign clause_value_mem_sends__3__en = clause_value_mem_sends__en[3];
  assign clause_value_mem_sends__4__en = clause_value_mem_sends__en[4];
  assign clause_value_mem_sends__5__en = clause_value_mem_sends__en[5];
  assign clause_value_mem_sends__6__en = clause_value_mem_sends__en[6];
  assign clause_value_mem_sends__7__en = clause_value_mem_sends__en[7];
  assign clause_value_mem_sends__0__msg = clause_value_mem_sends__msg[0];
  assign clause_value_mem_sends__1__msg = clause_value_mem_sends__msg[1];
  assign clause_value_mem_sends__2__msg = clause_value_mem_sends__msg[2];
  assign clause_value_mem_sends__3__msg = clause_value_mem_sends__msg[3];
  assign clause_value_mem_sends__4__msg = clause_value_mem_sends__msg[4];
  assign clause_value_mem_sends__5__msg = clause_value_mem_sends__msg[5];
  assign clause_value_mem_sends__6__msg = clause_value_mem_sends__msg[6];
  assign clause_value_mem_sends__7__msg = clause_value_mem_sends__msg[7];
  assign clause_value_mem_sends__rdy[0] = clause_value_mem_sends__0__rdy;
  assign clause_value_mem_sends__rdy[1] = clause_value_mem_sends__1__rdy;
  assign clause_value_mem_sends__rdy[2] = clause_value_mem_sends__2__rdy;
  assign clause_value_mem_sends__rdy[3] = clause_value_mem_sends__3__rdy;
  assign clause_value_mem_sends__rdy[4] = clause_value_mem_sends__4__rdy;
  assign clause_value_mem_sends__rdy[5] = clause_value_mem_sends__5__rdy;
  assign clause_value_mem_sends__rdy[6] = clause_value_mem_sends__6__rdy;
  assign clause_value_mem_sends__rdy[7] = clause_value_mem_sends__7__rdy;
  assign watcher_lit_to_size_addr_mem_recvs__en[0] = watcher_lit_to_size_addr_mem_recvs__0__en;
  assign watcher_lit_to_size_addr_mem_recvs__en[1] = watcher_lit_to_size_addr_mem_recvs__1__en;
  assign watcher_lit_to_size_addr_mem_recvs__en[2] = watcher_lit_to_size_addr_mem_recvs__2__en;
  assign watcher_lit_to_size_addr_mem_recvs__en[3] = watcher_lit_to_size_addr_mem_recvs__3__en;
  assign watcher_lit_to_size_addr_mem_recvs__en[4] = watcher_lit_to_size_addr_mem_recvs__4__en;
  assign watcher_lit_to_size_addr_mem_recvs__en[5] = watcher_lit_to_size_addr_mem_recvs__5__en;
  assign watcher_lit_to_size_addr_mem_recvs__en[6] = watcher_lit_to_size_addr_mem_recvs__6__en;
  assign watcher_lit_to_size_addr_mem_recvs__en[7] = watcher_lit_to_size_addr_mem_recvs__7__en;
  assign watcher_lit_to_size_addr_mem_recvs__msg[0] = watcher_lit_to_size_addr_mem_recvs__0__msg;
  assign watcher_lit_to_size_addr_mem_recvs__msg[1] = watcher_lit_to_size_addr_mem_recvs__1__msg;
  assign watcher_lit_to_size_addr_mem_recvs__msg[2] = watcher_lit_to_size_addr_mem_recvs__2__msg;
  assign watcher_lit_to_size_addr_mem_recvs__msg[3] = watcher_lit_to_size_addr_mem_recvs__3__msg;
  assign watcher_lit_to_size_addr_mem_recvs__msg[4] = watcher_lit_to_size_addr_mem_recvs__4__msg;
  assign watcher_lit_to_size_addr_mem_recvs__msg[5] = watcher_lit_to_size_addr_mem_recvs__5__msg;
  assign watcher_lit_to_size_addr_mem_recvs__msg[6] = watcher_lit_to_size_addr_mem_recvs__6__msg;
  assign watcher_lit_to_size_addr_mem_recvs__msg[7] = watcher_lit_to_size_addr_mem_recvs__7__msg;
  assign watcher_lit_to_size_addr_mem_recvs__0__rdy = watcher_lit_to_size_addr_mem_recvs__rdy[0];
  assign watcher_lit_to_size_addr_mem_recvs__1__rdy = watcher_lit_to_size_addr_mem_recvs__rdy[1];
  assign watcher_lit_to_size_addr_mem_recvs__2__rdy = watcher_lit_to_size_addr_mem_recvs__rdy[2];
  assign watcher_lit_to_size_addr_mem_recvs__3__rdy = watcher_lit_to_size_addr_mem_recvs__rdy[3];
  assign watcher_lit_to_size_addr_mem_recvs__4__rdy = watcher_lit_to_size_addr_mem_recvs__rdy[4];
  assign watcher_lit_to_size_addr_mem_recvs__5__rdy = watcher_lit_to_size_addr_mem_recvs__rdy[5];
  assign watcher_lit_to_size_addr_mem_recvs__6__rdy = watcher_lit_to_size_addr_mem_recvs__rdy[6];
  assign watcher_lit_to_size_addr_mem_recvs__7__rdy = watcher_lit_to_size_addr_mem_recvs__rdy[7];
  assign watcher_lit_to_size_addr_mem_sends__0__en = watcher_lit_to_size_addr_mem_sends__en[0];
  assign watcher_lit_to_size_addr_mem_sends__1__en = watcher_lit_to_size_addr_mem_sends__en[1];
  assign watcher_lit_to_size_addr_mem_sends__2__en = watcher_lit_to_size_addr_mem_sends__en[2];
  assign watcher_lit_to_size_addr_mem_sends__3__en = watcher_lit_to_size_addr_mem_sends__en[3];
  assign watcher_lit_to_size_addr_mem_sends__4__en = watcher_lit_to_size_addr_mem_sends__en[4];
  assign watcher_lit_to_size_addr_mem_sends__5__en = watcher_lit_to_size_addr_mem_sends__en[5];
  assign watcher_lit_to_size_addr_mem_sends__6__en = watcher_lit_to_size_addr_mem_sends__en[6];
  assign watcher_lit_to_size_addr_mem_sends__7__en = watcher_lit_to_size_addr_mem_sends__en[7];
  assign watcher_lit_to_size_addr_mem_sends__0__msg = watcher_lit_to_size_addr_mem_sends__msg[0];
  assign watcher_lit_to_size_addr_mem_sends__1__msg = watcher_lit_to_size_addr_mem_sends__msg[1];
  assign watcher_lit_to_size_addr_mem_sends__2__msg = watcher_lit_to_size_addr_mem_sends__msg[2];
  assign watcher_lit_to_size_addr_mem_sends__3__msg = watcher_lit_to_size_addr_mem_sends__msg[3];
  assign watcher_lit_to_size_addr_mem_sends__4__msg = watcher_lit_to_size_addr_mem_sends__msg[4];
  assign watcher_lit_to_size_addr_mem_sends__5__msg = watcher_lit_to_size_addr_mem_sends__msg[5];
  assign watcher_lit_to_size_addr_mem_sends__6__msg = watcher_lit_to_size_addr_mem_sends__msg[6];
  assign watcher_lit_to_size_addr_mem_sends__7__msg = watcher_lit_to_size_addr_mem_sends__msg[7];
  assign watcher_lit_to_size_addr_mem_sends__rdy[0] = watcher_lit_to_size_addr_mem_sends__0__rdy;
  assign watcher_lit_to_size_addr_mem_sends__rdy[1] = watcher_lit_to_size_addr_mem_sends__1__rdy;
  assign watcher_lit_to_size_addr_mem_sends__rdy[2] = watcher_lit_to_size_addr_mem_sends__2__rdy;
  assign watcher_lit_to_size_addr_mem_sends__rdy[3] = watcher_lit_to_size_addr_mem_sends__3__rdy;
  assign watcher_lit_to_size_addr_mem_sends__rdy[4] = watcher_lit_to_size_addr_mem_sends__4__rdy;
  assign watcher_lit_to_size_addr_mem_sends__rdy[5] = watcher_lit_to_size_addr_mem_sends__5__rdy;
  assign watcher_lit_to_size_addr_mem_sends__rdy[6] = watcher_lit_to_size_addr_mem_sends__6__rdy;
  assign watcher_lit_to_size_addr_mem_sends__rdy[7] = watcher_lit_to_size_addr_mem_sends__7__rdy;
  assign watcher_value_recvs__en[0] = watcher_value_recvs__0__en;
  assign watcher_value_recvs__en[1] = watcher_value_recvs__1__en;
  assign watcher_value_recvs__en[2] = watcher_value_recvs__2__en;
  assign watcher_value_recvs__en[3] = watcher_value_recvs__3__en;
  assign watcher_value_recvs__en[4] = watcher_value_recvs__4__en;
  assign watcher_value_recvs__en[5] = watcher_value_recvs__5__en;
  assign watcher_value_recvs__en[6] = watcher_value_recvs__6__en;
  assign watcher_value_recvs__en[7] = watcher_value_recvs__7__en;
  assign watcher_value_recvs__msg[0] = watcher_value_recvs__0__msg;
  assign watcher_value_recvs__msg[1] = watcher_value_recvs__1__msg;
  assign watcher_value_recvs__msg[2] = watcher_value_recvs__2__msg;
  assign watcher_value_recvs__msg[3] = watcher_value_recvs__3__msg;
  assign watcher_value_recvs__msg[4] = watcher_value_recvs__4__msg;
  assign watcher_value_recvs__msg[5] = watcher_value_recvs__5__msg;
  assign watcher_value_recvs__msg[6] = watcher_value_recvs__6__msg;
  assign watcher_value_recvs__msg[7] = watcher_value_recvs__7__msg;
  assign watcher_value_recvs__0__rdy = watcher_value_recvs__rdy[0];
  assign watcher_value_recvs__1__rdy = watcher_value_recvs__rdy[1];
  assign watcher_value_recvs__2__rdy = watcher_value_recvs__rdy[2];
  assign watcher_value_recvs__3__rdy = watcher_value_recvs__rdy[3];
  assign watcher_value_recvs__4__rdy = watcher_value_recvs__rdy[4];
  assign watcher_value_recvs__5__rdy = watcher_value_recvs__rdy[5];
  assign watcher_value_recvs__6__rdy = watcher_value_recvs__rdy[6];
  assign watcher_value_recvs__7__rdy = watcher_value_recvs__rdy[7];
  assign watcher_value_sends__0__en = watcher_value_sends__en[0];
  assign watcher_value_sends__1__en = watcher_value_sends__en[1];
  assign watcher_value_sends__2__en = watcher_value_sends__en[2];
  assign watcher_value_sends__3__en = watcher_value_sends__en[3];
  assign watcher_value_sends__4__en = watcher_value_sends__en[4];
  assign watcher_value_sends__5__en = watcher_value_sends__en[5];
  assign watcher_value_sends__6__en = watcher_value_sends__en[6];
  assign watcher_value_sends__7__en = watcher_value_sends__en[7];
  assign watcher_value_sends__0__msg = watcher_value_sends__msg[0];
  assign watcher_value_sends__1__msg = watcher_value_sends__msg[1];
  assign watcher_value_sends__2__msg = watcher_value_sends__msg[2];
  assign watcher_value_sends__3__msg = watcher_value_sends__msg[3];
  assign watcher_value_sends__4__msg = watcher_value_sends__msg[4];
  assign watcher_value_sends__5__msg = watcher_value_sends__msg[5];
  assign watcher_value_sends__6__msg = watcher_value_sends__msg[6];
  assign watcher_value_sends__7__msg = watcher_value_sends__msg[7];
  assign watcher_value_sends__rdy[0] = watcher_value_sends__0__rdy;
  assign watcher_value_sends__rdy[1] = watcher_value_sends__1__rdy;
  assign watcher_value_sends__rdy[2] = watcher_value_sends__2__rdy;
  assign watcher_value_sends__rdy[3] = watcher_value_sends__3__rdy;
  assign watcher_value_sends__rdy[4] = watcher_value_sends__4__rdy;
  assign watcher_value_sends__rdy[5] = watcher_value_sends__5__rdy;
  assign watcher_value_sends__rdy[6] = watcher_value_sends__6__rdy;
  assign watcher_value_sends__rdy[7] = watcher_value_sends__7__rdy;
  assign watcher_watcher_recvs__en[0] = watcher_watcher_recvs__0__en;
  assign watcher_watcher_recvs__en[1] = watcher_watcher_recvs__1__en;
  assign watcher_watcher_recvs__en[2] = watcher_watcher_recvs__2__en;
  assign watcher_watcher_recvs__en[3] = watcher_watcher_recvs__3__en;
  assign watcher_watcher_recvs__en[4] = watcher_watcher_recvs__4__en;
  assign watcher_watcher_recvs__en[5] = watcher_watcher_recvs__5__en;
  assign watcher_watcher_recvs__en[6] = watcher_watcher_recvs__6__en;
  assign watcher_watcher_recvs__en[7] = watcher_watcher_recvs__7__en;
  assign watcher_watcher_recvs__msg[0] = watcher_watcher_recvs__0__msg;
  assign watcher_watcher_recvs__msg[1] = watcher_watcher_recvs__1__msg;
  assign watcher_watcher_recvs__msg[2] = watcher_watcher_recvs__2__msg;
  assign watcher_watcher_recvs__msg[3] = watcher_watcher_recvs__3__msg;
  assign watcher_watcher_recvs__msg[4] = watcher_watcher_recvs__4__msg;
  assign watcher_watcher_recvs__msg[5] = watcher_watcher_recvs__5__msg;
  assign watcher_watcher_recvs__msg[6] = watcher_watcher_recvs__6__msg;
  assign watcher_watcher_recvs__msg[7] = watcher_watcher_recvs__7__msg;
  assign watcher_watcher_recvs__0__rdy = watcher_watcher_recvs__rdy[0];
  assign watcher_watcher_recvs__1__rdy = watcher_watcher_recvs__rdy[1];
  assign watcher_watcher_recvs__2__rdy = watcher_watcher_recvs__rdy[2];
  assign watcher_watcher_recvs__3__rdy = watcher_watcher_recvs__rdy[3];
  assign watcher_watcher_recvs__4__rdy = watcher_watcher_recvs__rdy[4];
  assign watcher_watcher_recvs__5__rdy = watcher_watcher_recvs__rdy[5];
  assign watcher_watcher_recvs__6__rdy = watcher_watcher_recvs__rdy[6];
  assign watcher_watcher_recvs__7__rdy = watcher_watcher_recvs__rdy[7];
  assign watcher_watcher_send_mem_sends__0__en = watcher_watcher_send_mem_sends__en[0];
  assign watcher_watcher_send_mem_sends__1__en = watcher_watcher_send_mem_sends__en[1];
  assign watcher_watcher_send_mem_sends__2__en = watcher_watcher_send_mem_sends__en[2];
  assign watcher_watcher_send_mem_sends__3__en = watcher_watcher_send_mem_sends__en[3];
  assign watcher_watcher_send_mem_sends__4__en = watcher_watcher_send_mem_sends__en[4];
  assign watcher_watcher_send_mem_sends__5__en = watcher_watcher_send_mem_sends__en[5];
  assign watcher_watcher_send_mem_sends__6__en = watcher_watcher_send_mem_sends__en[6];
  assign watcher_watcher_send_mem_sends__7__en = watcher_watcher_send_mem_sends__en[7];
  assign watcher_watcher_send_mem_sends__0__msg = watcher_watcher_send_mem_sends__msg[0];
  assign watcher_watcher_send_mem_sends__1__msg = watcher_watcher_send_mem_sends__msg[1];
  assign watcher_watcher_send_mem_sends__2__msg = watcher_watcher_send_mem_sends__msg[2];
  assign watcher_watcher_send_mem_sends__3__msg = watcher_watcher_send_mem_sends__msg[3];
  assign watcher_watcher_send_mem_sends__4__msg = watcher_watcher_send_mem_sends__msg[4];
  assign watcher_watcher_send_mem_sends__5__msg = watcher_watcher_send_mem_sends__msg[5];
  assign watcher_watcher_send_mem_sends__6__msg = watcher_watcher_send_mem_sends__msg[6];
  assign watcher_watcher_send_mem_sends__7__msg = watcher_watcher_send_mem_sends__msg[7];
  assign watcher_watcher_send_mem_sends__rdy[0] = watcher_watcher_send_mem_sends__0__rdy;
  assign watcher_watcher_send_mem_sends__rdy[1] = watcher_watcher_send_mem_sends__1__rdy;
  assign watcher_watcher_send_mem_sends__rdy[2] = watcher_watcher_send_mem_sends__2__rdy;
  assign watcher_watcher_send_mem_sends__rdy[3] = watcher_watcher_send_mem_sends__3__rdy;
  assign watcher_watcher_send_mem_sends__rdy[4] = watcher_watcher_send_mem_sends__4__rdy;
  assign watcher_watcher_send_mem_sends__rdy[5] = watcher_watcher_send_mem_sends__5__rdy;
  assign watcher_watcher_send_mem_sends__rdy[6] = watcher_watcher_send_mem_sends__6__rdy;
  assign watcher_watcher_send_mem_sends__rdy[7] = watcher_watcher_send_mem_sends__7__rdy;
  assign n_to_trail__clk = clk;
  assign n_to_trail__reset = reset;
  assign trail_to_watchers__clk = clk;
  assign trail_to_watchers__reset = reset;
  assign trail__clk = clk;
  assign trail__reset = reset;
  assign watchers__clk[0] = clk;
  assign watchers__reset[0] = reset;
  assign watchers__clk[1] = clk;
  assign watchers__reset[1] = reset;
  assign watchers__clk[2] = clk;
  assign watchers__reset[2] = reset;
  assign watchers__clk[3] = clk;
  assign watchers__reset[3] = reset;
  assign watchers__clk[4] = clk;
  assign watchers__reset[4] = reset;
  assign watchers__clk[5] = clk;
  assign watchers__reset[5] = reset;
  assign watchers__clk[6] = clk;
  assign watchers__reset[6] = reset;
  assign watchers__clk[7] = clk;
  assign watchers__reset[7] = reset;
  assign clauses__clk[0] = clk;
  assign clauses__reset[0] = reset;
  assign clauses__clk[1] = clk;
  assign clauses__reset[1] = reset;
  assign clauses__clk[2] = clk;
  assign clauses__reset[2] = reset;
  assign clauses__clk[3] = clk;
  assign clauses__reset[3] = reset;
  assign clauses__clk[4] = clk;
  assign clauses__reset[4] = reset;
  assign clauses__clk[5] = clk;
  assign clauses__reset[5] = reset;
  assign clauses__clk[6] = clk;
  assign clauses__reset[6] = reset;
  assign clauses__clk[7] = clk;
  assign clauses__reset[7] = reset;
  assign clause_size_mem_sends__en[0] = clauses__size_mem_send__en[0];
  assign clause_size_mem_sends__msg[0] = clauses__size_mem_send__msg[0];
  assign clauses__size_mem_send__rdy[0] = clause_size_mem_sends__rdy[0];
  assign clauses__size_mem_recv__en[0] = clause_size_mem_recvs__en[0];
  assign clauses__size_mem_recv__msg[0] = clause_size_mem_recvs__msg[0];
  assign clause_size_mem_recvs__rdy[0] = clauses__size_mem_recv__rdy[0];
  assign clause_fetcher_mem_outs__en[0] = clauses__fetcher_mem_out__en[0];
  assign clause_fetcher_mem_outs__msg[0] = clauses__fetcher_mem_out__msg[0];
  assign clauses__fetcher_mem_out__rdy[0] = clause_fetcher_mem_outs__rdy[0];
  assign clauses__fetcher_mem_in__en[0] = clause_fetcher_mem_ins__en[0];
  assign clauses__fetcher_mem_in__msg[0] = clause_fetcher_mem_ins__msg[0];
  assign clause_fetcher_mem_ins__rdy[0] = clauses__fetcher_mem_in__rdy[0];
  assign clause_value_mem_sends__en[0] = clauses__value_mem_send__en[0];
  assign clause_value_mem_sends__msg[0] = clauses__value_mem_send__msg[0];
  assign clauses__value_mem_send__rdy[0] = clause_value_mem_sends__rdy[0];
  assign clauses__value_mem_recv__en[0] = clause_value_mem_recvs__en[0];
  assign clauses__value_mem_recv__msg[0] = clause_value_mem_recvs__msg[0];
  assign clause_value_mem_recvs__rdy[0] = clauses__value_mem_recv__rdy[0];
  assign clause_confs[0] = clauses__conf[0];
  assign watcher_lit_to_size_addr_mem_sends__en[0] = watchers__lit_to_size_addr_mem_send__en[0];
  assign watcher_lit_to_size_addr_mem_sends__msg[0] = watchers__lit_to_size_addr_mem_send__msg[0];
  assign watchers__lit_to_size_addr_mem_send__rdy[0] = watcher_lit_to_size_addr_mem_sends__rdy[0];
  assign watchers__lit_to_size_addr_mem_recv__en[0] = watcher_lit_to_size_addr_mem_recvs__en[0];
  assign watchers__lit_to_size_addr_mem_recv__msg[0] = watcher_lit_to_size_addr_mem_recvs__msg[0];
  assign watcher_lit_to_size_addr_mem_recvs__rdy[0] = watchers__lit_to_size_addr_mem_recv__rdy[0];
  assign watcher_watcher_send_mem_sends__en[0] = watchers__watcher_send_mem_send__en[0];
  assign watcher_watcher_send_mem_sends__msg[0] = watchers__watcher_send_mem_send__msg[0];
  assign watchers__watcher_send_mem_send__rdy[0] = watcher_watcher_send_mem_sends__rdy[0];
  assign watchers__watcher_recv__en[0] = watcher_watcher_recvs__en[0];
  assign watchers__watcher_recv__msg[0] = watcher_watcher_recvs__msg[0];
  assign watcher_watcher_recvs__rdy[0] = watchers__watcher_recv__rdy[0];
  assign watcher_value_sends__en[0] = watchers__value_send__en[0];
  assign watcher_value_sends__msg[0] = watchers__value_send__msg[0];
  assign watchers__value_send__rdy[0] = watcher_value_sends__rdy[0];
  assign watchers__value_recv__en[0] = watcher_value_recvs__en[0];
  assign watchers__value_recv__msg[0] = watcher_value_recvs__msg[0];
  assign watcher_value_recvs__rdy[0] = watchers__value_recv__rdy[0];
  assign clauses__cr_recv__en[0] = watchers__cr_send__en[0];
  assign clauses__cr_recv__msg[0] = watchers__cr_send__msg[0];
  assign watchers__cr_send__rdy[0] = clauses__cr_recv__rdy[0];
  assign watchers__from_trail_recv__en[0] = trail_to_watchers__sends__en[0];
  assign watchers__from_trail_recv__msg[0] = trail_to_watchers__sends__msg[0];
  assign trail_to_watchers__sends__rdy[0] = watchers__from_trail_recv__rdy[0];
  assign n_to_trail__recvs__en[0] = clauses__to_trail__en[0];
  assign n_to_trail__recvs__msg[0] = clauses__to_trail__msg[0];
  assign clauses__to_trail__rdy[0] = n_to_trail__recvs__rdy[0];
  assign clause_size_mem_sends__en[1] = clauses__size_mem_send__en[1];
  assign clause_size_mem_sends__msg[1] = clauses__size_mem_send__msg[1];
  assign clauses__size_mem_send__rdy[1] = clause_size_mem_sends__rdy[1];
  assign clauses__size_mem_recv__en[1] = clause_size_mem_recvs__en[1];
  assign clauses__size_mem_recv__msg[1] = clause_size_mem_recvs__msg[1];
  assign clause_size_mem_recvs__rdy[1] = clauses__size_mem_recv__rdy[1];
  assign clause_fetcher_mem_outs__en[1] = clauses__fetcher_mem_out__en[1];
  assign clause_fetcher_mem_outs__msg[1] = clauses__fetcher_mem_out__msg[1];
  assign clauses__fetcher_mem_out__rdy[1] = clause_fetcher_mem_outs__rdy[1];
  assign clauses__fetcher_mem_in__en[1] = clause_fetcher_mem_ins__en[1];
  assign clauses__fetcher_mem_in__msg[1] = clause_fetcher_mem_ins__msg[1];
  assign clause_fetcher_mem_ins__rdy[1] = clauses__fetcher_mem_in__rdy[1];
  assign clause_value_mem_sends__en[1] = clauses__value_mem_send__en[1];
  assign clause_value_mem_sends__msg[1] = clauses__value_mem_send__msg[1];
  assign clauses__value_mem_send__rdy[1] = clause_value_mem_sends__rdy[1];
  assign clauses__value_mem_recv__en[1] = clause_value_mem_recvs__en[1];
  assign clauses__value_mem_recv__msg[1] = clause_value_mem_recvs__msg[1];
  assign clause_value_mem_recvs__rdy[1] = clauses__value_mem_recv__rdy[1];
  assign clause_confs[1] = clauses__conf[1];
  assign watcher_lit_to_size_addr_mem_sends__en[1] = watchers__lit_to_size_addr_mem_send__en[1];
  assign watcher_lit_to_size_addr_mem_sends__msg[1] = watchers__lit_to_size_addr_mem_send__msg[1];
  assign watchers__lit_to_size_addr_mem_send__rdy[1] = watcher_lit_to_size_addr_mem_sends__rdy[1];
  assign watchers__lit_to_size_addr_mem_recv__en[1] = watcher_lit_to_size_addr_mem_recvs__en[1];
  assign watchers__lit_to_size_addr_mem_recv__msg[1] = watcher_lit_to_size_addr_mem_recvs__msg[1];
  assign watcher_lit_to_size_addr_mem_recvs__rdy[1] = watchers__lit_to_size_addr_mem_recv__rdy[1];
  assign watcher_watcher_send_mem_sends__en[1] = watchers__watcher_send_mem_send__en[1];
  assign watcher_watcher_send_mem_sends__msg[1] = watchers__watcher_send_mem_send__msg[1];
  assign watchers__watcher_send_mem_send__rdy[1] = watcher_watcher_send_mem_sends__rdy[1];
  assign watchers__watcher_recv__en[1] = watcher_watcher_recvs__en[1];
  assign watchers__watcher_recv__msg[1] = watcher_watcher_recvs__msg[1];
  assign watcher_watcher_recvs__rdy[1] = watchers__watcher_recv__rdy[1];
  assign watcher_value_sends__en[1] = watchers__value_send__en[1];
  assign watcher_value_sends__msg[1] = watchers__value_send__msg[1];
  assign watchers__value_send__rdy[1] = watcher_value_sends__rdy[1];
  assign watchers__value_recv__en[1] = watcher_value_recvs__en[1];
  assign watchers__value_recv__msg[1] = watcher_value_recvs__msg[1];
  assign watcher_value_recvs__rdy[1] = watchers__value_recv__rdy[1];
  assign clauses__cr_recv__en[1] = watchers__cr_send__en[1];
  assign clauses__cr_recv__msg[1] = watchers__cr_send__msg[1];
  assign watchers__cr_send__rdy[1] = clauses__cr_recv__rdy[1];
  assign watchers__from_trail_recv__en[1] = trail_to_watchers__sends__en[1];
  assign watchers__from_trail_recv__msg[1] = trail_to_watchers__sends__msg[1];
  assign trail_to_watchers__sends__rdy[1] = watchers__from_trail_recv__rdy[1];
  assign n_to_trail__recvs__en[1] = clauses__to_trail__en[1];
  assign n_to_trail__recvs__msg[1] = clauses__to_trail__msg[1];
  assign clauses__to_trail__rdy[1] = n_to_trail__recvs__rdy[1];
  assign clause_size_mem_sends__en[2] = clauses__size_mem_send__en[2];
  assign clause_size_mem_sends__msg[2] = clauses__size_mem_send__msg[2];
  assign clauses__size_mem_send__rdy[2] = clause_size_mem_sends__rdy[2];
  assign clauses__size_mem_recv__en[2] = clause_size_mem_recvs__en[2];
  assign clauses__size_mem_recv__msg[2] = clause_size_mem_recvs__msg[2];
  assign clause_size_mem_recvs__rdy[2] = clauses__size_mem_recv__rdy[2];
  assign clause_fetcher_mem_outs__en[2] = clauses__fetcher_mem_out__en[2];
  assign clause_fetcher_mem_outs__msg[2] = clauses__fetcher_mem_out__msg[2];
  assign clauses__fetcher_mem_out__rdy[2] = clause_fetcher_mem_outs__rdy[2];
  assign clauses__fetcher_mem_in__en[2] = clause_fetcher_mem_ins__en[2];
  assign clauses__fetcher_mem_in__msg[2] = clause_fetcher_mem_ins__msg[2];
  assign clause_fetcher_mem_ins__rdy[2] = clauses__fetcher_mem_in__rdy[2];
  assign clause_value_mem_sends__en[2] = clauses__value_mem_send__en[2];
  assign clause_value_mem_sends__msg[2] = clauses__value_mem_send__msg[2];
  assign clauses__value_mem_send__rdy[2] = clause_value_mem_sends__rdy[2];
  assign clauses__value_mem_recv__en[2] = clause_value_mem_recvs__en[2];
  assign clauses__value_mem_recv__msg[2] = clause_value_mem_recvs__msg[2];
  assign clause_value_mem_recvs__rdy[2] = clauses__value_mem_recv__rdy[2];
  assign clause_confs[2] = clauses__conf[2];
  assign watcher_lit_to_size_addr_mem_sends__en[2] = watchers__lit_to_size_addr_mem_send__en[2];
  assign watcher_lit_to_size_addr_mem_sends__msg[2] = watchers__lit_to_size_addr_mem_send__msg[2];
  assign watchers__lit_to_size_addr_mem_send__rdy[2] = watcher_lit_to_size_addr_mem_sends__rdy[2];
  assign watchers__lit_to_size_addr_mem_recv__en[2] = watcher_lit_to_size_addr_mem_recvs__en[2];
  assign watchers__lit_to_size_addr_mem_recv__msg[2] = watcher_lit_to_size_addr_mem_recvs__msg[2];
  assign watcher_lit_to_size_addr_mem_recvs__rdy[2] = watchers__lit_to_size_addr_mem_recv__rdy[2];
  assign watcher_watcher_send_mem_sends__en[2] = watchers__watcher_send_mem_send__en[2];
  assign watcher_watcher_send_mem_sends__msg[2] = watchers__watcher_send_mem_send__msg[2];
  assign watchers__watcher_send_mem_send__rdy[2] = watcher_watcher_send_mem_sends__rdy[2];
  assign watchers__watcher_recv__en[2] = watcher_watcher_recvs__en[2];
  assign watchers__watcher_recv__msg[2] = watcher_watcher_recvs__msg[2];
  assign watcher_watcher_recvs__rdy[2] = watchers__watcher_recv__rdy[2];
  assign watcher_value_sends__en[2] = watchers__value_send__en[2];
  assign watcher_value_sends__msg[2] = watchers__value_send__msg[2];
  assign watchers__value_send__rdy[2] = watcher_value_sends__rdy[2];
  assign watchers__value_recv__en[2] = watcher_value_recvs__en[2];
  assign watchers__value_recv__msg[2] = watcher_value_recvs__msg[2];
  assign watcher_value_recvs__rdy[2] = watchers__value_recv__rdy[2];
  assign clauses__cr_recv__en[2] = watchers__cr_send__en[2];
  assign clauses__cr_recv__msg[2] = watchers__cr_send__msg[2];
  assign watchers__cr_send__rdy[2] = clauses__cr_recv__rdy[2];
  assign watchers__from_trail_recv__en[2] = trail_to_watchers__sends__en[2];
  assign watchers__from_trail_recv__msg[2] = trail_to_watchers__sends__msg[2];
  assign trail_to_watchers__sends__rdy[2] = watchers__from_trail_recv__rdy[2];
  assign n_to_trail__recvs__en[2] = clauses__to_trail__en[2];
  assign n_to_trail__recvs__msg[2] = clauses__to_trail__msg[2];
  assign clauses__to_trail__rdy[2] = n_to_trail__recvs__rdy[2];
  assign clause_size_mem_sends__en[3] = clauses__size_mem_send__en[3];
  assign clause_size_mem_sends__msg[3] = clauses__size_mem_send__msg[3];
  assign clauses__size_mem_send__rdy[3] = clause_size_mem_sends__rdy[3];
  assign clauses__size_mem_recv__en[3] = clause_size_mem_recvs__en[3];
  assign clauses__size_mem_recv__msg[3] = clause_size_mem_recvs__msg[3];
  assign clause_size_mem_recvs__rdy[3] = clauses__size_mem_recv__rdy[3];
  assign clause_fetcher_mem_outs__en[3] = clauses__fetcher_mem_out__en[3];
  assign clause_fetcher_mem_outs__msg[3] = clauses__fetcher_mem_out__msg[3];
  assign clauses__fetcher_mem_out__rdy[3] = clause_fetcher_mem_outs__rdy[3];
  assign clauses__fetcher_mem_in__en[3] = clause_fetcher_mem_ins__en[3];
  assign clauses__fetcher_mem_in__msg[3] = clause_fetcher_mem_ins__msg[3];
  assign clause_fetcher_mem_ins__rdy[3] = clauses__fetcher_mem_in__rdy[3];
  assign clause_value_mem_sends__en[3] = clauses__value_mem_send__en[3];
  assign clause_value_mem_sends__msg[3] = clauses__value_mem_send__msg[3];
  assign clauses__value_mem_send__rdy[3] = clause_value_mem_sends__rdy[3];
  assign clauses__value_mem_recv__en[3] = clause_value_mem_recvs__en[3];
  assign clauses__value_mem_recv__msg[3] = clause_value_mem_recvs__msg[3];
  assign clause_value_mem_recvs__rdy[3] = clauses__value_mem_recv__rdy[3];
  assign clause_confs[3] = clauses__conf[3];
  assign watcher_lit_to_size_addr_mem_sends__en[3] = watchers__lit_to_size_addr_mem_send__en[3];
  assign watcher_lit_to_size_addr_mem_sends__msg[3] = watchers__lit_to_size_addr_mem_send__msg[3];
  assign watchers__lit_to_size_addr_mem_send__rdy[3] = watcher_lit_to_size_addr_mem_sends__rdy[3];
  assign watchers__lit_to_size_addr_mem_recv__en[3] = watcher_lit_to_size_addr_mem_recvs__en[3];
  assign watchers__lit_to_size_addr_mem_recv__msg[3] = watcher_lit_to_size_addr_mem_recvs__msg[3];
  assign watcher_lit_to_size_addr_mem_recvs__rdy[3] = watchers__lit_to_size_addr_mem_recv__rdy[3];
  assign watcher_watcher_send_mem_sends__en[3] = watchers__watcher_send_mem_send__en[3];
  assign watcher_watcher_send_mem_sends__msg[3] = watchers__watcher_send_mem_send__msg[3];
  assign watchers__watcher_send_mem_send__rdy[3] = watcher_watcher_send_mem_sends__rdy[3];
  assign watchers__watcher_recv__en[3] = watcher_watcher_recvs__en[3];
  assign watchers__watcher_recv__msg[3] = watcher_watcher_recvs__msg[3];
  assign watcher_watcher_recvs__rdy[3] = watchers__watcher_recv__rdy[3];
  assign watcher_value_sends__en[3] = watchers__value_send__en[3];
  assign watcher_value_sends__msg[3] = watchers__value_send__msg[3];
  assign watchers__value_send__rdy[3] = watcher_value_sends__rdy[3];
  assign watchers__value_recv__en[3] = watcher_value_recvs__en[3];
  assign watchers__value_recv__msg[3] = watcher_value_recvs__msg[3];
  assign watcher_value_recvs__rdy[3] = watchers__value_recv__rdy[3];
  assign clauses__cr_recv__en[3] = watchers__cr_send__en[3];
  assign clauses__cr_recv__msg[3] = watchers__cr_send__msg[3];
  assign watchers__cr_send__rdy[3] = clauses__cr_recv__rdy[3];
  assign watchers__from_trail_recv__en[3] = trail_to_watchers__sends__en[3];
  assign watchers__from_trail_recv__msg[3] = trail_to_watchers__sends__msg[3];
  assign trail_to_watchers__sends__rdy[3] = watchers__from_trail_recv__rdy[3];
  assign n_to_trail__recvs__en[3] = clauses__to_trail__en[3];
  assign n_to_trail__recvs__msg[3] = clauses__to_trail__msg[3];
  assign clauses__to_trail__rdy[3] = n_to_trail__recvs__rdy[3];
  assign clause_size_mem_sends__en[4] = clauses__size_mem_send__en[4];
  assign clause_size_mem_sends__msg[4] = clauses__size_mem_send__msg[4];
  assign clauses__size_mem_send__rdy[4] = clause_size_mem_sends__rdy[4];
  assign clauses__size_mem_recv__en[4] = clause_size_mem_recvs__en[4];
  assign clauses__size_mem_recv__msg[4] = clause_size_mem_recvs__msg[4];
  assign clause_size_mem_recvs__rdy[4] = clauses__size_mem_recv__rdy[4];
  assign clause_fetcher_mem_outs__en[4] = clauses__fetcher_mem_out__en[4];
  assign clause_fetcher_mem_outs__msg[4] = clauses__fetcher_mem_out__msg[4];
  assign clauses__fetcher_mem_out__rdy[4] = clause_fetcher_mem_outs__rdy[4];
  assign clauses__fetcher_mem_in__en[4] = clause_fetcher_mem_ins__en[4];
  assign clauses__fetcher_mem_in__msg[4] = clause_fetcher_mem_ins__msg[4];
  assign clause_fetcher_mem_ins__rdy[4] = clauses__fetcher_mem_in__rdy[4];
  assign clause_value_mem_sends__en[4] = clauses__value_mem_send__en[4];
  assign clause_value_mem_sends__msg[4] = clauses__value_mem_send__msg[4];
  assign clauses__value_mem_send__rdy[4] = clause_value_mem_sends__rdy[4];
  assign clauses__value_mem_recv__en[4] = clause_value_mem_recvs__en[4];
  assign clauses__value_mem_recv__msg[4] = clause_value_mem_recvs__msg[4];
  assign clause_value_mem_recvs__rdy[4] = clauses__value_mem_recv__rdy[4];
  assign clause_confs[4] = clauses__conf[4];
  assign watcher_lit_to_size_addr_mem_sends__en[4] = watchers__lit_to_size_addr_mem_send__en[4];
  assign watcher_lit_to_size_addr_mem_sends__msg[4] = watchers__lit_to_size_addr_mem_send__msg[4];
  assign watchers__lit_to_size_addr_mem_send__rdy[4] = watcher_lit_to_size_addr_mem_sends__rdy[4];
  assign watchers__lit_to_size_addr_mem_recv__en[4] = watcher_lit_to_size_addr_mem_recvs__en[4];
  assign watchers__lit_to_size_addr_mem_recv__msg[4] = watcher_lit_to_size_addr_mem_recvs__msg[4];
  assign watcher_lit_to_size_addr_mem_recvs__rdy[4] = watchers__lit_to_size_addr_mem_recv__rdy[4];
  assign watcher_watcher_send_mem_sends__en[4] = watchers__watcher_send_mem_send__en[4];
  assign watcher_watcher_send_mem_sends__msg[4] = watchers__watcher_send_mem_send__msg[4];
  assign watchers__watcher_send_mem_send__rdy[4] = watcher_watcher_send_mem_sends__rdy[4];
  assign watchers__watcher_recv__en[4] = watcher_watcher_recvs__en[4];
  assign watchers__watcher_recv__msg[4] = watcher_watcher_recvs__msg[4];
  assign watcher_watcher_recvs__rdy[4] = watchers__watcher_recv__rdy[4];
  assign watcher_value_sends__en[4] = watchers__value_send__en[4];
  assign watcher_value_sends__msg[4] = watchers__value_send__msg[4];
  assign watchers__value_send__rdy[4] = watcher_value_sends__rdy[4];
  assign watchers__value_recv__en[4] = watcher_value_recvs__en[4];
  assign watchers__value_recv__msg[4] = watcher_value_recvs__msg[4];
  assign watcher_value_recvs__rdy[4] = watchers__value_recv__rdy[4];
  assign clauses__cr_recv__en[4] = watchers__cr_send__en[4];
  assign clauses__cr_recv__msg[4] = watchers__cr_send__msg[4];
  assign watchers__cr_send__rdy[4] = clauses__cr_recv__rdy[4];
  assign watchers__from_trail_recv__en[4] = trail_to_watchers__sends__en[4];
  assign watchers__from_trail_recv__msg[4] = trail_to_watchers__sends__msg[4];
  assign trail_to_watchers__sends__rdy[4] = watchers__from_trail_recv__rdy[4];
  assign n_to_trail__recvs__en[4] = clauses__to_trail__en[4];
  assign n_to_trail__recvs__msg[4] = clauses__to_trail__msg[4];
  assign clauses__to_trail__rdy[4] = n_to_trail__recvs__rdy[4];
  assign clause_size_mem_sends__en[5] = clauses__size_mem_send__en[5];
  assign clause_size_mem_sends__msg[5] = clauses__size_mem_send__msg[5];
  assign clauses__size_mem_send__rdy[5] = clause_size_mem_sends__rdy[5];
  assign clauses__size_mem_recv__en[5] = clause_size_mem_recvs__en[5];
  assign clauses__size_mem_recv__msg[5] = clause_size_mem_recvs__msg[5];
  assign clause_size_mem_recvs__rdy[5] = clauses__size_mem_recv__rdy[5];
  assign clause_fetcher_mem_outs__en[5] = clauses__fetcher_mem_out__en[5];
  assign clause_fetcher_mem_outs__msg[5] = clauses__fetcher_mem_out__msg[5];
  assign clauses__fetcher_mem_out__rdy[5] = clause_fetcher_mem_outs__rdy[5];
  assign clauses__fetcher_mem_in__en[5] = clause_fetcher_mem_ins__en[5];
  assign clauses__fetcher_mem_in__msg[5] = clause_fetcher_mem_ins__msg[5];
  assign clause_fetcher_mem_ins__rdy[5] = clauses__fetcher_mem_in__rdy[5];
  assign clause_value_mem_sends__en[5] = clauses__value_mem_send__en[5];
  assign clause_value_mem_sends__msg[5] = clauses__value_mem_send__msg[5];
  assign clauses__value_mem_send__rdy[5] = clause_value_mem_sends__rdy[5];
  assign clauses__value_mem_recv__en[5] = clause_value_mem_recvs__en[5];
  assign clauses__value_mem_recv__msg[5] = clause_value_mem_recvs__msg[5];
  assign clause_value_mem_recvs__rdy[5] = clauses__value_mem_recv__rdy[5];
  assign clause_confs[5] = clauses__conf[5];
  assign watcher_lit_to_size_addr_mem_sends__en[5] = watchers__lit_to_size_addr_mem_send__en[5];
  assign watcher_lit_to_size_addr_mem_sends__msg[5] = watchers__lit_to_size_addr_mem_send__msg[5];
  assign watchers__lit_to_size_addr_mem_send__rdy[5] = watcher_lit_to_size_addr_mem_sends__rdy[5];
  assign watchers__lit_to_size_addr_mem_recv__en[5] = watcher_lit_to_size_addr_mem_recvs__en[5];
  assign watchers__lit_to_size_addr_mem_recv__msg[5] = watcher_lit_to_size_addr_mem_recvs__msg[5];
  assign watcher_lit_to_size_addr_mem_recvs__rdy[5] = watchers__lit_to_size_addr_mem_recv__rdy[5];
  assign watcher_watcher_send_mem_sends__en[5] = watchers__watcher_send_mem_send__en[5];
  assign watcher_watcher_send_mem_sends__msg[5] = watchers__watcher_send_mem_send__msg[5];
  assign watchers__watcher_send_mem_send__rdy[5] = watcher_watcher_send_mem_sends__rdy[5];
  assign watchers__watcher_recv__en[5] = watcher_watcher_recvs__en[5];
  assign watchers__watcher_recv__msg[5] = watcher_watcher_recvs__msg[5];
  assign watcher_watcher_recvs__rdy[5] = watchers__watcher_recv__rdy[5];
  assign watcher_value_sends__en[5] = watchers__value_send__en[5];
  assign watcher_value_sends__msg[5] = watchers__value_send__msg[5];
  assign watchers__value_send__rdy[5] = watcher_value_sends__rdy[5];
  assign watchers__value_recv__en[5] = watcher_value_recvs__en[5];
  assign watchers__value_recv__msg[5] = watcher_value_recvs__msg[5];
  assign watcher_value_recvs__rdy[5] = watchers__value_recv__rdy[5];
  assign clauses__cr_recv__en[5] = watchers__cr_send__en[5];
  assign clauses__cr_recv__msg[5] = watchers__cr_send__msg[5];
  assign watchers__cr_send__rdy[5] = clauses__cr_recv__rdy[5];
  assign watchers__from_trail_recv__en[5] = trail_to_watchers__sends__en[5];
  assign watchers__from_trail_recv__msg[5] = trail_to_watchers__sends__msg[5];
  assign trail_to_watchers__sends__rdy[5] = watchers__from_trail_recv__rdy[5];
  assign n_to_trail__recvs__en[5] = clauses__to_trail__en[5];
  assign n_to_trail__recvs__msg[5] = clauses__to_trail__msg[5];
  assign clauses__to_trail__rdy[5] = n_to_trail__recvs__rdy[5];
  assign clause_size_mem_sends__en[6] = clauses__size_mem_send__en[6];
  assign clause_size_mem_sends__msg[6] = clauses__size_mem_send__msg[6];
  assign clauses__size_mem_send__rdy[6] = clause_size_mem_sends__rdy[6];
  assign clauses__size_mem_recv__en[6] = clause_size_mem_recvs__en[6];
  assign clauses__size_mem_recv__msg[6] = clause_size_mem_recvs__msg[6];
  assign clause_size_mem_recvs__rdy[6] = clauses__size_mem_recv__rdy[6];
  assign clause_fetcher_mem_outs__en[6] = clauses__fetcher_mem_out__en[6];
  assign clause_fetcher_mem_outs__msg[6] = clauses__fetcher_mem_out__msg[6];
  assign clauses__fetcher_mem_out__rdy[6] = clause_fetcher_mem_outs__rdy[6];
  assign clauses__fetcher_mem_in__en[6] = clause_fetcher_mem_ins__en[6];
  assign clauses__fetcher_mem_in__msg[6] = clause_fetcher_mem_ins__msg[6];
  assign clause_fetcher_mem_ins__rdy[6] = clauses__fetcher_mem_in__rdy[6];
  assign clause_value_mem_sends__en[6] = clauses__value_mem_send__en[6];
  assign clause_value_mem_sends__msg[6] = clauses__value_mem_send__msg[6];
  assign clauses__value_mem_send__rdy[6] = clause_value_mem_sends__rdy[6];
  assign clauses__value_mem_recv__en[6] = clause_value_mem_recvs__en[6];
  assign clauses__value_mem_recv__msg[6] = clause_value_mem_recvs__msg[6];
  assign clause_value_mem_recvs__rdy[6] = clauses__value_mem_recv__rdy[6];
  assign clause_confs[6] = clauses__conf[6];
  assign watcher_lit_to_size_addr_mem_sends__en[6] = watchers__lit_to_size_addr_mem_send__en[6];
  assign watcher_lit_to_size_addr_mem_sends__msg[6] = watchers__lit_to_size_addr_mem_send__msg[6];
  assign watchers__lit_to_size_addr_mem_send__rdy[6] = watcher_lit_to_size_addr_mem_sends__rdy[6];
  assign watchers__lit_to_size_addr_mem_recv__en[6] = watcher_lit_to_size_addr_mem_recvs__en[6];
  assign watchers__lit_to_size_addr_mem_recv__msg[6] = watcher_lit_to_size_addr_mem_recvs__msg[6];
  assign watcher_lit_to_size_addr_mem_recvs__rdy[6] = watchers__lit_to_size_addr_mem_recv__rdy[6];
  assign watcher_watcher_send_mem_sends__en[6] = watchers__watcher_send_mem_send__en[6];
  assign watcher_watcher_send_mem_sends__msg[6] = watchers__watcher_send_mem_send__msg[6];
  assign watchers__watcher_send_mem_send__rdy[6] = watcher_watcher_send_mem_sends__rdy[6];
  assign watchers__watcher_recv__en[6] = watcher_watcher_recvs__en[6];
  assign watchers__watcher_recv__msg[6] = watcher_watcher_recvs__msg[6];
  assign watcher_watcher_recvs__rdy[6] = watchers__watcher_recv__rdy[6];
  assign watcher_value_sends__en[6] = watchers__value_send__en[6];
  assign watcher_value_sends__msg[6] = watchers__value_send__msg[6];
  assign watchers__value_send__rdy[6] = watcher_value_sends__rdy[6];
  assign watchers__value_recv__en[6] = watcher_value_recvs__en[6];
  assign watchers__value_recv__msg[6] = watcher_value_recvs__msg[6];
  assign watcher_value_recvs__rdy[6] = watchers__value_recv__rdy[6];
  assign clauses__cr_recv__en[6] = watchers__cr_send__en[6];
  assign clauses__cr_recv__msg[6] = watchers__cr_send__msg[6];
  assign watchers__cr_send__rdy[6] = clauses__cr_recv__rdy[6];
  assign watchers__from_trail_recv__en[6] = trail_to_watchers__sends__en[6];
  assign watchers__from_trail_recv__msg[6] = trail_to_watchers__sends__msg[6];
  assign trail_to_watchers__sends__rdy[6] = watchers__from_trail_recv__rdy[6];
  assign n_to_trail__recvs__en[6] = clauses__to_trail__en[6];
  assign n_to_trail__recvs__msg[6] = clauses__to_trail__msg[6];
  assign clauses__to_trail__rdy[6] = n_to_trail__recvs__rdy[6];
  assign clause_size_mem_sends__en[7] = clauses__size_mem_send__en[7];
  assign clause_size_mem_sends__msg[7] = clauses__size_mem_send__msg[7];
  assign clauses__size_mem_send__rdy[7] = clause_size_mem_sends__rdy[7];
  assign clauses__size_mem_recv__en[7] = clause_size_mem_recvs__en[7];
  assign clauses__size_mem_recv__msg[7] = clause_size_mem_recvs__msg[7];
  assign clause_size_mem_recvs__rdy[7] = clauses__size_mem_recv__rdy[7];
  assign clause_fetcher_mem_outs__en[7] = clauses__fetcher_mem_out__en[7];
  assign clause_fetcher_mem_outs__msg[7] = clauses__fetcher_mem_out__msg[7];
  assign clauses__fetcher_mem_out__rdy[7] = clause_fetcher_mem_outs__rdy[7];
  assign clauses__fetcher_mem_in__en[7] = clause_fetcher_mem_ins__en[7];
  assign clauses__fetcher_mem_in__msg[7] = clause_fetcher_mem_ins__msg[7];
  assign clause_fetcher_mem_ins__rdy[7] = clauses__fetcher_mem_in__rdy[7];
  assign clause_value_mem_sends__en[7] = clauses__value_mem_send__en[7];
  assign clause_value_mem_sends__msg[7] = clauses__value_mem_send__msg[7];
  assign clauses__value_mem_send__rdy[7] = clause_value_mem_sends__rdy[7];
  assign clauses__value_mem_recv__en[7] = clause_value_mem_recvs__en[7];
  assign clauses__value_mem_recv__msg[7] = clause_value_mem_recvs__msg[7];
  assign clause_value_mem_recvs__rdy[7] = clauses__value_mem_recv__rdy[7];
  assign clause_confs[7] = clauses__conf[7];
  assign watcher_lit_to_size_addr_mem_sends__en[7] = watchers__lit_to_size_addr_mem_send__en[7];
  assign watcher_lit_to_size_addr_mem_sends__msg[7] = watchers__lit_to_size_addr_mem_send__msg[7];
  assign watchers__lit_to_size_addr_mem_send__rdy[7] = watcher_lit_to_size_addr_mem_sends__rdy[7];
  assign watchers__lit_to_size_addr_mem_recv__en[7] = watcher_lit_to_size_addr_mem_recvs__en[7];
  assign watchers__lit_to_size_addr_mem_recv__msg[7] = watcher_lit_to_size_addr_mem_recvs__msg[7];
  assign watcher_lit_to_size_addr_mem_recvs__rdy[7] = watchers__lit_to_size_addr_mem_recv__rdy[7];
  assign watcher_watcher_send_mem_sends__en[7] = watchers__watcher_send_mem_send__en[7];
  assign watcher_watcher_send_mem_sends__msg[7] = watchers__watcher_send_mem_send__msg[7];
  assign watchers__watcher_send_mem_send__rdy[7] = watcher_watcher_send_mem_sends__rdy[7];
  assign watchers__watcher_recv__en[7] = watcher_watcher_recvs__en[7];
  assign watchers__watcher_recv__msg[7] = watcher_watcher_recvs__msg[7];
  assign watcher_watcher_recvs__rdy[7] = watchers__watcher_recv__rdy[7];
  assign watcher_value_sends__en[7] = watchers__value_send__en[7];
  assign watcher_value_sends__msg[7] = watchers__value_send__msg[7];
  assign watchers__value_send__rdy[7] = watcher_value_sends__rdy[7];
  assign watchers__value_recv__en[7] = watcher_value_recvs__en[7];
  assign watchers__value_recv__msg[7] = watcher_value_recvs__msg[7];
  assign watcher_value_recvs__rdy[7] = watchers__value_recv__rdy[7];
  assign clauses__cr_recv__en[7] = watchers__cr_send__en[7];
  assign clauses__cr_recv__msg[7] = watchers__cr_send__msg[7];
  assign watchers__cr_send__rdy[7] = clauses__cr_recv__rdy[7];
  assign watchers__from_trail_recv__en[7] = trail_to_watchers__sends__en[7];
  assign watchers__from_trail_recv__msg[7] = trail_to_watchers__sends__msg[7];
  assign trail_to_watchers__sends__rdy[7] = watchers__from_trail_recv__rdy[7];
  assign n_to_trail__recvs__en[7] = clauses__to_trail__en[7];
  assign n_to_trail__recvs__msg[7] = clauses__to_trail__msg[7];
  assign clauses__to_trail__rdy[7] = n_to_trail__recvs__rdy[7];
  assign n_to_trail__recvs__en[8] = trail_input_ifc__en;
  assign n_to_trail__recvs__msg[8] = trail_input_ifc__msg;
  assign trail_input_ifc__rdy = n_to_trail__recvs__rdy[8];
  assign trail_to_watchers__recv__en = trail__send__en;
  assign trail_to_watchers__recv__msg = trail__send__msg;
  assign trail__send__rdy = trail_to_watchers__recv__rdy;
  assign trail__recv__en = n_to_trail__send__en;
  assign trail__recv__msg = n_to_trail__send__msg;
  assign n_to_trail__send__rdy = trail__recv__rdy;

endmodule
