//-------------------------------------------------------------------------
// TestComponent_noparam.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL yosys-SystemVerilog translation pass.

// PyMTL Component PipeQueueCtrlRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module PipeQueueCtrlRTL__num_entries_64
(
  input  logic [0:0]    clk,
  output logic [6:0]    count,
  input  logic [0:0]    deq_en,
  output logic [0:0]    deq_rdy,
  input  logic [0:0]    enq_en,
  output logic [0:0]    enq_rdy,
  output logic [5:0]    raddr,
  input  logic [0:0]    reset,
  output logic [5:0]    waddr,
  output logic [0:0]    wen
);
  // Wire declarations
  logic [0:0]    deq_xfer;
  logic [0:0]    enq_xfer;
  logic [5:0]    head;
  logic [5:0]    tail;

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:202
  // s.deq_rdy //= lambda: ~s.reset & ( s.count > CountType(0) )
  
  always_comb begin : _lambda__s_q_ctrl_deq_rdy
    deq_rdy = ( ~reset ) & ( count > 7'd0 );
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:206
  // s.deq_xfer //= lambda: s.deq_en & s.deq_rdy
  
  always_comb begin : _lambda__s_q_ctrl_deq_xfer
    deq_xfer = deq_en & deq_rdy;
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:203
  // s.enq_rdy //= lambda: ~s.reset & ( ( s.count < s.num_entries ) | s.deq_en )
  
  always_comb begin : _lambda__s_q_ctrl_enq_rdy
    enq_rdy = ( ~reset ) & ( ( count < 7'd64 ) | deq_en );
  end

  // PyMTL Lambda Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:205
  // s.enq_xfer //= lambda: s.enq_en & s.enq_rdy
  
  always_comb begin : _lambda__s_q_ctrl_enq_xfer
    enq_xfer = enq_en & enq_rdy;
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py:208
  // @update_ff
  // def up_reg():
  // 
  //   if s.reset:
  //     s.head  <<= PtrType(0)
  //     s.tail  <<= PtrType(0)
  //     s.count <<= CountType(0)
  // 
  //   else:
  //     if s.deq_xfer:
  //       s.head <<= s.head + PtrType(1) if s.head < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer:
  //       s.tail <<= s.tail + PtrType(1) if s.tail < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer & ~s.deq_xfer:
  //       s.count <<= s.count + CountType(1)
  //     if ~s.enq_xfer & s.deq_xfer:
  //       s.count <<= s.count - CountType(1)
  
  always_ff @(posedge clk) begin : up_reg
    if ( reset ) begin
      head <= 6'd0;
      tail <= 6'd0;
      count <= 7'd0;
    end
    else begin
      if ( deq_xfer ) begin
        head <= ( head < 6'd63 ) ? head + 6'd1 : 6'd0;
      end
      if ( enq_xfer ) begin
        tail <= ( tail < 6'd63 ) ? tail + 6'd1 : 6'd0;
      end
      if ( enq_xfer & ( ~deq_xfer ) ) begin
        count <= count + 7'd1;
      end
      if ( ( ~enq_xfer ) & deq_xfer ) begin
        count <= count - 7'd1;
      end
    end
  end

  // Connections
  assign wen = enq_xfer;
  assign waddr = tail;
  assign raddr = head;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_Bits32__nregs_64__rd_ports_1__wr_ports_1__const_zero_False
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py
module RegisterFile__b1f7552ff1ee360b
(
  input  logic [0:0]    clk,
  input  logic [5:0]    raddr__0,
  output logic [31:0]   rdata__0,
  input  logic [0:0]    reset,
  input  logic [5:0]    waddr__0,
  input  logic [31:0]   wdata__0,
  input  logic [0:0]    wen__0
);
  // Struct/Array ports in the form of wires
  logic [5:0]    raddr [0:0];
  logic [31:0]   rdata [0:0];
  logic [5:0]    waddr [0:0];
  logic [31:0]   wdata [0:0];
  logic [0:0]    wen [0:0];

  // Wire declarations
  logic [31:0]   regs [0:63];

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read(): 
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  integer __loopvar__up_rf_read_i;
  
  always_comb begin : up_rf_read
    for ( __loopvar__up_rf_read_i = 1'd0; __loopvar__up_rf_read_i < 1'd1; __loopvar__up_rf_read_i = __loopvar__up_rf_read_i + 1'd1 )
      rdata[1'(__loopvar__up_rf_read_i)] = regs[raddr[1'(__loopvar__up_rf_read_i)]];
  end

  // PyMTL Update Block Source
  // At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  integer __loopvar__up_rf_write_i;
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( __loopvar__up_rf_write_i = 1'd0; __loopvar__up_rf_write_i < 1'd1; __loopvar__up_rf_write_i = __loopvar__up_rf_write_i + 1'd1 )
      if ( wen[1'(__loopvar__up_rf_write_i)] ) begin
        regs[waddr[1'(__loopvar__up_rf_write_i)]] <= wdata[1'(__loopvar__up_rf_write_i)];
      end
  end

  // Connections
  assign raddr[0] = raddr__0;
  assign rdata__0 = rdata[0];
  assign waddr[0] = waddr__0;
  assign wdata[0] = wdata__0;
  assign wen[0] = wen__0;

endmodule


// PyMTL Component NormalQueueDpathRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module NormalQueueDpathRTL__EntryType_Bits32__num_entries_64
(
  input  logic [0:0]    clk,
  output logic [31:0]   deq_ret,
  input  logic [31:0]   enq_msg,
  input  logic [5:0]    raddr,
  input  logic [0:0]    reset,
  input  logic [5:0]    waddr,
  input  logic [0:0]    wen
);
  // Struct/Array ports of sub-components in the form of wires
  logic [5:0]    queue__raddr [0:0];
  logic [31:0]   queue__rdata [0:0];
  logic [5:0]    queue__waddr [0:0];
  logic [31:0]   queue__wdata [0:0];
  logic [0:0]    queue__wen [0:0];

  // Sub-component declarations
  logic [0:0]    queue__clk;
  logic [5:0]    queue__raddr__0;
  logic [31:0]   queue__rdata__0;
  logic [0:0]    queue__reset;
  logic [5:0]    queue__waddr__0;
  logic [31:0]   queue__wdata__0;
  logic [0:0]    queue__wen__0;

  RegisterFile__b1f7552ff1ee360b queue
  (
    .clk            (         queue__clk        ),
    .raddr__0       (      queue__raddr__0      ),
    .rdata__0       (      queue__rdata__0      ),
    .reset          (        queue__reset       ),
    .waddr__0       (      queue__waddr__0      ),
    .wdata__0       (      queue__wdata__0      ),
    .wen__0         (       queue__wen__0       )
  );

  // Connect struct/array ports and their wire forms
  assign queue__raddr__0 = queue__raddr[0];
  assign queue__rdata[0] = queue__rdata__0;
  assign queue__waddr__0 = queue__waddr[0];
  assign queue__wdata__0 = queue__wdata[0];
  assign queue__wen__0 = queue__wen[0];

  // Connections
  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_ret = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component PipeQueueRTL Definition
// At /home/sjq/.conda/envs/pymtl3/lib/python3.6/site-packages/pymtl3/stdlib/queues/queues.py
module PipeQueueRTL__EntryType_Bits32__num_entries_64
(
  input  logic [0:0]    clk,
  output logic [6:0]    count,
  input  logic [0:0]    reset,
  input  logic [0:0]    deq__en,
  output logic [0:0]    deq__rdy,
  output logic [31:0]   deq__ret,
  input  logic [0:0]    enq__en,
  input  logic [31:0]   enq__msg,
  output logic [0:0]    enq__rdy
);
  // Sub-component declarations
  logic [0:0]    ctrl__clk;
  logic [6:0]    ctrl__count;
  logic [0:0]    ctrl__deq_en;
  logic [0:0]    ctrl__deq_rdy;
  logic [0:0]    ctrl__enq_en;
  logic [0:0]    ctrl__enq_rdy;
  logic [5:0]    ctrl__raddr;
  logic [0:0]    ctrl__reset;
  logic [5:0]    ctrl__waddr;
  logic [0:0]    ctrl__wen;

  PipeQueueCtrlRTL__num_entries_64 ctrl
  (
    .clk            (         ctrl__clk         ),
    .count          (        ctrl__count        ),
    .deq_en         (        ctrl__deq_en       ),
    .deq_rdy        (       ctrl__deq_rdy       ),
    .enq_en         (        ctrl__enq_en       ),
    .enq_rdy        (       ctrl__enq_rdy       ),
    .raddr          (        ctrl__raddr        ),
    .reset          (        ctrl__reset        ),
    .waddr          (        ctrl__waddr        ),
    .wen            (         ctrl__wen         )
  );

  logic [0:0]    dpath__clk;
  logic [31:0]   dpath__deq_ret;
  logic [31:0]   dpath__enq_msg;
  logic [5:0]    dpath__raddr;
  logic [0:0]    dpath__reset;
  logic [5:0]    dpath__waddr;
  logic [0:0]    dpath__wen;

  NormalQueueDpathRTL__EntryType_Bits32__num_entries_64 dpath
  (
    .clk            (         dpath__clk        ),
    .deq_ret        (       dpath__deq_ret      ),
    .enq_msg        (       dpath__enq_msg      ),
    .raddr          (        dpath__raddr       ),
    .reset          (        dpath__reset       ),
    .waddr          (        dpath__waddr       ),
    .wen            (         dpath__wen        )
  );

  // Connections
  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_en = enq__en;
  assign enq__rdy = ctrl__enq_rdy;
  assign ctrl__deq_en = deq__en;
  assign deq__rdy = ctrl__deq_rdy;
  assign count = ctrl__count;
  assign dpath__enq_msg = enq__msg;
  assign deq__ret = dpath__deq_ret;

endmodule


// PyMTL Component TestComponent Definition
// At /home/sjq/git/pymtl_test/test.py
module TestComponent_noparam
(
  input  logic [0:0]    clk,
  input  logic [0:0]    reset,
  input  logic [0:0]    recv__en,
  input  logic [31:0]   recv__msg,
  output logic [0:0]    recv__rdy,
  output logic [0:0]    send__en,
  output logic [31:0]   send__msg,
  input  logic [0:0]    send__rdy
);
  // Sub-component declarations
  logic [0:0]    q__clk;
  logic [6:0]    q__count;
  logic [0:0]    q__reset;
  logic [0:0]    q__deq__en;
  logic [0:0]    q__deq__rdy;
  logic [31:0]   q__deq__ret;
  logic [0:0]    q__enq__en;
  logic [31:0]   q__enq__msg;
  logic [0:0]    q__enq__rdy;

  PipeQueueRTL__EntryType_Bits32__num_entries_64 q
  (
    .clk            (           q__clk          ),
    .count          (          q__count         ),
    .reset          (          q__reset         ),
    .deq__en        (         q__deq__en        ),
    .deq__rdy       (        q__deq__rdy        ),
    .deq__ret       (        q__deq__ret        ),
    .enq__en        (         q__enq__en        ),
    .enq__msg       (        q__enq__msg        ),
    .enq__rdy       (        q__enq__rdy        )
  );

  // PyMTL Update Block Source
  // At /home/sjq/git/pymtl_test/test.py:13
  // @update
  // def comb():
  //     s.send.en@=s.send.rdy & s.q.deq.rdy
  //     s.q.deq.en@=s.send.rdy & s.q.deq.rdy
  
  always_comb begin : comb
    send__en = send__rdy & q__deq__rdy;
    q__deq__en = send__rdy & q__deq__rdy;
  end

  // Connections
  assign q__clk = clk;
  assign q__reset = reset;
  assign q__enq__en = recv__en;
  assign q__enq__msg = recv__msg;
  assign recv__rdy = q__enq__rdy;

endmodule
